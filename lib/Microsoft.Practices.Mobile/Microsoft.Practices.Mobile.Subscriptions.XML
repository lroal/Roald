<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.Mobile.Subscriptions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.Mobile.Subscriptions.SubscriptionParameters">
            <summary>
            	This class provides a container for parameters that are required to create a
            	new subscription.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Mobile.Subscriptions.SubscriptionParameters.Publication">
            <summary>The name assigned on the server for the publication that has been setup for mobile devices.</summary>
        </member>
        <member name="F:Microsoft.Practices.Mobile.Subscriptions.SubscriptionParameters.Publisher">
            <summary>The name of the computer running the data store that contains the publication.</summary>
        </member>
        <member name="F:Microsoft.Practices.Mobile.Subscriptions.SubscriptionParameters.PublisherDatabase">
            <summary>The name of the server-side database that contains the publication.</summary>
        </member>
        <member name="F:Microsoft.Practices.Mobile.Subscriptions.SubscriptionParameters.InternetUrl">
            <summary>The URL of the server data store agent that provides access to the publication.</summary>
        </member>
        <member name="F:Microsoft.Practices.Mobile.Subscriptions.SubscriptionParameters.Subscriber">
            <summary>What to call the subscription that will be created in the local device database.</summary>
        </member>
        <member name="F:Microsoft.Practices.Mobile.Subscriptions.SubscriptionParameters.Filter">
            <summary>A value sent to the server that allows filtering of the data.</summary>
        </member>
        <member name="T:Microsoft.Practices.Mobile.Subscriptions.SubscriptionCredentials">
            <summary>
            	Provides credential information that the subscription manager needs in order
            	to synchronize a subscription with a remote SQL Server publication.
            </summary>
            <remarks>
            <para>
            	In the simple case where the only authentication is database authentication on
            	the publisher end, you can create an instance of this class an set the PublisherLogin
            	and PublisherPassword and everything will just work.
            </para>
            <para>
            	If you need to perform authentication in proxies or gateways, you'll need to create
            	a subclass and override the <see cref="M:Microsoft.Practices.Mobile.Subscriptions.SubscriptionCredentials.ApplyCredentials(System.Data.SqlServerCe.SqlCeReplication)"/> method.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.Mobile.Subscriptions.SubscriptionCredentials.PublisherLogin">
            <summary>
            	The SQL Server user name to use if you're using SQL authentication.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Mobile.Subscriptions.SubscriptionCredentials.PublisherPassword">
            <summary>
            	The SQL Server password to use if the subscription will be connecting with SQL authentication.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Mobile.Subscriptions.SubscriptionCredentials.PublisherSecurityMode">
            <summary>
            	How SQL Server Mobile will attempt to authenticate with the remote server, which is either
            	Windows Authentication, or Sql Server authentication (username and password).
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SubscriptionCredentials.ApplyCredentials(System.Data.SqlServerCe.SqlCeReplication)">
            <summary>
            	Override this method if you need to apply more credentials than the basic set, or if you
            	need to use NTAuthentication instead of SQL Server authentication.
            </summary>
            <remarks>
            	This method is called by the <see cref="!:SubscriptionManager"/> class just before it starts as
            	synchronization (either synchronous or asynchronous). The default implementaion sets the
            	SQL server authentication to use <see cref="F:System.Data.SqlServerCe.SecurityType.DBAuthentication"/> and it sets
            	the PublisherLogin and PublisherPassword values using the values stored in this instance.
            </remarks>
            <param name="repl">
            	The SqlCeReplication instance that the <see cref="!:SubscriptionManager"/> class has prepared and will use
            	after this method call returns to perform a synchronization.
            </param>
        </member>
        <member name="T:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager">
            <summary>
            	This class manages a set of subscriptions in the database. For this class to work
            	correctly, all subscriptions must be added and removed via this manager.
            </summary>
            <remarks>
            	The synchronization supported by this class is one-way, with data from the
            	server being downloaded to the local database as reference data.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.#ctor(Microsoft.Practices.Mobile.DataAccess.Database,Microsoft.Practices.Mobile.DataAccess.Database,Microsoft.Practices.Mobile.Subscriptions.ISubscriptionCredentialService)">
            <summary>
            	Constructor for the <see cref="!:SubscriptionManager"/> class.
            </summary>
            <param name="refDatabase">
            	Database that will contain the actual subscriptions and data retrieved by these
            	subscriptions. Can be the same database as the <paramref name="infoDatabase"/> parameter.
            </param>
            <param name="infoDatabase">
            	Database that will be used by <see cref="!:SubscriptionManager"/> to store data about
            	registered subscriptions.
            </param>
            <param name="subCredentials">
            	The object that can provide credentials for subscriptions.
            </param>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.#ctor(Microsoft.Practices.Mobile.DataAccess.Database,Microsoft.Practices.Mobile.Subscriptions.ISubscriptionCredentialService)">
            <summary>
            	Creates a new instance of this class and provides it with the required services.
            </summary>
            <param name="databaseService">
            	Provides the connection to the local database where subscriptions will be managed
            	by this class.
            </param>
            <param name="subCredentials">
            	Provides the credentials needed for a subscription to connect to the server
            	that has the publication used by the subscription.
            </param>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.Add(Microsoft.Practices.Mobile.Subscriptions.SubscriptionParameters)">
            <summary>
            	Adds a new subscription to the database. Call <see cref="!:BeginSync"/> to
            	download the subscription from the server.
            </summary>
            <remarks>
            	The subscription information is initially stored in the SubscriptionInfo
            	table only in the local database. It will also appear in system tables
            	managed by SQL Server Mobile after the first synchronization. Use
            	<see cref="!:BeginSync"/> or <see cref="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.Synchronize(Microsoft.Practices.Mobile.Subscriptions.Subscription)"/> to synchronize
            	the data.
            </remarks>
            <param name="sub"></param>
            <exception cref="T:System.ArgumentException">
            	A subscription with the same publisher information already exists.
            </exception>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.Add(System.Data.SqlServerCe.SqlCeReplication)">
            <summary>
            	Adds a new subscription to the database. Call <see cref="!:BeginSync"/> to
            	download the subscription from the server.
            </summary>
            <remarks>
            <para>
            	The subscription information is initially stored in the SubscriptionInfo
            	table only in the local database. It will also appear in system tables
            	managed by SQL Server Mobile after the first synchronization. Use
            	<see cref="!:BeginSync"/> or <see cref="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.Synchronize(Microsoft.Practices.Mobile.Subscriptions.Subscription)"/> to synchronize
            	the data.
            </para>
            <para>
            	Note: You should use the <paramref name="sub"/> parameter only as a carrier of
            	data. In other words, do not call any methods on this instance--let this class
            	handle all the method calls.
            </para>
            </remarks>
            <param name="sub"></param>
            <exception cref="T:System.ArgumentException">
            	A subscription with the same publisher information already exists.
            </exception>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.ReloadSubscriptions">
            <summary>
            	Re-reads the subscription information from the database and reloads it
            	into the Subscriptions collection.
            </summary>
            <remarks>
            	Existing Subscription instances will remain valid after a reload as long as the
            	subscription wasn't dropped from this subscription manager.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.Drop(Microsoft.Practices.Mobile.Subscriptions.Subscription)">
            <summary>
            	Removes a subscription from the local database.
            </summary>
            <param name="subscription"></param>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.Drop(Microsoft.Practices.Mobile.Subscriptions.Subscription,System.Boolean)">
            <summary>
            	Removes a subscription from the local database.
            </summary>
            <param name="subscription"></param>
            <param name="keepSubscriptionInformation">Indicates if the information about the subscription should be kept in the <see cref="T:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager"/></param>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.Drop(System.String)">
            <summary>
            	Removes a subscription from both the <see cref="!:SubscriptionManager"/> database
            	and from the Sql Server Mobile subscription list (if it's been synchronized).
            </summary>
            <param name="subscriber"></param>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.Synchronize(Microsoft.Practices.Mobile.Subscriptions.Subscription)">
            <summary>
            	Download data for the subscription from the server, and don't return until the download
            	finishes.
            </summary>
            <param name="subscription">
            	The subscription for which you want to download data from the server.
            </param>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.Synchronize(System.String)">
            <summary>
            	Download data for the subscription from the server, and don't return until the download
            	finishes.
            </summary>
            <param name="subscriber">
            	The subscriber name that you provided when you registered the subscription with the
            	<see cref="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.Add(Microsoft.Practices.Mobile.Subscriptions.SubscriptionParameters)"/> method.
            </param>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.BeginSynchronize(Microsoft.Practices.Mobile.Subscriptions.Subscription)">
            <summary>
            	Begin downloading data for the subscription and return control immediately.
            </summary>
            <remarks>
            <para>
            	Before you call this method, you can register to receive events from the <paramref name="subscription"/>
            	object. This will allow you to monitor the progress of the synchronization.
            </para>
            <para>
            	Once the synchronization completes, you must call <see cref="!:EndSync"/>.
            </para>
            </remarks>
            <param name="subscription">
            	The subscription you want to synchronize.
            </param>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.BeginSynchronize(Microsoft.Practices.Mobile.Subscriptions.Subscription,System.Boolean)">
            <summary>
            	Begin downloading data for the subscription and return control immediately.
            </summary>
            <remarks>
            <para>
            	Before you call this method, you can register to receive events from the <paramref name="subscription"/>
            	object. This will allow you to monitor the progress of the synchronization.
            </para>
            <para>
            	Once the synchronization completes, you must call <see cref="!:EndSync"/>.
            </para>
            </remarks>
            <param name="subscription">
            	The subscription you want to synchronize.
            </param>
            <param name="reinitialize">
            	Boolean indicating if the subscription should be reinitialized
            </param>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.CancelSynchronize(Microsoft.Practices.Mobile.Subscriptions.Subscription)">
            <summary>
            	Call this method to cancel the synchronize from the client.
            </summary>
            <param name="subscription">
            	The subscription that you want to cancel.
            </param>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.EndSynchronize(Microsoft.Practices.Mobile.Subscriptions.Subscription)">
            <summary>
            	Call this method once a synchronization completes when you start the synchronization
            	by calling <see cref="!:BeginSync"/>.
            </summary>
            <param name="subscription">
            	The subscription that finished synchronizing.
            </param>
            <exception cref="T:System.Data.SqlServerCe.SqlCeException">
            	If there was an error during synchronization, this type of exception will
            	be thrown.
            </exception>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.ClearCache">
            <summary>
            	Clears the <see cref="P:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.Subscriptions"/> list so it will be reloaded from the database
            	the next time you access the list.
            </summary>
            <remarks>
            	We added this method to aid writing unit tests.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.SubscriptionsAreCurrent">
            <summary>
            	Reports if the <see cref="P:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.Subscriptions"/> collection is current. If this property
            	is false, it means that the list of subscriptions need to be reloaded into memory.
            </summary>
            <remarks>
            	We added this property to help with writing the unit tests, and it doesn't really
            	provide much useful information since other methods will automatically reload
            	the subscription list if it needs to be updated.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.Subscriptions">
            <summary>
            	A read-only list of subscriptions that have been registered with this subscription
            	manager in the local database described by the <seealso cref="!:DatabaseService"/> property.
            </summary>
            <remarks>
            	This read-only list will change if you add or drop a subscription.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.SqlSubscriptionManager.SubscriptionCredentialService">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.Mobile.Subscriptions.ISubscriptionCredentialService"/> used for getting credentials for the subscriptions
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Mobile.Subscriptions.TableEventArgs">
            <summary>
            	The event arguments that are passed when the download status of a table changes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.TableEventArgs.#ctor(System.String)">
            <summary>
            	Constructor
            </summary>
            <param name="tableName">Name of the table that is being or was syncrhonized.</param>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.TableEventArgs.TableName">
            <summary>
            	Gets the name of the table that is being or was syncrhonized.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Mobile.Subscriptions.Guard">
            <summary>
            Common guard clauses.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.Guard.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Checks an argument to ensure it isn't null.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="T:Microsoft.Practices.Mobile.Subscriptions.SubscriptionCollection">
            <summary>
            	Manages the list of subscriptions that are in the <see cref="!:SubscriptionManager"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SubscriptionCollection.Contains(Microsoft.Practices.Mobile.Subscriptions.Subscription)">
            <summary>
            	Tests to see if an exact instance of Subscription is in this collection.
            </summary>
            <param name="subscription">
            	The instance we're testing
            </param>
            <returns>true only if this specific instance is in this collection.</returns>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SubscriptionCollection.ContainsKey(System.String)">
            <summary>
            	Looks to see if there is a <see cref="T:Microsoft.Practices.Mobile.Subscriptions.Subscription"/> in this collection with the
            	Subscriber name.
            </summary>
            <param name="key">The Subscriber name of the <see cref="T:Microsoft.Practices.Mobile.Subscriptions.Subscription"/> instance to look for.</param>
            <returns>true if there is a <see cref="T:Microsoft.Practices.Mobile.Subscriptions.Subscription"/> with this Subscriber. Otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SubscriptionCollection.Find(System.String)">
            <summary>
            	Locates a <see cref="T:Microsoft.Practices.Mobile.Subscriptions.Subscription"/> in this collection that has the same Subscriber
            	name as <paramref name="key"/>.
            </summary>
            <param name="key">The Subscriber to look for in this collection.</param>
            <returns>
            	Index of the subscription with the provided Subscriber name, or -1 if no match found.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.SubscriptionCollection.Find(Microsoft.Practices.Mobile.Subscriptions.Subscription)">
            <summary>
            	Checks to see if a "matching" subscription exists in this list. Matching,
            	in this case, doesn't mean the same exact subscription. Rather, we're
            	using the <see cref="T:Microsoft.Practices.Mobile.Subscriptions.Subscription"/> class' IComparable interface to determine
            	what is a match.
            </summary>
            <param name="example">An "example" subscription object. This method looks for a close match.</param>
            <returns>The index of the match we found, or -1 if we didn't find a match.</returns>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.SubscriptionCollection.Item(System.Int32)">
            <summary>
            	Provides access to the elements of this collection via the index.
            </summary>
            <param name="index">Index of the item to retreive.</param>
            <returns>The element located at the index.</returns>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.SubscriptionCollection.Item(System.String)">
            <summary>
            	Returns the <see cref="T:Microsoft.Practices.Mobile.Subscriptions.Subscription"/> instance with the Subscriber string.
            </summary>
            <param name="key">The Subscriber key to look for.</param>
            <returns>An instance of <see cref="T:Microsoft.Practices.Mobile.Subscriptions.Subscription"/> that has the key provided.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            	If there is no <see cref="T:Microsoft.Practices.Mobile.Subscriptions.Subscription"/> instance with a matching Subscriber value.
            </exception>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.SubscriptionCollection.Count">
            <summary>
            	Number of <see cref="T:Microsoft.Practices.Mobile.Subscriptions.Subscription"/> elements in this collection.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Mobile.Subscriptions.Subscription">
            <summary>
            	This class contains information about a subscription that is currently
            	in the database.
            </summary>
            <remarks>
            	This class contains a number of properties that mirror properties from
            	the SqlCeReplication class.
            <para>
            	 See teh SQL Server 2005 Mobile Edition Books Online for more information.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.Subscription.#ctor">
            <summary>
            	This method is marked as Internal so we can mock a subscription object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.Subscription.CompareTo(Microsoft.Practices.Mobile.Subscriptions.Subscription)">
            <summary>
            	Compares another <see cref="T:Microsoft.Practices.Mobile.Subscriptions.Subscription"/> with this one to see if they refer to the
            	same publication. This method uses the <see cref="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.Publication"/>, <see cref="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.Publisher"/>,
            	and <see cref="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.PublisherDatabase"/> properties for comparison.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.Subscription.CompareTo(Microsoft.Practices.Mobile.Subscriptions.SubscriptionParameters)">
            <summary>
            	Compares another <see cref="T:Microsoft.Practices.Mobile.Subscriptions.SubscriptionParameters"/> with this one to see if they refer to the
            	same publication. This method uses the <see cref="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.Publication"/>, <see cref="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.Publisher"/>,
            	and <see cref="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.PublisherDatabase"/> properties for comparison.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="E:Microsoft.Practices.Mobile.Subscriptions.Subscription.SyncCompleted">
            <summary>
            	Fired when SQL Mobile finishes synchronizing this subscription asynchronously.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Mobile.Subscriptions.Subscription.SyncProgress">
            <summary>
            	Fired periodically during synchronization of this subscription. It passes the
            	percentage complete as an int. Only for asynchronous.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Mobile.Subscriptions.Subscription.TableUploadStarted">
            <summary>
            	Fired when SQL Mobile begins sending local changes in a table back to the server.
            	Passes the name of the table. Only for asynchronous.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Mobile.Subscriptions.Subscription.TableDownloadStarted">
            <summary>
            	Fired when SQL Mobile begins to download data for a table on the server. It
            	passes the name of the table. Only for asynchronous.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.InternetUrl">
            <summary>
            	The URL that SQL Mobile will use to connect to the SQL Server Mobile Server Agent
            	that provides access to the publication on the server. Only for asynchronous.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.AsyncResult">
            <summary>
            	Provides a way for you to check the status of an asynchronous synchronization started
            	by a call to <see cref="!:SubscriptionManager.BeginSync"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.CompressionLevel">
            <summary>
            	Gets or sets the compression level used when compressing data between the
            	server and this device. Valid values are 0 to 6, with 0 being no compression.
            	The default value is 1.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.ConnectionRetryTimeout">
            <summary>
            	Gets or sets the number of seconds that SQL Server Mobile will keep trying to process
            	a request before it fails. Valid values are 0 to 900 seconds. The default is 120 seconds.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.Distributor">
            <summary>
            	Gets or sets the name of the Distributor that provides access to the remote SQL Server
            	database.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.DistributorAddress">
            <summary>
            	Gets or sets the network address for the distributor. See teh SQL Server 2005 Mobile Edition
            	Books Online for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.DistributorNetwork">
            <summary>
            	The network to use between the SQL Server Reconciler and the Distributor.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.ExchangeType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.Filter">
            <summary>
            	Provides a single parameter you can send to the server to filter the data returned
            	by the publication. This is a read-only value. To change the filter, you have to
            	drop and re-create the subscription.
            </summary>
            <remarks>
            	For SQL Server Mobile replication, this is placed into the HostName property of the
            	replication object.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.InternetProxyServer">
            <summary>
            	The proxy server that will be used.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.InternetProxyLogin">
            <summary>
            	The login for the proxy server.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.InternetProxyPassword">
            <summary>
            	The password for the proxy server.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.LastSyncTime">
            <summary>
            	Returns the date/time when this subscription was last synchronized, or null if it hasn't
            	been synchronized yet.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.LogOnTimeout">
            <summary>
            	The timeout for the login attempt, measured in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.ProfileName">
            <summary>
            	Gets the name of the profile that will be used.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.Publisher">
            <summary>
            	Gets the name of the publisher.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.PublisherAddress">
            <summary>
            	Gets the address of the publisher
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.PublisherDatabase">
            <summary>
            	Gets the name of the database on the publisher that is being used.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.PublisherNetwork">
            <summary>
            	Gets the network protocol used between the SQL Server Replication provider and the SQL Server database.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.Publication">
            <summary>
            	Gets the name of the publication to which this subscription is attached.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.HasBeenSynchronized">
            <summary>
            	Reports whether or not this subscription has been synchornized yet. When you add
            	a subscription, the information is saved in the database without attempting to
            	synchronize with the server. This property allows you to find out if a synchornization
            	has been performed on this subsciption.
            </summary>
            <value>
            	True if this subscription has been synchronized with the server at least once. False if it 
            	has never been synchronized with the server.
            </value>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.QueryTimeout">
            <summary>
            	Gets the timeout, in seconds, for each query to run before it fails. The default is 300 seconds.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.SnapshotTransferType">
            <summary>
            	Gets the type of transfer that will be used to transfer the snapshot file from the distributor
            	to the gateway running IIS.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.Subscriber">
            <summary>
            	Gets the name of this subscriber.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.SubscriptionInfoId">
            <summary>
            	Gets the row ID for the local storage of this subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Subscription.Validate">
            <summary>
            	Gets the validation setting that will be used during synchronization.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Mobile.Subscriptions.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Properties.Resources.NoSuchSubscription">
            <summary>
              Looks up a localized string similar to No such subscription exists or was not created by this manager..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.Properties.Resources.SubscriptionExists">
            <summary>
              Looks up a localized string similar to Subscription already exists.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Mobile.Subscriptions.ISubscriptionCredentialService">
            <summary>
            	Provides an abstract interface that you need to implement in order for <see cref="!:SubscriptionManager"/>
            	to find credentials.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.ISubscriptionCredentialService.FindCredentials(Microsoft.Practices.Mobile.Subscriptions.Subscription)">
            <summary>
            	Finds a set of credentials for a specific subscription that will be used to connect
            	to the publication on the remote server.
            </summary>
            <param name="subscription">
            	The subscription for which you need credentials.
            </param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.Mobile.Subscriptions.ProgressEventArgs">
            <summary>
            	Used to provide progress reports during background synchronization.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Mobile.Subscriptions.ProgressEventArgs.#ctor(System.Int32)">
            <summary>
            	Constructor.
            </summary>
            <param name="progress">The percent progress, from 0 to 100.</param>
        </member>
        <member name="P:Microsoft.Practices.Mobile.Subscriptions.ProgressEventArgs.Progress">
            <summary>
            	Gets the percent complete, from 0 to 100.
            </summary>
        </member>
    </members>
</doc>
