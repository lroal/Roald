<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IdeaBlade.Persistence</name>
    </assembly>
    <members>
        <member name="T:IdeaBlade.Persistence.UniqueIdMap">
            <summary>
            A strongly typed dictionary mapping <see cref="T:IdeaBlade.Persistence.UniqueId"/> keys containing temporary identifiers
            to values for the permanent identifiers.
            <seealso cref="T:IdeaBlade.Persistence.IIdGenerator"/>
            </summary>
            <remarks>Used in the <see cref="T:IdeaBlade.Persistence.IIdGenerator"/> method <see cref="M:IdeaBlade.Persistence.IIdGenerator.GetRealIdMap(IdeaBlade.Persistence.UniqueIdCollection,IdeaBlade.Util.IDataSourceKey)"/>
            when mapping temporary to real identifiers.</remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.UniqueIdMap.#ctor">
            <summary>
            Initializes a new instance of the UniqueIdMap class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.UniqueIdMap.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the UniqueIdMap class.
            </summary>
            <param name="pInfo">info</param>
            <param name="pContext">context</param>
        </member>
        <member name="M:IdeaBlade.Persistence.UniqueIdMap.AddMap(IdeaBlade.Persistence.UniqueIdMap)">
            <summary>
            Adds another UniqueIdMap to this one.
            </summary>
            <param name="pMap">map</param>
        </member>
        <member name="M:IdeaBlade.Persistence.UniqueIdMap.Contains(IdeaBlade.Persistence.UniqueId)">
            <summary>
            Obsolete.  Use <b>ContainsKey</b> instead.
            </summary>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Persistence.ServerRpcDelegate">
            <summary>
              Defines a delegate that a client uses to call a method on the server.
              <seealso cref="T:IdeaBlade.Persistence.AllowRpcAttribute"/>
              <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.InvokeServerMethod(IdeaBlade.Persistence.ServerRpcDelegate,System.Object[])"/>
            </summary>
            <remarks>Any method which will be invoked via the <see cref="M:IdeaBlade.Persistence.PersistenceManager.InvokeServerMethod(IdeaBlade.Persistence.ServerRpcDelegate,System.Object[])"/>
            call must use this delegate signature.
            </remarks>
            <example><code lang="C#">
// Sample showing invocation of server method
PersistenceManager pm = PersistenceManager.DefaultManager;
int orderId = 10250;
bool mailSent = (bool) pm.InvokeServerMethod(Order.EmailOrderInfo, orderId);

// sample method defined in Order class
public class Order : OrderDataRow {
//...
  // ServerRpcDelegate method, called from client
  [AllowRpc]
  public static Object EmailOrderInfo(IPrincipal pPrincipal, DataSourceResolver pResolver, params Object[] pArgs) {
    int orderId = Convert.ToInt32(pArgs[0]);

    // build and send an email message 
    string from = "sales@mycompany.com";
    string to = "customer@yourcompany.com";
    System.Net.Mail.MailMessage msg = new System.Net.Mail.MailMessage(from, to);
    msg.Subject = "Order Information";
    msg.Body = string.Format("Order id = {0} has been shipped", orderId);

    System.Net.Mail.SmtpClient mailClient = new System.Net.Mail.SmtpClient("localhost");
    try {
      mailClient.Send(msg);
    } catch (Exception e) {
      TraceFns.WriteLine(e.Message);
      return false;
    }
    return true;
 }
}
</code></example><example><code lang="VB">
 ' Sample showing invocation of server method
Dim pm As PersistenceManager = PersistenceManager.DefaultManager
Dim orderId As Integer = 10250
Dim mailSent As Boolean = CBool(pm.InvokeServerMethod(Order.EmailOrderInfo, orderId))

' sample method defined in Order class
Public Class Order : Inherits OrderDataRow 
'...
  Public Shared&lt;AllowRpc()&gt;  _
  Function EmailOrderInfo(pPrincipal As IPrincipal, pResolver As DataSourceResolver, ParamArray pArgs() As [Object]) As [Object]
    Dim orderId As Integer = Convert.ToInt32(pArgs(0))
   
    ' build and send an email message 
    Dim from As String = "sales@mycompany.com"
    Dim [to] As String = "customer@yourcompany.com"
    Dim msg As New System.Net.Mail.MailMessage(from, [to])
   
    msg.Subject = "Order Information"
    msg.Body = String.Format("Order id = {0} has been shipped", orderId)
   
    Dim client As New System.Net.Mail.SmtpClient("localhost")
    Try
      client.Send(msg)
    Catch e As Exception
      TraceFns.WriteLine(e.Message)
      Return False
   End Try
   Return True
 End Function 
End Class
	</code></example>
        </member>
        <member name="T:IdeaBlade.Persistence.ServerRpcPersistenceDelegate">
            <summary>
              Defines a delegate that a client uses to call a method on the server.
              <seealso cref="T:IdeaBlade.Persistence.AllowRpcAttribute"/>
              <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.InvokeServerMethod(IdeaBlade.Persistence.ServerRpcDelegate,System.Object[])"/>
            </summary>
            <remarks>Any method which will be invoked via the <see cref="M:IdeaBlade.Persistence.PersistenceManager.InvokeServerMethod(IdeaBlade.Persistence.ServerRpcDelegate,System.Object[])"/>
            call must use this delegate signature.
            </remarks>
            <example><code lang="C#">
// Sample showing invocation of server method
PersistenceManager pm = PersistenceManager.DefaultManager;
int orderId = 10250;
bool mailSent = (bool) pm.InvokeServerMethod(Order.EmailOrderInfo, orderId);

// sample method defined in Order class
public class Order : OrderDataRow {
//...
  // ServerRpcDelegate method, called from client
  [AllowRpc]
  public static Object EmailOrderInfo(IPrincipal pPrincipal, DataSourceResolver pResolver, params Object[] pArgs) {
    int orderId = Convert.ToInt32(pArgs[0]);

    // build and send an email message 
    string from = "sales@mycompany.com";
    string to = "customer@yourcompany.com";
    System.Net.Mail.MailMessage msg = new System.Net.Mail.MailMessage(from, to);
    msg.Subject = "Order Information";
    msg.Body = string.Format("Order id = {0} has been shipped", orderId);

    System.Net.Mail.SmtpClient mailClient = new System.Net.Mail.SmtpClient("localhost");
    try {
      mailClient.Send(msg);
    } catch (Exception e) {
      TraceFns.WriteLine(e.Message);
      return false;
    }
    return true;
 }
}
</code></example><example><code lang="VB">
 ' Sample showing invocation of server method
Dim pm As PersistenceManager = PersistenceManager.DefaultManager
Dim orderId As Integer = 10250
Dim mailSent As Boolean = CBool(pm.InvokeServerMethod(Order.EmailOrderInfo, orderId))

' sample method defined in Order class
Public Class Order : Inherits OrderDataRow 
'...
  Public Shared&lt;AllowRpc()&gt;  _
  Function EmailOrderInfo(pPrincipal As IPrincipal, pResolver As DataSourceResolver, ParamArray pArgs() As [Object]) As [Object]
    Dim orderId As Integer = Convert.ToInt32(pArgs(0))
   
    ' build and send an email message 
    Dim from As String = "sales@mycompany.com"
    Dim [to] As String = "customer@yourcompany.com"
    Dim msg As New System.Net.Mail.MailMessage(from, [to])
   
    msg.Subject = "Order Information"
    msg.Body = String.Format("Order id = {0} has been shipped", orderId)
   
    Dim client As New System.Net.Mail.SmtpClient("localhost")
    Try
      client.Send(msg)
    Catch e As Exception
      TraceFns.WriteLine(e.Message)
      Return False
   End Try
   Return True
 End Function 
End Class
	</code></example>
        </member>
        <member name="T:IdeaBlade.Persistence.FindRowsResultMode">
            <summary>
            Information regarding the behaviour of the <see cref="M:IdeaBlade.Persistence.IEntityQuery.FindRows(IdeaBlade.Persistence.PersistenceManager)"/> method call.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.FindRowsResultMode.None">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.FindRowsResultMode.Implemented">
            <summary>
            Find rows is implemented. 
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.FindRowsResultMode.RequiresDataSourceMerge">
            <summary>
            Result of FindRows will be incomplete unless the results from the data source query
            are merged with it. 
            </summary>
            <remarks>
            This currently only happens with an <see cref="T:IdeaBlade.Persistence.Rdb.RdbQuery"/> with subqueries and
            <see cref="P:IdeaBlade.Persistence.Rdb.SuppressQueryInversion"/> set to <c>true</c>. In this case the result of FindRows may not return all of the 
            objects in the cache that do in fact meet its criteria because some of the dependent objects 
            may not be available.
            </remarks>
        </member>
        <member name="F:IdeaBlade.Persistence.FindRowsResultMode.InvolvesSubqueries">
            <summary>
            The FindRows is implemented using some form of subquery navigation.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.IEntityQuery">
             <summary>
             Standard interface used to express all business object queries. Knowledge of this interface is only needed 
             if you are extending the existing query mechanisms.
             </summary>
             <remarks>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.IEntityQuery.FindRows(IdeaBlade.Persistence.PersistenceManager)">
            <summary>
            Returns an array of strongly typed DataRows (Entities) from the cache.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.IEntityQuery.Fetch(System.Data.DataSet,IdeaBlade.Util.IDataSourceKey)">
            <summary>
            Fetches data into an existing dataset from the backend data source.
            </summary>
            <param name="pDataSet">Dataset for retrieved data</param>
            <param name="pDataSourceKey">Key to access data source</param>
        </member>
        <member name="M:IdeaBlade.Persistence.IEntityQuery.InQueryCache(IdeaBlade.Persistence.QueryCache)">
            <summary>
            Is this query in the QueryCache
            </summary>
            <param name="pQueryCache"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.IEntityQuery.AddToQueryCache(IdeaBlade.Persistence.QueryCache)">
            <summary>
            Add this query to the query cache
            </summary>
            <param name="pQueryCache"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.IEntityQuery.EntityType">
            <summary>
            The entity type that this query returns.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.IEntityQuery.QueryStrategy">
            <summary>
            Determines whether this query will operate against the data source, the in-memory cache,
            or a combination of the two.
            </summary>
            <remarks>
            If this is set to <see cref="F:IdeaBlade.Persistence.QueryStrategy.CacheOnly"/> then the FindRows method must be fully 
            implemented.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.IEntityQuery.CommandTimeout">
            <summary>
            Gets or sets the timeout value for the command.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.IEntityQuery.FindRowsResultMode">
            <summary>
            Returns information regarding the behaviour of the <see cref="M:IdeaBlade.Persistence.IEntityQuery.FindRows(IdeaBlade.Persistence.PersistenceManager)"/> method call.
            </summary>
            <value>The FindRows result mode.</value>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityQueryBuilder">
            <summary>
            Used internally by the framework to build an <see cref="T:IdeaBlade.Persistence.EntityQuery"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryBuilder.BuildQuery(System.Data.DataColumn[],IdeaBlade.Persistence.PrimaryKey)">
            <summary>
            Builds the query.
            </summary>
            <param name="pPrimaryKeyColumns"></param>
            <param name="pPrimaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryBuilder.BuildQuery(System.Data.DataColumn[],IdeaBlade.Persistence.PrimaryKey[])">
            <summary>
            Builds the query.
            </summary>
            <param name="pPrimaryKeyColumns"></param>
            <param name="pPrimaryKeys"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryBuilder.BuildQuery(System.Data.DataColumn[],IdeaBlade.Persistence.PrimaryKeyList)">
            <summary>
            Builds the query.
            </summary>
            <param name="pPrimaryKeyColumns"></param>
            <param name="pPkList"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryBuilder.BuildQuery(System.Type,IdeaBlade.Persistence.EntityColumn[],System.Collections.ICollection)">
            <summary>
            Builds the query.
            </summary>
            <param name="pEntityType">Type of the entity.</param>
            <param name="pColumns">columns</param>
            <param name="pValues">values</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryBuilder.BuildQuery(System.Type,System.String,System.Collections.ICollection)">
            <summary>
            Builds the query.
            </summary>
            <param name="pEntityType">Type of the entity.</param>
            <param name="pColumnName">Name of the column.</param>
            <param name="pValues">values</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryBuilder.BuildQuery(System.Type,System.String[],System.Collections.ICollection)">
            <summary>
            Builds the query.
            </summary>
            <param name="pEntityType">Type of the entity.</param>
            <param name="pColumnNames">column names</param>
            <param name="pValues">values</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryBuilder.BuildRefetchQuery(System.Collections.ICollection)">
            <summary>
            Builds the refetch query.
            </summary>
            <param name="pEntities">entities</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryBuilder.BuildRefetchQueries(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Builds the refetch queries.
            </summary>
            <param name="pEntities">entities</param>
            <param name="pMaxEntitiesPerQuery">max entities per query</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryBuilder.Partition(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Partitions the specified collection.
            </summary>
            <param name="pCollection">collection</param>
            <param name="pMaxPartitionSize">Size of the max partition.</param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityColumn">
            <summary>
            Representation of a single column within an <see cref="T:IdeaBlade.Persistence.Entity"/>.  
            </summary>
            <remarks>
            The <b>IdeaBlade DevForce Object Mapping Tool</b> automatically generates
            <b>EntityColumns</b> for your business objects.
            <para>
            <b>EntityColumns</b> are not restricted
            to a specific <see cref="T:System.Data.DataSet"/> as <see cref="T:System.Data.DataColumn"/>s are. 
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityColumn.GetEntityColumn(System.Type,System.String)">
            <summary>
            Gets the entity column for a specified entity type and column name.
            </summary>
            <param name="pEntityType">Type of the entity.</param>
            <param name="pColumnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityColumn.GetEntityColumns(System.Type)">
            <summary>
            Return a list of all of the EntityColumns associated with a specified entity type.
            </summary>
            <param name="pEntityType"></param>
            <returns>List of <see cref="T:IdeaBlade.Persistence.EntityColumn"/> objects</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityColumn.#ctor(System.Type,System.String,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the EntityColumn class.
            </summary>
            <param name="pEntityType">The entity type that this column belongs to</param>
            <param name="pColumnName">The entity column name</param>
            <param name="pDataType">The data type of this column</param>
            <param name="pIsNullable">Whether this column can accept null values</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityColumn.#ctor(System.Type,System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EntityColumn class.
            </summary>
            <param name="pEntityType">The entity type that this column belongs to</param>
            <param name="pColumnName">The entity column name</param>
            <param name="pDataType">The data type of this column</param>
            <param name="pIsNullable">Whether this column can accept null values</param>
            <param name="pIsPrimaryKeyColumn">Whether this column is a primary key column</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityColumn.#ctor(System.Type,System.String,System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EntityColumn class.
            </summary>
            <param name="pEntityType">The entity type that this column belongs to</param>
            <param name="pColumnName">The entity column name</param>
            <param name="pDataType">The data type of this column</param>
            <param name="pIsNullable">Whether this column can accept null values</param>
            <param name="pIsPrimaryKeyColumn">Whether this column is a primary key column</param>
            <param name="pIsAutoIncrementing">Whether this column is autoincrementing</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityColumn.#ctor(System.Type,System.String,System.Type,System.Boolean,System.Boolean,System.Boolean,IdeaBlade.Persistence.DataSourceAccessType)">
            <summary>
            Initializes a new instance of the EntityColumn class.
            </summary>
            <param name="pEntityType">The entity type that this column belongs to</param>
            <param name="pColumnName">The entity column name</param>
            <param name="pDataType">The data type of this column</param>
            <param name="pIsNullable">Whether this column can accept null values</param>
            <param name="pIsPrimaryKeyColumn">Whether this column is a primary key column</param>
            <param name="pIsAutoIncrementing">Whether this column is autoincrementing</param>
            <param name="pSourceAccessType">DataSource Access Type.</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityColumn.ToDataColumn(System.Data.DataSet)">
            <summary>
            Converts an EntityColumn to a DataColumn within the context of a specified DataSet.
            Throws an exception if the DataSet does not contain the column.
            </summary>
            <param name="pDataSet">The DataSet from which a corresponding column is to be located</param>
            <returns>The DataColumn within the specified DataSet that corresponds to this instance.</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityColumn.ToDataColumns(System.Data.DataSet)">
            <summary>
            Converts an EntityColumn to a list of DataColumn within the context of a specified DataSet.
            This overload is intended to be used when the entity column in question is an abstract entity column
            and therefore may have more than one corresponding datacolumn ( one per concrete subclass)
            </summary>
            <param name="pDataSet">The DataSet from which a corresponding column is to be located</param>
            <returns>The DataColumns within the specified DataSet that correspond to this instance.</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityColumn.ToString">
            <summary>
            A string representation of this column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityColumn.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityColumn.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityColumn.EntityType">
            <summary>
            The type of <see cref="T:IdeaBlade.Persistence.Entity"/> to which this column belongs.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityColumn.ColumnName">
            <summary>
            The name of this column in the Entity; this is not necessarily the data source name.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityColumn.DataType">
            <summary>
            The datatype of this column.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityColumn.IsNullable">
            <summary>
            Whether this column can accept a null value.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityColumn.IsPrimaryKeyColumn">
            <summary>
            Whether this column is part of the primary key.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityColumn.IsAutoIncrementing">
            <summary>
            Whether this column is auto-incrementing.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityColumn.SourceAccessType">
            <summary>
            Data source access type for this column.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.IIdentityIdGenerator">
            <summary>
            Interface for generation of unique IDs for new <see cref="T:IdeaBlade.Persistence.Entity"/> objects having <b>Identity</b> columns.
            </summary>
            <remarks>
            This interface is primarily intended as a marker interface to support the default implementation of the 
            <see cref="T:IdeaBlade.Persistence.Rdb.SqlServerIdentityIdGenerator"/>, but users can 
            implement custom classes if necessary.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.IIdGenerator">
            <summary>
            Interface for generation of unique IDs for new <see cref="T:IdeaBlade.Persistence.Entity"/> objects.
            </summary>
            <remarks>
            The <b>IIdGenerator</b> interface defines methods to generate both temporary and real IDs for 
            <see cref="T:IdeaBlade.Persistence.Entity"/> objects, and to map the temporary IDs to real IDs when objects 
            are persisted to a backend data source.  Temporary IDs are created via a call to
            <see cref="M:IdeaBlade.Persistence.PersistenceManager.GenerateId(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityColumn)"/>, and allow
            entities to be created and uniquely identified while the PersistenceManager is disconnected from a backend database.
            Temporary IDs are mapped to real IDs during <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/>
            processing.
            <para>
            Sample code in both VB.NET and C# showing an implementation for ID values of the long datatype is provided 
            with the DevForce installation.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.IIdGenerator.IsApplicable(IdeaBlade.Util.IDataSourceKey)">
            <summary>
            Returns whether the IdGenerator can be used with the specified data source key.
            </summary>
            <param name="pDsKey"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.IIdGenerator.GetNextTempId(IdeaBlade.Persistence.EntityColumn)">
            <summary>
            Generates a new temporary ID for a specified EntityColumn.  
            </summary>
            <param name="pColumn">Column for which a new ID should be generated</param>
            <returns>A new temporary ID</returns>
            <remarks>The definition of a "temporary" ID is user-defined.  In the sample code for a "LongIdGenerator"
            negative integers are used as temporary IDs. 
            <para>This method should also store the temporary IDs generated in a <see cref="T:IdeaBlade.Persistence.UniqueIdCollection"/>.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.IIdGenerator.IsTempId(IdeaBlade.Persistence.UniqueId)">
            <summary>
            Determines whether a given ID is temporary.
            </summary>
            <param name="pUniqueId">ID to be analyzed</param>
            <returns>true if the ID is temporary; otherwise false</returns>
            <remarks>The <see cref="P:IdeaBlade.Persistence.UniqueId.Value"/> contains the ID to be tested.
            You can use the <see cref="P:IdeaBlade.Persistence.EntityColumn.EntityType"/> property of the <see cref="P:IdeaBlade.Persistence.UniqueId.Column"/>
            to determine the <see cref="T:IdeaBlade.Persistence.Entity"/> type.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.IIdGenerator.Reset">
            <summary>
            Reset temporary ID generation back to its initial state. 
            </summary>
            <remarks>Called by the <see cref="T:IdeaBlade.Persistence.PersistenceManager"/> after Id fixup
            during <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/> processing.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.IIdGenerator.GetRealIdMap(IdeaBlade.Persistence.UniqueIdCollection,IdeaBlade.Util.IDataSourceKey)">
            <summary>
            Returns a dictionary that maps temporary IDs to real IDs.
            </summary>
            <remarks>
            In the <see cref="T:IdeaBlade.Persistence.UniqueIdMap"/> returned, the <see cref="T:IdeaBlade.Persistence.UniqueId"/> key contains the 
            temporary ID, while the value holds the real ID.
            <para>
            <b>GetRealIdMap</b> is called by the <see cref="T:IdeaBlade.Persistence.PersistenceManager"/> during <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/> processing.
            The collection of temporary IDs passed in may contain entries for multiple entity types.
            You can use the <see cref="T:IdeaBlade.Util.IDataSourceKey"/> passed to manage access to the backend data source to determine real IDs.
            </para>
            <para>The definition of a "real" ID is user-defined.</para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.IIdGenerator.TempIds">
            <summary>
            Returns the temporary IDs generated since instantiation of this class or the last <see cref="M:IdeaBlade.Persistence.IIdGenerator.Reset"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.IIdentityIdGenerator.NextIdGenerator">
            <summary>
            Gets or sets the fallback <see cref="T:IdeaBlade.Persistence.IIdGenerator"/> to be used.
            </summary>
            <value>The next id generator.</value>
            <remarks>
            This value is set by the <see cref="T:IdeaBlade.Persistence.IdGeneratorFactory"/> from dynamically loaded assemblies,
            and is not required.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.EntitySpan">
            <summary>
            A chained collection of <see cref="T:IdeaBlade.Persistence.EntityRelationLink"/>s used to create a span query.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySpan.#ctor(System.Type,IdeaBlade.Persistence.EntityRelation[])">
            <summary>
            Initializes a new instance of the EntitySpan class.
            </summary>
            <param name="pFromType">Entity type of the query</param>
            <param name="pEntityRelations">One or more entity relations</param>
            <example><code lang="C#">
private void BuildingEntitySpans() {
  // Load all employees with birthdates before 1970
  // span 1 - all associated orders, all associated order details, and all associated Products 
  // span 2 - all associated Customers 
  RdbQuery query = new RdbQuery(typeof(Employee), Employee.BirthDateEntityColumn, EntityQueryOp.LT, new DateTime(1970, 1, 1));
  EntitySpan span1 = new EntitySpan(query.EntityType, EntityRelations.Employee_Order, EntityRelations.Order_OrderDetail, EntityRelations.Product_OrderDetail);
  EntitySpan span2 = new EntitySpan(query.EntityType, EntityRelations.Employee_Order, EntityRelations.Customer_Order);
  System.Diagnostics.Debug.WriteLine(string.Format("span 1 from {0} to {1}", span1.FromType.Name, span1.ToType.Name));
  query.AddSpan(span1);
  query.AddSpan(span2);
  EntityList&lt;Employee&gt; employees = PersistenceManager.DefaultManager.GetEntities&lt;Employee&gt;(query);
}
	</code></example><example><code lang="VB">
Private Sub BuildingEntitySpans()
  ' Load all employees with birthdates before 1970
  ' span 1 - all associated orders, all associated order details, and all associated Products 
  ' span 2 - all associated Customers 
  Dim query As New RdbQuery(GetType(Employee), Employee.BirthDateEntityColumn, EntityQueryOp.LT, New DateTime(1970, 1, 1))
  Dim span1 As New EntitySpan(query.EntityType, EntityRelations.Employee_Order, EntityRelations.Order_OrderDetail, EntityRelations.Product_OrderDetail)
  Dim span2 As New EntitySpan(query.EntityType, EntityRelations.Employee_Order, EntityRelations.Customer_Order)
  System.Diagnostics.Debug.WriteLine(String.Format("span 1 from {0} to {1}", span1.FromType.Name, span1.ToType.Name))
  query.AddSpan(span1)
  query.AddSpan(span2)
  Dim employees As EntityList(Of Employee) = PersistenceManager.DefaultManager.GetEntities(Of Employee)(query)
End Sub

	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySpan.#ctor(IdeaBlade.Persistence.EntityRelationLink[])">
            <summary>
            Initializes a new instance of the EntitySpan class.
            </summary>
            <param name="pEntityRelationLinks">One or more entity relation links</param>
            <example><code lang="C#">
private void BuildingEntitySpans() {
  // Load all employees with birthdates before 1970
  // span 1 - all associated orders, all associated order details, and all associated Products 
  // span 2 - all associated Customers 
  RdbQuery query = new RdbQuery(typeof(Employee), Employee.BirthDateEntityColumn, EntityQueryOp.LT, new DateTime(1970, 1, 1));
  EntitySpan span1 = new EntitySpan(query.EntityType, EntityRelations.Employee_Order, EntityRelations.Order_OrderDetail, EntityRelations.Product_OrderDetail);
  EntitySpan span2 = new EntitySpan(query.EntityType, EntityRelations.Employee_Order, EntityRelations.Customer_Order);
  System.Diagnostics.Debug.WriteLine(string.Format("span 1 from {0} to {1}", span1.FromType.Name, span1.ToType.Name));
  query.AddSpan(span1);
  query.AddSpan(span2);
  EntityList&lt;Employee&gt; employees = PersistenceManager.DefaultManager.GetEntities&lt;Employee&gt;(query);
}
	</code></example><example><code lang="VB">
Private Sub BuildingEntitySpans()
  ' Load all employees with birthdates before 1970
  ' span 1 - all associated orders, all associated order details, and all associated Products 
  ' span 2 - all associated Customers 
  Dim query As New RdbQuery(GetType(Employee), Employee.BirthDateEntityColumn, EntityQueryOp.LT, New DateTime(1970, 1, 1))
  Dim span1 As New EntitySpan(query.EntityType, EntityRelations.Employee_Order, EntityRelations.Order_OrderDetail, EntityRelations.Product_OrderDetail)
  Dim span2 As New EntitySpan(query.EntityType, EntityRelations.Employee_Order, EntityRelations.Customer_Order)
  System.Diagnostics.Debug.WriteLine(String.Format("span 1 from {0} to {1}", span1.FromType.Name, span1.ToType.Name))
  query.AddSpan(span1)
  query.AddSpan(span2)
  Dim employees As EntityList(Of Employee) = PersistenceManager.DefaultManager.GetEntities(Of Employee)(query)
End Sub

	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySpan.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySpan.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:IdeaBlade.Persistence.EntitySpan.EntityRelationLinks">
            <summary>
            Gets the entity relation links defined for the span.
            </summary>
            <value>The entity relation links.</value>
        </member>
        <member name="P:IdeaBlade.Persistence.EntitySpan.FromType">
            <summary>
            Gets the <see cref="T:IdeaBlade.Persistence.Entity"/> type that is navigated <b>from</b> using this EntitySpan.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntitySpan.ToType">
            <summary>
            Gets the <see cref="T:IdeaBlade.Persistence.Entity"/> type that is navigated <b>to</b> using this EntitySpan.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.RelationQuery">
            <summary>
            Used internally by the DevForce Framework to manage entity relations within the <see cref="T:IdeaBlade.Persistence.QueryCache"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.RelationQuery.#ctor(IdeaBlade.Persistence.PrimaryKey,IdeaBlade.Persistence.EntityRelationLink)">
            <summary>
            Initializes a new instance of the RelationQuery" class.
            </summary>
            <param name="pPrimaryKey">primary key</param>
            <param name="pLink">link</param>
        </member>
        <member name="M:IdeaBlade.Persistence.RelationQuery.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.RelationQuery.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.RelationQuery.ToString">
            <summary>
            Returns a human readable representation of this RelationQuery.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.RelationQuery.PrimaryKey">
            <summary>
            The <see cref="P:IdeaBlade.Persistence.RelationQuery.PrimaryKey"/> associated with this RelationQuery.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.RelationQuery.EntityRelationLink">
            <summary>
            The <see cref="P:IdeaBlade.Persistence.RelationQuery.EntityRelationLink"/> associated with this RelationQuery.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.DynamicEntityQuery">
            <summary>
            For internal use only - Wrapper class used to support serialization of IEntityQuery instances
            that involve DynamicEntity subtypes.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityQuery.Adapt(IdeaBlade.Persistence.IEntityQuery)">
            <summary>
            Create the wrapper.
            </summary>
            <param name="pQuery"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityQuery.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityQuery.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Control serialization - called between OnSerializng/OnSerialized.
            We serialize 1) EntityTypeInfo, 2) fully-qualified entity type name, 3) wrapped query
            (minus its entity type in WCF).
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityQuery.FindRows(IdeaBlade.Persistence.PersistenceManager)">
            <summary>
            
            </summary>
            <param name="pPersistenceManager"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityQuery.Fetch(System.Data.DataSet,IdeaBlade.Util.IDataSourceKey)">
            <summary>
            
            </summary>
            <param name="pDataSet"></param>
            <param name="pDataSourceKey"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityQuery.InQueryCache(IdeaBlade.Persistence.QueryCache)">
            <summary>
            
            </summary>
            <param name="pQueryCache"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityQuery.AddToQueryCache(IdeaBlade.Persistence.QueryCache)">
            <summary>
            
            </summary>
            <param name="pQueryCache"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.DynamicEntityQuery.InnerQuery">
            <summary>
            Return the wrapped query.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.DynamicEntityQuery.EntityType">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.DynamicEntityQuery.QueryStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.DynamicEntityQuery.CommandTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.DynamicEntityQuery.FindRowsResultMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.DataSourceMappingInterceptor">
            <summary>
            Provides a means of overriding the default mapping of source table and column properties.
            </summary>
            <remarks>
            To implement custom mapping behavior extend <b>DataSourceMappingInterceptor</b> 
            and override the <see cref="M:IdeaBlade.Persistence.DataSourceMappingInterceptor.UpdateSourceMapping(IdeaBlade.Util.IDataSourceKey,IdeaBlade.Persistence.EntityTable)"/> method.  Place 
            the name of the assembly in the <see cref="P:IdeaBlade.Util.IdeaBladeConfig.ProbeAssemblyNames"/> in
            your <b>IdeaBlade.ibconfig</b>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSourceMappingInterceptor.UpdateSourceMapping(IdeaBlade.Util.IDataSourceKey,IdeaBlade.Persistence.EntityTable)">
            <summary>
            Called by the framework to perform custom data source mapping for an EntityTable.
            </summary>
            <param name="pKey">Data source key</param>
            <param name="pEntityTable">Entity table to be mapped</param>
            <remarks>
            Derived classes can implement this method to modify the <see cref="T:IdeaBlade.Persistence.TableMappingInfo"/>
            for an <see cref="T:IdeaBlade.Persistence.EntityTable"/> at runtime.  See the <b>DevForce Developer's Guide</b>
            for more information on when to use an interceptor.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.DataSourceMappingInterceptor.Instance">
            <summary>
            Returns the singleton instance of the DataSourceMappingInterceptor.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.PersistenceServiceOption">
            <summary>
            The PersistenceServiceOption is used to determine whether to connect to a local or remote persistence service
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceServiceOption.UseDefaultService">
            <summary>
            Use the Ibconfig file [remoting][remotePersistenceEnabled] node.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceServiceOption.UseLocalService">
            <summary>
            Use a local service - Service will run in process with the client
            The Ibconfig file [remoting][remotePersistenceEnabled] node is ignored.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceServiceOption.UseRemoteService">
            <summary>
            Use a remote service as defined in the Ibconfig file [remoting] node. 
            The Ibconfig file [remoting][remotePersistenceEnabled] node is ignored.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.RemotingPersistenceService">
            <summary>
            Internal use only. 
            This class supports the DevForce Framework infrastructure 
            and is not intended to be used directly from your code.
            </summary>
            <remarks>
            A single instance of this class resides on the Business Object Server and receives and responds to 
            requests from the <see cref="T:IdeaBlade.Persistence.PersistenceManager"/>s on each client.
            <para>
            The PersistenceService is configured using the <see cref="T:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo"/>
            defined in <b>IdeaBlade.ibconfig</b> or using an app.config (web.config in IIS) file.
            The <b>RemotingPersistenceService</b> uses .NET Remoting for distributed communications.
            </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.PersistenceService">
            <summary>
            Internal use only. 
            This class supports the DevForce Framework infrastructure 
            and is not intended to be used directly from your code.
            </summary>
            <remarks>
            A single instance of this class resides on the Business Object Server and receives and responds to 
            requests from the <see cref="T:IdeaBlade.Persistence.PersistenceManager"/>s on each client.
            <para>
            The PersistenceService is configured using the <see cref="T:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo"/>
            defined in <b>IdeaBlade.ibconfig</b> or using an app.config (web.config in IIS) file.
            The <b>CommunicationsTechnology</b> setting determines whether communication between clients
            and this service uses .NET remoting or Windows Communication Foundation.
            </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.IPersistenceService">
            <summary>
            Interface for the Persistence Service. 
            </summary>
            <remarks>
            Knowledge of this interface will only be needed in the event
            that the existing PersistenceService needs to be extended.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.IPersistenceService.GetPersistenceServer(System.String)">
            <summary>
            Return the appropriately configured <see cref="T:IdeaBlade.Persistence.IPersistenceServer"/> corresponding
            to this key.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.IPersistenceService.Ping">
            <summary>
            Determines whether the PersistenceService is responding.
            </summary>
            <returns>true if awake; otherwise raises exception</returns>
            <remarks>
            If the Ping fails an exception is thrown.
            </remarks>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceService.DefaultServerName">
            <summary>
            Default name of a PersistenceServer if a data source extension is not supplied.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceService.#ctor">
            <summary>
            Create an instance of this class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceService.Finalize">
            <summary>
            Class finalizer.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceService.GetPersistenceServer(System.String)">
            <summary>
            <see cref="M:IdeaBlade.Persistence.IPersistenceService.GetPersistenceServer(System.String)"/>
            </summary>
            <param name="pDataSourceExtensionName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceService.Ping">
            <summary>
              Tests connection to this service.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceService.InitializeLifetimeService">
            <summary>
            Overridden.  See <see cref="M:System.MarshalByRefObject.InitializeLifetimeService"/>.
            </summary>
            <returns></returns>
            <remarks>
            The service has an infinite lease.
            </remarks>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceService.msLockObject">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceService.LocalInstance">
            <summary>
            For backward compatibility.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceService.PersistenceServiceApplication">
            <summary>
            Returns the PersistenceServiceApplication instance.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceService.Port">
            <value>
            The port used to communicate with this Service. 
            </value>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceService.ServiceName">
            <summary>
            The Service name for this service.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceService.RemoteBaseURL">
            <summary>
            The base URL from IdeaBlade.ibconfig.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceService.RemoteServerURL">
            <summary>
            The complete URL for this service.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceService.RemoteServerPort">
            <summary>
            The RemoteBaseURL with the port included.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceService.RemotePersistenceEnabled">
            <summary>
            Returns whether remote persistence has been enabled.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.RemotingPersistenceService.Reconnect(System.Boolean)">
            <summary>
            Forces a reconnect to the service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.RemotingPersistenceService.CheckForServer">
            <summary>
            Checks if the server hosting the PersistenceService can be contacted.
            </summary>
            <remarks>
            If the server cannot be resolved, then an exception is thrown.
            This can be used with only the http and https protocols.
            <para>
            This check is automatically performed when initializing communications with the remote PersistenceService.
            To disable this check, set <see cref="P:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo.ServerDetectTimeoutMilliseconds"/>
            to a negative number.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.RemotingPersistenceService.GetPersistenceServer(System.String)">
            <summary>
            Return an instance of a PersistenceServer.
            </summary>
            <param name="pDataSourceExtensionName"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.RemotingPersistenceService.LocalInstance">
            <summary>
            Returns the singleton instance for this class.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.RemotingPersistenceService.RemoteInstance">
            <summary>
            Returns a proxy to the singleton instance for this class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.Checkpoint.MarkRefresh(IdeaBlade.Persistence.IRefresh)">
            <summary>
            Add pItem to the rollback refresh list
            </summary>
            <param name="pItem"></param>
        </member>
        <member name="T:IdeaBlade.Persistence.PrimaryKey">
            <summary>
            Represents the primary key for an <see cref="T:IdeaBlade.Persistence.Entity"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PrimaryKey.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the PrimaryKey class.
            </summary>
            <param name="pEntityType">The Entity type</param>
            <param name="pValue">The value of the primary key column</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PrimaryKey.#ctor(System.Type,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the PrimaryKey class.
            </summary>
            <param name="pEntityType">The Entity type</param>
            <param name="pValue">The value of the primary key column</param>
            <param name="pConvertValue">Whether or not to convert the <paramref name="pValue"/> to the 
            correct datatype (if necessary)</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PrimaryKey.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the PrimaryKey class.    
            </summary>
            <param name="pEntityType">The Entity type</param>
            <param name="pValues">The values of the primary key columns</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PrimaryKey.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            Determines whether two primary keys refer to the same entity.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.PrimaryKey.CompareTo(System.Object)">
            <summary>
            See <see cref="M:System.IComparable.CompareTo(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.PrimaryKey.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.PrimaryKey.ToString">
            <summary>
            Returns a human readable representation of this Primary Key.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.PrimaryKey.EntityType">
            <summary>
            The <see cref="T:IdeaBlade.Persistence.Entity"/> type associated with this primary key.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PrimaryKey.Values">
            <summary>
            An array of values associated with individual columns of the key.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.LoginCredential">
            <summary>
            A credential for password-based authentication schemes.
            <seealso cref="T:IdeaBlade.Persistence.PersistenceManager"/> 
            <seealso cref="T:IdeaBlade.Persistence.Server.PersistenceServer"/>
            <seealso cref="T:IdeaBlade.Persistence.SessionBundle"/>
            </summary>
            <remarks>An <b>ILoginCredential</b> is passed to the <see cref="M:IdeaBlade.Persistence.PersistenceManager.Login(IdeaBlade.Persistence.ILoginCredential)"/>
            method to validate a user.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.ILoginCredential">
            <summary>
            Provides a credential interface for password-based authentication schemes.
            <seealso cref="T:IdeaBlade.Persistence.LoginCredential"/>
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.Login(IdeaBlade.Persistence.ILoginCredential)"/>
            </summary>
            <remarks><see cref="T:IdeaBlade.Persistence.LoginCredential"/> is the base implementation of this interface.</remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.ILoginCredential.UserName">
            <summary>
            Gets or sets the user name associated with the credentials.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ILoginCredential.Password">
            <summary>
            Gets or sets the password associated with the credentials.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ILoginCredential.Domain">
            <summary>
            Gets or sets the domain associated with the credentials.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.LoginCredential.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a LoginCredential from user name, password and domain information.
            </summary>
            <param name="pUserName">User name</param>
            <param name="pPassword">Password</param>
            <param name="pDomain">Domain</param>
            <remarks>
            Your implementation of <see cref="T:IdeaBlade.Persistence.IPersistenceLoginManager"/> will determine the
            credential data to be supplied, and whether any field is optional.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.LoginCredential.UserName">
            <summary>
            Gets or sets the user name associated with the credentials.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.LoginCredential.Password">
            <summary>
            Gets or sets the password associated with the credentials.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.LoginCredential.Domain">
            <summary>
            Gets or sets the domain associated with the credentials.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityQueryDataFormatter">
            <summary>
            A formatter that converts <see cref="T:IdeaBlade.Persistence.EntityQuery"/> objects into both human readable text
            as well as a syntax acceptable to the DataTable.<see cref="M:System.Data.DataTable.Select()"/>
            method.
            </summary>
            <remarks>
            Used internally by the framework, but can be called as needed if an EntityQuery needs
            to be formatted for a <see cref="M:System.Data.DataTable.Select()"/> method.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.IEntityQueryExpressionProcessor`1">
            <summary>
            For internal use only
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryDataFormatter.GetWhereExpression(IdeaBlade.Persistence.EntityQuery)">
            <summary>
            Converts an <see cref="T:IdeaBlade.Persistence.EntityQuery"/> into syntax acceptable to the 
            DataTable.<see cref="M:System.Data.DataTable.Select()"/> method
            </summary>
            <param name="pEntityQuery"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryDataFormatter.IdeaBlade#Persistence#IEntityQueryExpressionProcessor{System#String}#ProcessQueryClause(IdeaBlade.Persistence.EntityQueryClause)">
            <summary>
            Converts an <see cref="T:IdeaBlade.Persistence.EntityQueryClause"/> into format usable by the DataTable.<see cref="M:System.Data.DataTable.Select()"/>
            </summary>
            <param name="pClause"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryDataFormatter.IdeaBlade#Persistence#IEntityQueryExpressionProcessor{System#String}#ProcessSubquery(IdeaBlade.Persistence.EntitySubquery)">
            <summary>
            Converts an <see cref="T:IdeaBlade.Persistence.EntitySubquery"/> into a human readable query string.
            </summary>
            <param name="pEntitySubquery"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryDataFormatter.IdeaBlade#Persistence#IEntityQueryExpressionProcessor{System#String}#ProcessBinaryOperator(IdeaBlade.Persistence.EntityBooleanOp,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="pOperator"></param>
            <param name="pClause1"></param>
            <param name="pClause2"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryDataFormatter.IdeaBlade#Persistence#IEntityQueryExpressionProcessor{System#String}#ProcessUnaryOperator(IdeaBlade.Persistence.EntityBooleanOp,System.String)">
            <summary>
            
            </summary>
            <param name="pOperator"></param>
            <param name="pClause1"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityQuery">
            <summary>
            Standard mechanism for performing business object queries.
            <seealso cref="T:IdeaBlade.Persistence.PersistenceManager"/>
            <seealso cref="T:IdeaBlade.Persistence.Entity"/>
            <seealso cref="T:IdeaBlade.Persistence.Rdb.RdbQuery"/>
            <seealso cref="T:IdeaBlade.Persistence.Rdb.PassthruRdbQuery"/>
            <seealso cref="T:IdeaBlade.Persistence.Rdb.StoredProcRdbQuery"/>
            <seealso cref="T:IdeaBlade.Persistence.WS.WsQuery"/>
            </summary>
            <remarks>
            You can use an <b>EntityQuery</b> to build the Object Query Language (OQL) to retrieve your
            business objects.  OQL syntax provides a SQL-agnostic, strongly-typed means of querying
            <see cref="T:IdeaBlade.Persistence.Entity"/> objects from a <see cref="T:IdeaBlade.Persistence.PersistenceManager"/>. 
            <para>An EntityQuery is essentially a
            stack of <see cref="T:IdeaBlade.Persistence.EntityQueryClause"/>'s and <see cref="T:IdeaBlade.Persistence.EntityBooleanOp"/>'s that are processed 
            as in an RPN calculator.  Each clause represents a single simple query phrase such as
            "Age &gt; 40".  Clauses by default are "ANDed" together, but you can use the <see cref="T:IdeaBlade.Persistence.EntityBooleanOp"/>
            to form "OR" and "NOT" compound clauses.  Use <see cref="T:IdeaBlade.Persistence.EntitySubquery"/> instead of a SQL join to
            add query criteria for attributes on related objects.  
            </para>
            <para>Queries are built using the <see cref="M:IdeaBlade.Persistence.EntityQuery.AddClause(IdeaBlade.Persistence.EntityQueryClause)"/>, <see cref="M:IdeaBlade.Persistence.EntityQuery.AddOperator(IdeaBlade.Persistence.EntityBooleanOp)"/> and
            <see cref="M:IdeaBlade.Persistence.EntityQuery.AddSubquery(IdeaBlade.Persistence.EntityRelation)"/> methods.  You may use the <see cref="M:IdeaBlade.Persistence.EntityQuery.AddOrderBy(IdeaBlade.Persistence.EntityColumn)"/> method
            to order the returned results, especially useful when selecting only the <see cref="P:IdeaBlade.Persistence.EntityQuery.Top"/> number of 
            results to be returned.
            </para>
            <para>
            You can use a <see cref="P:IdeaBlade.Persistence.EntityQuery.QueryStrategy"/> to determine
            whether the query results will be retrieved from cache or from a backend datasource.  
            Queries are executed using the
            <see cref="M:IdeaBlade.Persistence.PersistenceManager.GetEntity(IdeaBlade.Persistence.IEntityQuery)"/>
            and <see cref="M:IdeaBlade.Persistence.PersistenceManager.GetEntities(IdeaBlade.Persistence.IEntityQuery)"/>
            methods.
            </para>
            <para><b>Note:</b> For some entity types, including those backed by a non-relational data source, 
            an EntityQuery might return only cached data, and be unusable against the data source.  
            In these situations you will need to use the query appropriate to the 
            entity type (e.g., <see cref="T:IdeaBlade.Persistence.Rdb.StoredProcRdbQuery"/>, <see cref="T:IdeaBlade.Persistence.WS.WsQuery"/>).
            </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.IMakeDynamic">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.IMakeDynamic.MakeSerializable">
            <summary>
            Make the wrapped query serializable in WCF.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.IMakeDynamic.Reset(System.Type)">
            <summary>
            Reset the entity type of the wrapped query.
            </summary>
            <param name="pType"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.#ctor(System.Type)">
            <overloads>Initializes a new instance of the EntityQuery class. </overloads>
             <summary>
             Initializes a new instance of the EntityQuery class for a specified Entity type.
             </summary>
             <param name="pEntityType">The entity type that this query will return</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.#ctor(System.Type,IdeaBlade.Persistence.EntityColumn,IdeaBlade.Persistence.EntityQueryOp,System.Object)">
            <summary>
            Initializes a new instance of the EntityQuery class with a new <see cref="T:IdeaBlade.Persistence.EntityQueryClause"/>.
            </summary>
            <param name="pEntityType">The <see cref="T:IdeaBlade.Persistence.Entity"/> type that this query will return</param>
            <param name="pEntityColumn">The <see cref="T:IdeaBlade.Persistence.EntityColumn"/>to query</param>
            <param name="pOperator">The query comparison operator</param>
            <param name="pValue">The value to be compared against the contents of the specified column</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.#ctor(System.Type,System.String,IdeaBlade.Persistence.EntityQueryOp,System.Object)">
            <summary>   
            Initializes a new instance of the EntityQuery class with a new <see cref="T:IdeaBlade.Persistence.EntityQueryClause"/>.
            </summary>
            <param name="pEntityType">The <see cref="T:IdeaBlade.Persistence.Entity"/> type that this query will return</param>
            <param name="pColumnName">The entity column name to query</param>
            <param name="pOperator">The query comparison operator</param>
            <param name="pValue">The value to be compared against the contents of the specified column</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.#ctor(IdeaBlade.Persistence.EntityQuery)">
            <summary>
            Initializes a new instance of the EntityQuery class from another EntityQuery.
            </summary>
            <param name="pEntityQuery">EntityQuery to be copied</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddOrderBy(IdeaBlade.Persistence.EntityColumn)">
            <summary>
            Adds an <see cref="T:IdeaBlade.Persistence.EntityOrderBy"/> to the query to order returned data by the specified column.
            </summary>
            <param name="pColumn">Entity column to order results by</param>
            <remarks>
            Returned data will be ordered in ascending sequence. 
            <para>
            You may add multiple <see cref="T:IdeaBlade.Persistence.EntityOrderBy"/> statements to a query to order the 
            returned data by multiple columns.  
            </para>
            </remarks>
            <example><code lang="C#">
private void SampleEntityOrderBy() {
  PersistenceManager pm = PersistenceManager.DefaultManager;

  // Retrieve customers ordered by city asc, companyname desc
  RdbQuery query = new RdbQuery(typeof(Customer));
  query.AddOrderBy(Customer.CityEntityColumn, ListSortDirection.Ascending);
  query.AddOrderBy(Customer.CompanyNameEntityColumn, ListSortDirection.Descending);

  EntityList&lt;Customer&gt; customers = pm.GetEntities&lt;Customer&gt;(query);

  // Note that the returned data was sorted, but the EntityList itself is not sorted
  // and the sort order is not maintained as new items are added.
  System.Diagnostics.Debug.WriteLine(customers.IsSorted.ToString());

  foreach (Customer aCust in customers) {
    System.Diagnostics.Debug.WriteLine(aCust.City + " " + aCust.CompanyName);
  }
}
</code></example><example><code lang="VB">
Private Sub SampleEntityOrderBy()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager

   ' Retrieve customers ordered by city asc, companyname desc
   Dim query As New RdbQuery(GetType(Customer))
   query.AddOrderBy(Customer.CityEntityColumn, ListSortDirection.Ascending)
   query.AddOrderBy(Customer.CompanyNameEntityColumn, ListSortDirection.Descending)

   Dim customers As EntityList(Of Customer) = pm.GetEntities(Of Customer)(query)

   ' Note that the returned data was sorted, but the EntityList itself is not sorted
   ' and the sort order is not maintained as new items are added.
   System.Diagnostics.Debug.WriteLine(customers.IsSorted.ToString())

   For Each aCust As Customer In customers
      System.Diagnostics.Debug.WriteLine((aCust.City + " " + aCust.CompanyName))
   Next aCust
End Sub	
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddOrderBy(IdeaBlade.Persistence.EntityColumn,System.ComponentModel.ListSortDirection)">
            <summary>
            Adds an <see cref="T:IdeaBlade.Persistence.EntityOrderBy"/> to the query to order returned data by the specified column and direction.
            </summary>
            <param name="pColumn">Entity column to order results by</param>
            <param name="pSortDirection">Order by direction</param>
            <remarks>
            You may add multiple <see cref="T:IdeaBlade.Persistence.EntityOrderBy"/> statements to a query to order the 
            returned data by multiple columns.  
            </remarks>
            <example><code lang="C#">
private void SampleEntityOrderBy() {
  PersistenceManager pm = PersistenceManager.DefaultManager;

  // Retrieve customers ordered by city asc, companyname desc
  RdbQuery query = new RdbQuery(typeof(Customer));
  query.AddOrderBy(Customer.CityEntityColumn, ListSortDirection.Ascending);
  query.AddOrderBy(Customer.CompanyNameEntityColumn, ListSortDirection.Descending);

  EntityList&lt;Customer&gt; customers = pm.GetEntities&lt;Customer&gt;(query);

  // Note that the returned data was sorted, but the EntityList itself is not sorted
  // and the sort order is not maintained as new items are added.
  System.Diagnostics.Debug.WriteLine(customers.IsSorted.ToString());

  foreach (Customer aCust in customers) {
    System.Diagnostics.Debug.WriteLine(aCust.City + " " + aCust.CompanyName);
  }
}
</code></example><example><code lang="VB">
Private Sub SampleEntityOrderBy()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager

   ' Retrieve customers ordered by city asc, companyname desc
   Dim query As New RdbQuery(GetType(Customer))
   query.AddOrderBy(Customer.CityEntityColumn, ListSortDirection.Ascending)
   query.AddOrderBy(Customer.CompanyNameEntityColumn, ListSortDirection.Descending)

   Dim customers As EntityList(Of Customer) = pm.GetEntities(Of Customer)(query)

   ' Note that the returned data was sorted, but the EntityList itself is not sorted
   ' and the sort order is not maintained as new items are added.
   System.Diagnostics.Debug.WriteLine(customers.IsSorted.ToString())

   For Each aCust As Customer In customers
      System.Diagnostics.Debug.WriteLine((aCust.City + " " + aCust.CompanyName))
   Next aCust
End Sub	
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddOrderBy(IdeaBlade.Persistence.EntityOrderBy)">
            <summary>
            Adds an <see cref="T:IdeaBlade.Persistence.EntityOrderBy"/> to the query.
            </summary>
            <param name="pOrderBy">EntityOrderBy to be added</param>
            <remarks>
            You may add multiple <see cref="T:IdeaBlade.Persistence.EntityOrderBy"/> statements to a query to order the 
            returned data by multiple columns.  
            </remarks>
            <example><code lang="C#">
private void SampleEntityOrderBy() {
  PersistenceManager pm = PersistenceManager.DefaultManager;

  // Retrieve customers ordered by city asc, companyname desc
  RdbQuery query = new RdbQuery(typeof(Customer));
  query.AddOrderBy(Customer.CityEntityColumn, ListSortDirection.Ascending);
  query.AddOrderBy(Customer.CompanyNameEntityColumn, ListSortDirection.Descending);

  EntityList&lt;Customer&gt; customers = pm.GetEntities&lt;Customer&gt;(query);

  // Note that the returned data was sorted, but the EntityList itself is not sorted
  // and the sort order is not maintained as new items are added.
  System.Diagnostics.Debug.WriteLine(customers.IsSorted.ToString());

  foreach (Customer aCust in customers) {
    System.Diagnostics.Debug.WriteLine(aCust.City + " " + aCust.CompanyName);
  }
}
</code></example><example><code lang="VB">
Private Sub SampleEntityOrderBy()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager

   ' Retrieve customers ordered by city asc, companyname desc
   Dim query As New RdbQuery(GetType(Customer))
   query.AddOrderBy(Customer.CityEntityColumn, ListSortDirection.Ascending)
   query.AddOrderBy(Customer.CompanyNameEntityColumn, ListSortDirection.Descending)

   Dim customers As EntityList(Of Customer) = pm.GetEntities(Of Customer)(query)

   ' Note that the returned data was sorted, but the EntityList itself is not sorted
   ' and the sort order is not maintained as new items are added.
   System.Diagnostics.Debug.WriteLine(customers.IsSorted.ToString())

   For Each aCust As Customer In customers
      System.Diagnostics.Debug.WriteLine((aCust.City + " " + aCust.CompanyName))
   Next aCust
End Sub	
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.RemoveOrderBy(IdeaBlade.Persistence.EntityOrderBy)">
            <summary>
            Removes the specified <see cref="T:IdeaBlade.Persistence.EntityOrderBy"/> from the query.
            </summary>
            <param name="pOrderBy">EntityOrderBy to be removed</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.RemoveOrderBy(IdeaBlade.Persistence.EntityColumn)">
            <summary>
            Removes the <see cref="T:IdeaBlade.Persistence.EntityOrderBy"/> for the specified column from the query.
            </summary>
            <param name="pColumn"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddClause(IdeaBlade.Persistence.EntityColumn,IdeaBlade.Persistence.EntityQueryOp,System.Object)">
            <overloads>Adds an <see cref="T:IdeaBlade.Persistence.EntityQueryClause"/> to the query.</overloads>
             <summary>
             Adds a clause to the query.
             </summary>
             <param name="pEntityColumn">The <see cref="T:IdeaBlade.Persistence.EntityColumn"/>to query. 
             This column must be a valid column within the current instance's <see cref="P:IdeaBlade.Persistence.EntityQuery.EntityType"/></param>
             <param name="pOperator">The query comparison operator</param>
             <param name="pValue">The value to be compared against the contents of the specified column</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddClause(IdeaBlade.Persistence.EntityColumn,IdeaBlade.Persistence.EntityQueryOp,System.Object[])">
            <overloads>Adds an <see cref="T:IdeaBlade.Persistence.EntityQueryClause"/> to the query.</overloads>
             <summary>
             Adds a clause to the query.  This overload is intended to simplify the calling syntax
             for the BETWEEN and IN operators.
             </summary>
             <param name="pEntityColumn">The <see cref="T:IdeaBlade.Persistence.EntityColumn"/>to query. 
             This column must be a valid column within the current instance's <see cref="P:IdeaBlade.Persistence.EntityQuery.EntityType"/></param>
             <param name="pOperator">The query comparison operator</param>
             <param name="pValues">The values to be compared against the contents of the specified column</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddClause(System.String,IdeaBlade.Persistence.EntityQueryOp,System.Object)">
            <summary>
            Adds a clause to the query.
            </summary>
            <param name="pColumnName">The entity column name to query</param>
            <param name="pOperator">The query comparison operator</param>
            <param name="pValue">The value to be compared against the contents of the specified column</param>
            <remarks>
            If <see cref="P:IdeaBlade.Persistence.EntityQuery.EnableUdfQueries"/> is set to <c>false</c>, the column name used must be a valid
            column within the <see cref="P:IdeaBlade.Persistence.EntityQuery.EntityType"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddClause(System.String,IdeaBlade.Persistence.EntityQueryOp,System.Object[])">
            <summary>
            Adds a clause to the query.This overload is intended to simplify the calling syntax
            for the BETWEEN and IN operators.
            </summary>
            <param name="pColumnName">The entity column name to query</param>
            <param name="pOperator">The query comparison operator</param>
            <param name="pValues">The values to be compared against the contents of the specified column</param>
            <remarks>
            If <see cref="P:IdeaBlade.Persistence.EntityQuery.EnableUdfQueries"/> is set to <c>false</c>, the column name used must be a valid
            column within the <see cref="P:IdeaBlade.Persistence.EntityQuery.EntityType"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddSubquery(IdeaBlade.Persistence.EntityRelation)">
            <summary>
            Adds an <see cref="T:IdeaBlade.Persistence.EntitySubquery"/> to the query.
            </summary>
            <param name="pEntityRelation">An <see cref="T:IdeaBlade.Persistence.EntityRelation"/> that describes how the result of this subquery
            relates to the current entity</param>
            <returns>The newly added <see cref="T:IdeaBlade.Persistence.EntitySubquery"/> 
            </returns>
            <remarks>Additional clauses and nested subqueries may be added to the returned EntitySubquery.</remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddSubquery(IdeaBlade.Persistence.EntityRelationLink)">
            <summary>
            Adds an <see cref="T:IdeaBlade.Persistence.EntitySubquery"/> to the query.
            </summary>
            <param name="pEntityRelationLink">An <see cref="T:IdeaBlade.Persistence.EntityRelationLink"/> that describes how the result of this subquery
            relates to the current entity</param>
            <returns>The newly added <see cref="T:IdeaBlade.Persistence.EntitySubquery"/> 
            </returns>
            <remarks>Additional clauses and nested subqueries may be added to the returned EntitySubquery.</remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddSubquery(IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryDirection)">
            <summary>
            Adds an <see cref="T:IdeaBlade.Persistence.EntitySubquery"/> to the query.  Obsolete.
            </summary>
            <param name="pEntityRelation"></param>
            <param name="pQueryDirection"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddOperator(IdeaBlade.Persistence.EntityBooleanOp)">
            <summary>
            Adds an operator to the query.
            </summary>
            <param name="pEntityBooleanOp">The operator to push onto the stack</param>
            <remarks>The <b>EntityBooleanOp</b> is used to join multiple <see cref="T:IdeaBlade.Persistence.EntityQueryClause"/>s.  
            By default, clauses are joined using the <see cref="F:IdeaBlade.Persistence.EntityBooleanOp.And"/> operator.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddClause(IdeaBlade.Persistence.EntityQueryClause)">
            <summary>
            Adds a clause to the query.
            </summary>
            <param name="pEntityQueryClause">The clause to add</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.GetSchemaQuery(System.Type)">
            <summary>
            Returns an entity type query that returns no rows only schema.
            </summary>
            <param name="pEntityType">Entity type</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddSubquery(IdeaBlade.Persistence.EntitySubquery)">
            <summary>
            Adds an <see cref="T:IdeaBlade.Persistence.EntitySubquery"/> to this query.
            </summary>
            <param name="pEntitySubquery">The subquery to add</param>
            <returns>The newly added <see cref="T:IdeaBlade.Persistence.EntitySubquery"/> 
            </returns>
            <remarks>Additional clauses and nested subqueries may be added to the returned EntitySubquery.</remarks>    
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.GetSpans">
            <summary>
            Returns the list of <see cref="T:IdeaBlade.Persistence.EntitySpan"/>s in the query.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddSpan(IdeaBlade.Persistence.EntityRelationLink[])">
            <summary>
            Adds an <see cref="T:IdeaBlade.Persistence.EntitySpan"/> to the query for the specified EntityRelationLinks.
            </summary>
            <param name="pEntityRelationLinks">One or more relationship links</param>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntitySpan"/> allows you to create a span query - a query which retrieves objects
            of the <see cref="P:IdeaBlade.Persistence.EntityQuery.EntityType"/>, plus any related objects as defined by the span targets.
            <para>
            If multiple <see cref="T:IdeaBlade.Persistence.EntityRelationLink"/>s are passed, they must form a valid relationship chain
            from which nested subqueries can be built.
            </para>
            </remarks>
            <example><code lang="C#">
private void SampleSpanQuery() {
  // Sample span query using multiple EntitySpans.
  // Retrieve Orders and related customers and order details.
  RdbQuery query = new RdbQuery(typeof(Order));
  query.AddClause(Order.OrderDateEntityColumn, EntityQueryOp.Between, 
      new DateTime[] { new DateTime(1997, 1, 1), new DateTime(1997, 3, 31) });
  query.AddSpan(EntityRelations.Customer_Order);    // Get the Customers for these orders
  query.AddSpan(EntityRelations.Order_OrderDetail); // Get the order details for these orders.
  EntityList&lt;Order&gt; orders = PersistenceManager.DefaultManager.GetEntities&lt;Order&gt;(query);

  // Sample span query using a single EntitySpan with multiple links.
  // Retrieve Customers and related orders, order details for the orders, and products for the order details.
  RdbQuery query2 = new RdbQuery(typeof(Customer));
  query2.AddClause(Customer.CompanyNameEntityColumn, EntityQueryOp.StartsWith, "A");
  query2.AddSpan(EntityRelations.Customer_Order, EntityRelations.Order_OrderDetail, EntityRelations.Product_OrderDetail);
  EntityList&lt;Customer&gt; customer = PersistenceManager.DefaultManager.GetEntities&lt;Customer&gt;(query2);
}
</code></example><example><code lang="VB">
Private Sub SampleSpanQuery()
  ' Sample span query using multiple EntitySpans.
  ' Retrieve Orders and related customers and order details.
  Dim query As New RdbQuery(GetType(Order))
  query.AddClause(Order.OrderDateEntityColumn, EntityQueryOp.Between, _
     New DateTime() {New DateTime(1997, 1, 1), New DateTime(1997, 3, 31)})
  query.AddSpan(EntityRelations.Customer_Order)       ' Get the Customers for these orders
  query.AddSpan(EntityRelations.Order_OrderDetail)    ' Get the order details for these orders.
  Dim orders As EntityList(Of Order) = PersistenceManager.DefaultManager.GetEntities(Of Order)(query)

  ' Sample span query using a single EntitySpan with multiple links.
  ' Retrieve Customers and related orders, order details for the orders, and products for the order details.
  Dim query2 As New RdbQuery(GetType(Customer))
  query2.AddClause(Customer.CompanyNameEntityColumn, EntityQueryOp.StartsWith, "A")
  query2.AddSpan(EntityRelations.Customer_Order, EntityRelations.Order_OrderDetail, EntityRelations.Product_OrderDetail)
  Dim customers As EntityList(Of Customer) = PersistenceManager.DefaultManager.GetEntities(Of Customer)(query2)
End Sub
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddSpan(IdeaBlade.Persistence.EntityRelation[])">
            <summary>
            Adds an <see cref="T:IdeaBlade.Persistence.EntitySpan"/> to the query for the specified EntityRelations.
            </summary>
            <param name="pEntityRelations">One or more relations</param>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntitySpan"/> allows you to create a span query - a query which retrieves objects
            of the <see cref="P:IdeaBlade.Persistence.EntityQuery.EntityType"/>, plus any related objects as defined by the span targets.
            <para>
            If multiple <see cref="T:IdeaBlade.Persistence.EntityRelation"/>s are passed, they must form a valid relationship chain
            from which nested subqueries can be built.
            </para>
            </remarks>
            <example><code lang="C#">
private void SampleSpanQuery() {
  // Sample span query using multiple EntitySpans.
  // Retrieve Orders and related customers and order details.
  RdbQuery query = new RdbQuery(typeof(Order));
  query.AddClause(Order.OrderDateEntityColumn, EntityQueryOp.Between, 
      new DateTime[] { new DateTime(1997, 1, 1), new DateTime(1997, 3, 31) });
  query.AddSpan(EntityRelations.Customer_Order);    // Get the Customers for these orders
  query.AddSpan(EntityRelations.Order_OrderDetail); // Get the order details for these orders.
  EntityList&lt;Order&gt; orders = PersistenceManager.DefaultManager.GetEntities&lt;Order&gt;(query);

  // Sample span query using a single EntitySpan with multiple links.
  // Retrieve Customers and related orders, order details for the orders, and products for the order details.
  RdbQuery query2 = new RdbQuery(typeof(Customer));
  query2.AddClause(Customer.CompanyNameEntityColumn, EntityQueryOp.StartsWith, "A");
  query2.AddSpan(EntityRelations.Customer_Order, EntityRelations.Order_OrderDetail, EntityRelations.Product_OrderDetail);
  EntityList&lt;Customer&gt; customer = PersistenceManager.DefaultManager.GetEntities&lt;Customer&gt;(query2);
}
</code></example><example><code lang="VB">
Private Sub SampleSpanQuery()
  ' Sample span query using multiple EntitySpans.
  ' Retrieve Orders and related customers and order details.
  Dim query As New RdbQuery(GetType(Order))
  query.AddClause(Order.OrderDateEntityColumn, EntityQueryOp.Between, _
     New DateTime() {New DateTime(1997, 1, 1), New DateTime(1997, 3, 31)})
  query.AddSpan(EntityRelations.Customer_Order)       ' Get the Customers for these orders
  query.AddSpan(EntityRelations.Order_OrderDetail)    ' Get the order details for these orders.
  Dim orders As EntityList(Of Order) = PersistenceManager.DefaultManager.GetEntities(Of Order)(query)

  ' Sample span query using a single EntitySpan with multiple links.
  ' Retrieve Customers and related orders, order details for the orders, and products for the order details.
  Dim query2 As New RdbQuery(GetType(Customer))
  query2.AddClause(Customer.CompanyNameEntityColumn, EntityQueryOp.StartsWith, "A")
  query2.AddSpan(EntityRelations.Customer_Order, EntityRelations.Order_OrderDetail, EntityRelations.Product_OrderDetail)
  Dim customers As EntityList(Of Customer) = PersistenceManager.DefaultManager.GetEntities(Of Customer)(query2)
End Sub
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddSpan(IdeaBlade.Persistence.EntitySpan)">
            <summary>
            Adds an <see cref="T:IdeaBlade.Persistence.EntitySpan"/> to the query.
            </summary>
            <param name="pEntitySpan">A span containing one or more relations or links</param>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntitySpan"/> allows you to create a span query - a query which retrieves objects
            of the <see cref="P:IdeaBlade.Persistence.EntityQuery.EntityType"/>, plus any related objects as defined by the span targets.
            </remarks>
            <example><code lang="C#">
private void SampleSpanQuery() {
  // Sample span query using multiple EntitySpans.
  // Retrieve Orders and related customers and order details.
  RdbQuery query = new RdbQuery(typeof(Order));
  query.AddClause(Order.OrderDateEntityColumn, EntityQueryOp.Between, 
      new DateTime[] { new DateTime(1997, 1, 1), new DateTime(1997, 3, 31) });
  query.AddSpan(EntityRelations.Customer_Order);    // Get the Customers for these orders
  query.AddSpan(EntityRelations.Order_OrderDetail); // Get the order details for these orders.
  EntityList&lt;Order&gt; orders = PersistenceManager.DefaultManager.GetEntities&lt;Order&gt;(query);

  // Sample span query using a single EntitySpan with multiple links.
  // Retrieve Customers and related orders, order details for the orders, and products for the order details.
  RdbQuery query2 = new RdbQuery(typeof(Customer));
  query2.AddClause(Customer.CompanyNameEntityColumn, EntityQueryOp.StartsWith, "A");
  query2.AddSpan(EntityRelations.Customer_Order, EntityRelations.Order_OrderDetail, EntityRelations.Product_OrderDetail);
  EntityList&lt;Customer&gt; customer = PersistenceManager.DefaultManager.GetEntities&lt;Customer&gt;(query2);
}
</code></example><example><code lang="VB">
Private Sub SampleSpanQuery()
  ' Sample span query using multiple EntitySpans.
  ' Retrieve Orders and related customers and order details.
  Dim query As New RdbQuery(GetType(Order))
  query.AddClause(Order.OrderDateEntityColumn, EntityQueryOp.Between, _
     New DateTime() {New DateTime(1997, 1, 1), New DateTime(1997, 3, 31)})
  query.AddSpan(EntityRelations.Customer_Order)       ' Get the Customers for these orders
  query.AddSpan(EntityRelations.Order_OrderDetail)    ' Get the order details for these orders.
  Dim orders As EntityList(Of Order) = PersistenceManager.DefaultManager.GetEntities(Of Order)(query)

  ' Sample span query using a single EntitySpan with multiple links.
  ' Retrieve Customers and related orders, order details for the orders, and products for the order details.
  Dim query2 As New RdbQuery(GetType(Customer))
  query2.AddClause(Customer.CompanyNameEntityColumn, EntityQueryOp.StartsWith, "A")
  query2.AddSpan(EntityRelations.Customer_Order, EntityRelations.Order_OrderDetail, EntityRelations.Product_OrderDetail)
  Dim customers As EntityList(Of Customer) = PersistenceManager.DefaultManager.GetEntities(Of Customer)(query2)
End Sub
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.RemoveSpan(IdeaBlade.Persistence.EntityRelationLink[])">
            <summary>
            Removes the <see cref="T:IdeaBlade.Persistence.EntitySpan"/> from the query for the specified links.
            </summary>
            <param name="pEntityRelationLinks">One or more links</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.RemoveSpan(IdeaBlade.Persistence.EntitySpan)">
            <summary>
            Removes the <see cref="T:IdeaBlade.Persistence.EntitySpan"/> from the query.
            </summary>
            <param name="pEntitySpan">Span to remove</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.GetOrderByClauses">
            <summary>
            Returns the list of <see cref="T:IdeaBlade.Persistence.EntityOrderBy"/>s in the query.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.Merge(IdeaBlade.Persistence.EntityQuery)">
            <summary>
            Merge another EntityQuery into the current query. 
            </summary>
            <param name="pQuery">The query to merge into the current instance</param>
            <remarks>
            A query merge is the equivalent of 'ANDing' the two 
            queries together. Both queries must be for the same <see cref="P:IdeaBlade.Persistence.EntityQuery.EntityType"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.Clear">
            <summary>
            Clears all clauses and subqueries from this query. 
            </summary>
            <remarks>
            The <see cref="P:IdeaBlade.Persistence.EntityQuery.EntityType"/> will remain set.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.ClearSpans">
            <summary>
            Clears all <see cref="T:IdeaBlade.Persistence.EntitySpan"/>s from this query.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.ClearOrderBy">
            <summary>
            Clears all <see cref="T:IdeaBlade.Persistence.EntityOrderBy"/> statements from this query.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.UpdateUnderlyingTypes(System.String)">
            <summary>
            Updates this query's underlying column datatypes.
            </summary>
            <param name="pDataSourceExtension"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.Clone">
            <summary>
            Creates a copy of this EntityQuery. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.ResolveMissingOperators">
            <summary>
            Adds <see cref="F:IdeaBlade.Persistence.EntityBooleanOp.And"/> operators as needed to fully resolve the stack.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.GetSubqueryEntityTypes">
            <summary>
            Returns a collection of the entity types used in the subqueries of this query.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.GetSubqueries">
            <summary>
            Returns a list of <see cref="T:IdeaBlade.Persistence.EntitySubquery">EntitySubqueries</see> in this query.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.GetSpanEntityTypes">
            <summary>
            Returns a list of the entity types used in the spans of this query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.ToString">
            <summary>
            Returns a human readable representation of the current query.
            </summary>
            <returns></returns>
            <remarks>This does not return a SQL SELECT statement.</remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.FindRows(IdeaBlade.Persistence.PersistenceManager)">
            <summary>
            This method is not intended to be called directly from your code.
            </summary>
            <remarks>
            This method executes on the client side of the Persistence divide to 
            retrieve cached rows.  
            </remarks>
            <param name="pPersistenceManager"></param>
            <returns>An array of strongly typed DataRows (Entities) from the cache</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the length of the resulting query expression
            exceeeds 8000 characters.</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.InQueryCache(IdeaBlade.Persistence.QueryCache)">
            <summary>
            Determines whether this query is in the specified <see cref="T:IdeaBlade.Persistence.QueryCache"/> within a PersistenceManager.
            </summary>
            <param name="pQueryCache"></param>
            <returns></returns>
            <remarks>
            Used internally by the DevForce framework.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.AddToQueryCache(IdeaBlade.Persistence.QueryCache)">
            <summary>
            Adds this query to the specified <see cref="T:IdeaBlade.Persistence.QueryCache"/>.
            </summary>
            <param name="pQueryCache"></param>
            <remarks>
            Used internally by the DevForce framework.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQuery.Fetch(System.Data.DataSet,IdeaBlade.Util.IDataSourceKey)">
            <summary>
            This method is not intended to be called directly from your code.
            </summary>
            <remarks>
            This method executes on the server side of the Persistence divide to 
            retrieve data from the backend datasource.
            </remarks>
            <param name="pDataSet">The dataset holding fetched data</param>
            <param name="pDataSourceKey">The data source key containing connection information for the datasource.</param>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQuery.mSpans">
            <summary>
            List of EntitySpan objects in the query.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQuery.mOrderByList">
            <summary>
            List of Orderby clauses
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQuery.EnableUdfQueries">
            <summary>
            Gets or sets whether this query will allow the querying of dynamic (user-defined) columns.  Defaults to <c>false</c>.
            This feature is only available in certain editions of DevForce.
            </summary>
            <remarks>
            When set to true, columns defined in the data source but not included as properties in the Entity
            can be used to build <see cref="T:IdeaBlade.Persistence.EntityQueryClause"/>s.  
            <para>
            If UDF fields will be used in a query set this value to <c>true</c> before adding any clauses 
            to the query, and do not use any of the constructor overloads which implicitly build a query clause.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQuery.Top">
            <summary>
            Gets or sets the number of entities to return from the query.
            </summary>
            <remarks>
            If the query includes one or more <see cref="T:IdeaBlade.Persistence.EntityOrderBy"/> statements, the first N entities,
            ordered by the columns specified, are returned.   If the query does not include
            an <see cref="T:IdeaBlade.Persistence.EntityOrderBy"/>, the order of the entities is arbitrary.
            </remarks>
            <example><code lang="C#">
private void SampleEntityQueryTop() {
  PersistenceManager pm = PersistenceManager.DefaultManager;

  // Retrieve the top 10 orders having the highest freight charge.
  RdbQuery query = new RdbQuery(typeof(Order));
  query.AddOrderBy(Order.FreightEntityColumn, ListSortDirection.Descending);
  query.Top = 10;
      
  IList&lt;Order&gt; orders = pm.GetEntities&lt;Order&gt;(query);
  foreach (Order anOrder in orders) {
    System.Diagnostics.Debug.WriteLine(anOrder.Id.ToString() + "=" + anOrder.Freight.Value.ToString());
  }
}
</code></example><example><code lang="VB">
Private Sub SampleEntityQueryTop()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager

   ' Retrieve the top 10 orders having the highest freight charge.
   Dim query As New RdbQuery(GetType(Order))
   query.AddOrderBy(Order.FreightEntityColumn, ListSortDirection.Descending)
   query.Top = 10

   Dim orders As IList(Of Order) = pm.GetEntities(Of Order)(query)
   For Each anOrder As Order In orders
      System.Diagnostics.Debug.WriteLine((anOrder.Id.ToString() + "=" + anOrder.Freight.Value.ToString()))
   Next anOrder
End Sub

	</code></example>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQuery.IsSchemaQuery">
            <summary>
            Returns whether the current query is a schema query.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQuery.HasNoRestrictions">
            <summary>
            Returns whether this query has no restrictions.
            </summary>
            <remarks>
            A query has restrictions if it uses the <see cref="P:IdeaBlade.Persistence.EntityQuery.Top"/> property or
            contains any expressions.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQuery.HasSpans">
            <summary>
            Does this query have any spans
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQuery.QueryExpressions">
            <summary>
            This method is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQuery.ContainsSubquery">
            <summary>
            Returns whether this query contains any subqueries.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQuery.ContainsSpans">
            <summary>
            Returns whether this query contains any EntitySpans.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQuery.IsQueryCacheable">
            <summary>
            Gets or sets a value indicating whether the query should be cached by the <see cref="T:IdeaBlade.Persistence.PersistenceManager"/>.
            </summary>
            <value>
            	<c>true</c> if this query should be cached; otherwise <c>false</c>.  Defaults to <c>true</c>.
            </value>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQuery.EntityType">
            <summary>
            Gets the <see cref="T:IdeaBlade.Persistence.Entity"/> type returned by this query.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQuery.QueryStrategy">
            <summary>
            Gets or sets the fetch and merge strategies of the query.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQuery.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.
            </summary>
            <remarks>
            A value of 0 indicates that the default timeout value for the data provider should be used - this is usually 30 seconds.
            <para>
            Note that the <b>CommandTimeout</b> is different from the <see cref="P:IdeaBlade.Persistence.TransactionSettings.Timeout"/>,
            which is the maximum amount of time that the entire transaction can take.  A single transaction may involve multiple commands.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQuery.FindRowsResultMode">
            <summary>
            Returns information regarding the behaviour of the <see cref="M:IdeaBlade.Persistence.EntityQuery.FindRows(IdeaBlade.Persistence.PersistenceManager)"/> method call.
            </summary>
            <value>The FindRows result mode.</value>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQuery.InternalQueryStrategy">
            <summary>
            This is internally used to pass the specified QueryStrategy.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.DataSourceAccessType">
            <summary>
            The access level defined by the data source for an <see cref="T:IdeaBlade.Persistence.EntityColumn"/>.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.DataSourceAccessType.ReadWrite">
            <summary>
            Read and write access allowed
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.DataSourceAccessType.ReadOnly">
            <summary>
            Read only access
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.DataSourceAccessType.None">
            <summary>
            No access allowed
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.DynamicEntityTypeCreatedEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.Persistence.DynamicEntityTypeBuilder.DynamicEntityTypeCreated"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityTypeCreatedEventArgs.#ctor(System.Type)">
            <summary>
            Initialize a new instance of this class.
            </summary>
            <param name="pEntityType"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.DynamicEntityTypeCreatedEventArgs.EntityType">
            <summary>
            The EntityType involved in this event.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntitySerializationHelper">
            <summary>
            Internal helper class used with Entity Xml serialization tasks.
            </summary>
            <remarks>
            Used by the PersistenceWebService when returning entities and datasets from web methods.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySerializationHelper.GetSchema(System.Xml.Schema.XmlSchemaSet,System.Type)">
            <summary>
            Referenced (indirectly) by the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to return the schema for a Type.
            </summary>
            <param name="pSchemaSet">XmlSchemaSet to be populated</param>
            <param name="pType">Type to generate schema for</param>
            <returns>XmlQualifiedName for the Type</returns>
            <remarks>
            The schema for all exposed types in the Type.Assembly is generated and returned.  This ensures
            that all referenced Types in the object graph are part of the XSD.
            The XmlQualifiedName for the Type is the Type name combined with our 
            target namespace.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySerializationHelper.SchemaSetValidationEventHandler(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Dummy error handler - needs to be in place for GetSchema, but doesn't need to do anything.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySerializationHelper.GetSchemaForType(System.Xml.Schema.XmlSchema,System.Type)">
            <summary>
            Build a ComplexType for an Entity Type.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySerializationHelper.GetRelatedType(System.Reflection.PropertyInfo)">
            <summary>
            Return the Type of a relational property.
            </summary>
            <param name="pi"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySerializationHelper.GetRelatedTypeName(System.Reflection.PropertyInfo)">
            <summary>
            Return the XmlQualifiedName for a relational property.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySerializationHelper.GetSimpleTypeName(System.Type)">
            <summary>
            Return the XmlQualifiedName for a simple type.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySerializationHelper.GetSchema(IdeaBlade.Persistence.Entity)">
            <summary>
            Not used.  
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySerializationHelper.ReadXml(System.Xml.XmlReader,IdeaBlade.Persistence.Entity)">
            <summary>
            Not currently used.  Will be used to deserialize an Entity.
            </summary>
            <param name="reader"></param>
            <param name="pEntity"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySerializationHelper.WriteXml(System.Xml.XmlWriter,IdeaBlade.Persistence.Entity)">
            <summary>
            Serialize an Entity in XML format.
            </summary>
            <param name="pWriter"></param>
            <param name="pEntity"></param>
            <remarks>
            Any public property marked with the <see cref="T:IdeaBlade.Util.WebServiceVisibleAttribute"/>
            is included in the serialized schema.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySerializationHelper.WriteRelationEntity(System.Xml.XmlWriter,IdeaBlade.Persistence.Entity,System.Reflection.PropertyInfo)">
            <summary>
            Output XML for a relational property.
            </summary>
            <param name="pWriter"></param>
            <param name="pEntity"></param>
            <param name="pi"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySerializationHelper.IncludeProperty(System.Reflection.PropertyInfo)">
            <summary>
            Include all properties for an Entity that aren't defined on the DataRow, and are
            marked with the WebServiceVisibleAttribute.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySerializationHelper.BuildDataSetForSerialization``1(System.Collections.Generic.IList{``0})">
            <summary>
            Internal use only.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pList"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySerializationHelper.PublishRelationList(IdeaBlade.Persistence.PersistenceManager)">
            <summary>
            Access the list of EntityRelationLinks used in web publishing.  Internal use only.
            </summary>
            <param name="pm"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityQueryProcessingManager">
            <summary>
            For internal use only - a stack processor for the entity query
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryProcessingManager.ProcessQuery``1(IdeaBlade.Persistence.EntityQuery,IdeaBlade.Persistence.IEntityQueryExpressionProcessor{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pEntityQuery"></param>
            <param name="pProcessor"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityValidationInfo">
            <summary>
            Encapsulates information about the results of a call to <see cref="M:IdeaBlade.Persistence.Entity.Validate">Entity.Validate</see>.
            This class will likely be extended in future releases of IdeaBlade.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityValidationInfo.Valid">
            <summary>
            A constant representing a simple successful validation
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityValidationInfo.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the EntityValidationInfo class
            </summary>
            <param name="pIsValid">Whether the validation was ok or not</param>
            <param name="pMessage">An associated message</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityValidationInfo.#ctor(IdeaBlade.Persistence.Entity,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the EntityValidationInfo class
            </summary>
            <param name="pEntity"></param>
            <param name="pIsValid"></param>
            <param name="pMessage"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityValidationInfo.Entity">
            <summary>
            The Entity to which this object applies
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityValidationInfo.IsValid">
            <summary>
            Whether this is a successfull validation result
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityValidationInfo.Message">
            <summary>
            The message associated with this validation result
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.IPersistenceServer">
            <summary>
            Interface for a Persistence Server. 
            </summary>
            <remarks>
            Knowledge of this interface will only be needed in the event
            that the existing PersistenceServer needs to be extended.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.IPersistenceServer.Login(IdeaBlade.Persistence.ILoginCredential)">
            <summary>
            Used to validate client credentials and identify the session.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.IPersistenceServer.Logout(IdeaBlade.Persistence.SessionBundle)">
            <summary>
            Used to log off a given client session.
            </summary>
            <param name="pSessionBundle"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.IPersistenceServer.CheckDataSourceKey(System.String)">
            <summary>
            Returns the status of a given <see cref="T:IdeaBlade.Util.IDataSourceKey"/>.
            </summary>
            <param name="pDataSourceKeyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.IPersistenceServer.Fetch(IdeaBlade.Persistence.SessionBundle,IdeaBlade.Persistence.IEntityQuery)">
            <summary>
            Returns a (usually single table) dataset that contains the result of the EntityQuery.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.IPersistenceServer.SaveChanges(IdeaBlade.Persistence.SessionBundle,IdeaBlade.Persistence.EntityDataSetSurrogate,IdeaBlade.Persistence.SaveOptions)">
            <summary>
            Saves any changes to a DataSet back to the data source, with the save options specified.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.IPersistenceServer.GetRealIdMap(System.Collections.Generic.IDictionary{IdeaBlade.Util.IDataSourceKey,IdeaBlade.Persistence.UniqueIdCollection})">
            <summary>
            Returns a mapping of temporary to real IDs, called before data is 
            saved to the data source.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.IPersistenceServer.InvokeServerMethod(IdeaBlade.Persistence.SessionBundle,System.Type,System.String,System.String,System.Object[])">
            <summary>
            Invokes a static method for execution on the server.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.IPersistenceServerInternal">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Used to allow the WCF PersistenceServer access to internal methods within the PersistenceServer.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.IPersistenceServerInternal.GetPersistenceManager(IdeaBlade.Persistence.SessionBundle)">
            <summary>
            Retrieve a server-side PersistenceManager.
            </summary>
            <param name="pSessionBundle"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.IPersistenceServerInternal.GetPrincipal(IdeaBlade.Persistence.SessionBundle)">
            <summary>
            Retrieve the IPrincipal for a SessionBundle.
            </summary>
            <param name="pSessionBundle"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityFetchingEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.Persistence.PersistenceManager.Fetching"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityFetchingEventArgs.#ctor(IdeaBlade.Persistence.IEntityQuery)">
            <summary>
            Initialize a new instance of this class.
            </summary>
            <param name="pEntityQuery"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityFetchingEventArgs.Query">
            <summary>
            The IEntityQuery involved in this event.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityFetchedEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.Persistence.PersistenceManager.Fetched"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityFetchedEventArgs.#ctor(IdeaBlade.Persistence.IEntityQuery,System.Collections.Generic.IList{IdeaBlade.Persistence.Entity})">
            <summary>
            Initialize a new instance of this class.
            </summary>
            <param name="pEntityQuery"></param>
            <param name="pEntities"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityFetchedEventArgs.Query">
            <summary>
            The IEntityQuery involved in this event.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityFetchedEventArgs.Entities">
            <summary>
            The list of entities fetched.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityBooleanOp">
            <summary>
            Enumeration of valid logical query operators used to join <see cref="T:IdeaBlade.Persistence.EntityQueryClause"/>s.
            <seealso cref="M:IdeaBlade.Persistence.EntityQuery.AddOperator(IdeaBlade.Persistence.EntityBooleanOp)"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.IEntityQueryExpression">
            <summary>
            Marker interface for all parts of an EntityQuery (EntityQueryClause, EntityBooleanOp, EntitySubquery).
            Internal use only.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityBooleanOp.And">
            <summary>
            The Boolean 'and' operator.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityBooleanOp.Or">
            <summary>
            The Boolean 'or' operator.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityBooleanOp.Not">
            <summary>
            The Boolean 'not' operator.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityBooleanOp.#ctor(System.String)">
            <summary>
            Protected constructor.
            </summary>
            <param name="pValue"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityBooleanOp.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
            <param name="pValue"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityBooleanOp.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityBooleanOp.op_Equality(IdeaBlade.Persistence.EntityBooleanOp,IdeaBlade.Persistence.EntityBooleanOp)">
            <summary>
            Operator == overload.
            </summary>
            <param name="pOp1"></param>
            <param name="pOp2"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityBooleanOp.op_Inequality(IdeaBlade.Persistence.EntityBooleanOp,IdeaBlade.Persistence.EntityBooleanOp)">
            <summary>
            Operator != overload.
            </summary>
            <param name="pOp1"></param>
            <param name="pOp2"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityBooleanOp.Value">
            <summary>
            The string representation of this boolean operator.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.DataSourceKeyNameAttribute">
            <summary>
              Defines an attribute that associates an Entity subclass with a DataSourceKeyName.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSourceKeyNameAttribute.#ctor(System.String)">
            <summary>
              Initializes a new instance of the class.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.DataSourceKeyNameAttribute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.IdeaBladeDbException">
            <summary>
            Use to replace any non-serializeable exception for remoting
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.IdeaBladeDbException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with an inner exception.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
            <param name="pDbException">An instance of Exception that describes the error that caused this exception</param>
        </member>
        <member name="M:IdeaBlade.Persistence.IdeaBladeDbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.IdeaBladeDbException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.IdeaBladeDbException.CanSerialize(System.Exception)">
            <summary>
            
            </summary>
            <param name="pDbException"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.IdeaBladeDbException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.IdeaBladeDbException.StackTrace">
            <summary>
            Gets the stack trace for the exception.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.ClientNotifyDelegate">
            <summary>
            Defines the signature for a client method which is called to process data "pushed" from the server.
            <seealso cref="T:IdeaBlade.Persistence.ServerNotifyDelegate"/>
            </summary>
            <param name="pUserToken">Token identifying the client request</param>
            <param name="pArgs">User-defined arguments passed from the <see cref="T:IdeaBlade.Persistence.ServerNotifyDelegate"/> method</param>
        </member>
        <member name="T:IdeaBlade.Persistence.UniqueId">
            <summary>
            Represents the combination of a specific <see cref="T:IdeaBlade.Persistence.EntityColumn"/> and value.
            <seealso cref="T:IdeaBlade.Persistence.IIdGenerator"/>
            <seealso cref="T:IdeaBlade.Persistence.UniqueIdCollection"/>
            </summary>
            <remarks><b>UniqueIds</b> are used when implementing the <see cref="T:IdeaBlade.Persistence.IIdGenerator"/> interface.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.UniqueId.#ctor(IdeaBlade.Persistence.EntityColumn,System.Object)">
            <summary>
            Creates a new instance of UniqueId.
            </summary>
            <param name="pColumn"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.UniqueId.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.UniqueId.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.UniqueId.ToString">
            <summary>
            Returns a human readable representation of this UniqueId.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.UniqueId.CompareTo(System.Object)">
            <summary>
            <see cref="M:System.IComparable.CompareTo(System.Object)"/> implementation.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.UniqueId.Column">
            <summary>
            Returns the EntityColumn associated with this UniqueId.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.UniqueId.Value">
            <summary>
            Returns the Value associated with this UniqueId.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.PrimaryKeyList">
            <summary>
            A strongly-typed collection of <see cref="T:IdeaBlade.Persistence.PrimaryKey"/>s.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PrimaryKeyList.#ctor(System.Type)">
            <summary>
            Create an instance of this class for an <see cref="T:IdeaBlade.Persistence.Entity"/> type.
            </summary>
            <param name="pEntityType"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.PrimaryKeyList.#ctor(IdeaBlade.Persistence.PrimaryKey[])">
            <summary>
            Create an instance of this class from an array of <see cref="T:IdeaBlade.Persistence.PrimaryKey"/>s.
            </summary>
            <param name="pPrimaryKeys"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.PrimaryKeyList.FromEntities``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Build a PrimaryKeyList out of a list of entities.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="pEntities"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.PrimaryKeyList.FromEntities(System.Collections.IEnumerable)">
            <summary>
            Called internally only - do not expose since it does not 
            provide type checking
            </summary>
            <param name="pEntities"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.PrimaryKeyList.FromEntity(IdeaBlade.Persistence.Entity)">
            <summary>
            /// Build a PrimaryKeyList from a single entity.
            </summary>
            <param name="pEntity"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.PrimaryKeyList.ToArray">
            <summary>
            Returns the collection as an array of <see cref="T:IdeaBlade.Persistence.PrimaryKey"/>s.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.PrimaryKeyList.InsertItem(System.Int32,IdeaBlade.Persistence.PrimaryKey)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="pIndex"></param>
            <param name="pPrimaryKey"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.PrimaryKeyList.EntityType">
            <summary>
            The <see cref="T:IdeaBlade.Persistence.Entity"/> type associated with this primary key.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.PersistenceSecurityException">
            <summary>
            Exception that should be thrown by implementations of <see cref="M:IdeaBlade.Persistence.Entity.QuerySecurityCheck(System.Security.Principal.IPrincipal,IdeaBlade.Persistence.IEntityQuery)"/>
            and <see cref="M:IdeaBlade.Persistence.Entity.SaveSecurityCheck(System.Security.Principal.IPrincipal)"/> for security failures.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.PersistenceServerException">
            <summary>
            Exception thrown for persistence failures.
            </summary>
            <remarks>
            A <b>PersistenceServerException</b>, or one of its sub-types, can be thrown for a number of error conditions
            detected while the <see cref="T:IdeaBlade.Persistence.PersistenceManager"/> communicates with the <see cref="T:IdeaBlade.Persistence.Server.PersistenceServer"/>.
            It can be raised during <see cref="M:IdeaBlade.Persistence.PersistenceManager.Connect"/> and <see cref="M:IdeaBlade.Persistence.PersistenceManager.Login(IdeaBlade.Persistence.ILoginCredential)"/> processing, 
            while fetching data through any of the <b>GetEntity</b> or <b>GetEntities</b> methods, or saving data via <b>SaveChanges</b>.
            <para>
            The <b>PersistenceServerException</b> is first raised via the <see cref="E:PersistenceManager.PersistenceServerError"/> event.
            If a handler is in place for this event you can choose to handle the error and set the <see cref="P:IdeaBlade.Persistence.PersistenceServerErrorEventArgs.Handled"/>
            property value to true.  If a handler is not found or the <b>Handled</b> property is not set, the <b>PersistenceServerException</b>
            is thrown back to the calling code.
            </para>
            <para>
            The <see cref="P:IdeaBlade.Persistence.PersistenceServerException.FailureType"/> of the exception indicates the general type of failure condition.  The <see cref="P:IdeaBlade.Persistence.PersistenceServerException.OperationType"/>
            indicates the type of persistence operation requested when the error occurred.  The <see cref="P:System.Exception.InnerException"/> will have
            additional information on the error.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceServerException.#ctor">
            <summary>
            Initializes a new instance of the PersistenceServerException class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceServerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PersistenceServerException class.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceServerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the PersistenceServerException class.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
            <param name="pInnerException">An instance of Exception that describes the error that caused this exception</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the PersistenceServerException class.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerException.FailureType">
            <summary>
            The type of persistence failure.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerException.OperationType">
            <summary>
            The type of persistence operation requested when the error occurred.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerException.IsConnectionProblem">
            <summary>
            Determines if the exception occurred while accessing the network.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerException.IsDataProblem">
            <summary>
            Determines if the exception occurred while accessing the data store.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerException.IsDataConcurrencyProblem">
            <summary>
            Determines if a concurrency exception occurred while accessing the data store.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerException.IsLicenseException">
            <summary>
            Determines if the exception is a license exception.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceSecurityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PersistenceSecurityException class.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceSecurityException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the PersistenceSecurityException class.
            </summary>
            <param name="pMessage">A message added to describe the exception containing 0 or more format specifications. 
            See <see cref="M:System.String.Format(System.String,System.Object)"/></param>
            <param name="pMessageArgs">An Object array containing zero or more objects to be formatted.</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceSecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityQueryOpType">
            <summary>
            Used to indicate the number of arguments to a SQL query expression.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOpType.Zero">
            <summary>Query operator takes 0 arguments (e.g. IsNull)</summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOpType.One">
            <summary>Query operator takes one argument (e.g. StartsWith)</summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOpType.Two">
            <summary>Query operator takes 2 arguments (e.g. Between)</summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOpType.OneOrMore">
            <summary>Query operator takes 1 or more arguments (e.g. In)</summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityQueryOp">
            <summary>
            Enumerated class of valid query comparison operators used in the
            construction of <see cref="T:IdeaBlade.Persistence.EntityQueryClause"/>s.
            <seealso cref="T:IdeaBlade.Persistence.EntityQueryClause"/>
            <seealso cref="T:IdeaBlade.Persistence.EntityQuery"/>
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.EQ">
            <summary>
            Equals comparison operator.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.NE">
            <summary>
            'Not Equals' query operator.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.GT">
            <summary>
            'Greater than' query operator.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.GE">
            <summary>
            'Greater than or equal to' query operator.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.LT">
            <summary>
            'Less than' query operator.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.LE">
            <summary>
            'Less than or equal to' query operator.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.Between">
            <summary>
            'Between' query operator, takes two arguments.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.StartsWith">
            <summary>
            'Starts with' query operator.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.EndsWith">
            <summary>
            'Ends with' query operator.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.Contains">
            <summary>
            'Contains' query operator.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.Like">
            <summary>
            'Like' query operator.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.In">
            <summary>
            'In' query operator.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.IsNull">
            <summary>
            'IsNull' query operator.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.IsNotNull">
            <summary>
            'IsNotNull' query operator.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.ValidStringOps">
            <summary>
            Valid query operators for use with strings.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.ValidNonStringOps">
            <summary>
            Valid query operators for use with data typs other than strings (dates, numbers).
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.ValidNumericOps">
            <summary>
            Valid query operators for use with numeric types.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.ValidDateTimeOps">
            <summary>
            Valid query operators for use with dates.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.ValidBooleanOps">
            <summary>
            Valid query operators for use with booleans.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.StringOnlyOps">
            <summary>
            Query operators that can only be used with strings.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.ValidListOps">
            <summary>
            Valid query operators for use with lists.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.ValidTextOps">
            <summary>
            Valid query operators for use with text, ntext, image data types.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.ValidVariantOps">
            <summary>
            Valid query operators for use with SQLVariant, misc object types.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityQueryOp.ValidGuidOps">
            <summary>
            Valid query operators for Guids.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryOp.SortOps(IdeaBlade.Persistence.EntityQueryOp[])">
            <summary>
            Sorts query operators by descriptive name.
            </summary>
            <param name="pEntityQueryOps">Array of query operators to sort</param>
            <returns>List of sorted query operators</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryOp.GetValidOps(System.Type)">
            <summary>
            Returns the valid query operators for any given data type.
            </summary>
            <param name="pType">Datatype to return valid operators for</param>
            <returns>List of valid query operators</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryOp.op_Equality(IdeaBlade.Persistence.EntityQueryOp,IdeaBlade.Persistence.EntityQueryOp)">
            <summary>
            Operator == overload.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryOp.op_Inequality(IdeaBlade.Persistence.EntityQueryOp,IdeaBlade.Persistence.EntityQueryOp)">
            <summary>
            Operator != overload.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryOp.Equals(System.Object,System.Object)">
            <summary>
            Static Equals operator.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
            <remarks>
            Note: Non-EntityQueryOp objects passed in will be evaluated as nulls.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryOp.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="pCandidate"></param>
            <returns>true if obj is an Enum with the same underlying type and value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryOp.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryOp.ToString">
            <summary>
            A human readable string representing this instance.
            </summary>
            <returns>A human readable string representing this instance </returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryOp.CompareTo(System.Object)">
            <summary>
            <see cref="T:System.IComparable"/> implementation.  
            </summary>
            <param name="pCandidate"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryOp.#ctor(System.String,System.String,IdeaBlade.Persistence.EntityQueryOpType)">
            <summary>
            Protected constructor.
            </summary>
            <param name="pDisplayName"></param>
            <param name="pOperator"></param>
            <param name="pEntityQueryOpType"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQueryOp.DisplayName">
            <summary>
            The display name of this instance.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQueryOp.Value">
            <summary>
            A string representing the SQL syntax of the operator associated with this instance.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQueryOp.OpType">
            <summary>
            The <see cref="T:IdeaBlade.Persistence.EntityQueryOpType"/> of this instance.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.IEntityEnum">
            <summary>
            Marker interface for "enum class" type Entities.  Internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityListManager`1">
            <summary>
            Manages an <see cref="T:IdeaBlade.Persistence.EntityList`1"/> to ensure the list stays current with specified filtering criteria.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <remarks>
            An <b>EntityListManager</b> turns an <see cref="T:IdeaBlade.Persistence.EntityList`1"/> or <see cref="T:IdeaBlade.Persistence.ReadOnlyEntityList`1"/>
            into a "live" or managed list.  By specifying a <see cref="P:IdeaBlade.Persistence.EntityListManager`1.Filter"/> and <see cref="P:IdeaBlade.Persistence.EntityListManager`1.FilterColumns"/>
            the EntityListManager will ensure that any changes, additions or deletions to entities meeting the filtering
            criteria are automatically reflected in the list.  
            <para>
            Use <see cref="M:IdeaBlade.Persistence.EntityListManager`1.ManageList(System.Collections.IList)"/> and <see cref="M:IdeaBlade.Persistence.EntityListManager`1.UnmanageList(System.Collections.IList)"/> to add or remove lists under management.  All lists managed
            by an EntityListManager must contain the same Entity type.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityListManager`1.#ctor(IdeaBlade.Persistence.PersistenceManager,System.Predicate{`0},IdeaBlade.Persistence.EntityColumn[],System.Collections.IList,System.Boolean)">
            <summary>
            Initialize a new instance of the EntityListManager.
            </summary>
            <param name="pPersistenceManager">PersistenceManager holding the Entities</param>
            <param name="pFilter">A predicate returning true if the tested entity belongs in the list</param>
            <param name="pFilterColumns">
            The watched columns. If supplied, changes to values in the watched columns trigger filtering. 
            If null, any changes to Entities of this type will trigger filtering.
            </param>
            <param name="pList">The list to be managed</param>
            <param name="pRefresh">If true, immediately refresh the list for the filtering criteria</param>
            <remarks>
            The <see cref="P:IdeaBlade.Persistence.EntityListManager`1.Filter"/> uses a .NET <b>Predicate&lt;T&gt;</b>, a delegate that defines a set of 
            criteria and determines whether the specified object passed to it meets those criteria. 
            The Filter receives every addition, deletion or modification (based on the <see cref="P:IdeaBlade.Persistence.EntityListManager`1.FilterColumns"/> specified)
            of entities of the type watched, and determines whether the entity belongs
            in the list.  If the Filter returns true the entity is added to or kept in the list; if the Filter returns false
            the entity is removed from the list.  (Note that entities removed from the managed list are not removed from
            the PersistenceManager, nor are they deleted.)
            <para>
            Performance will be needlessly poor if the EntityListManager tests an entity every time any of its columns change.
            To avoid this, specify in the constructor or the <see cref="P:IdeaBlade.Persistence.EntityListManager`1.FilterColumns"/> property
            which entity columns are relevant to the filtering.
            </para>
            <para>
            You can choose to have the EntityListManager refresh the list immediately after assuming
            management of the list.  This is unnecessary if the supplied list is known to be complete at the time
            the manager is initialized.
            </para>
            </remarks>
            <example>
    <p>This example simulates the OrderDetails property of an Order entity.</p>
    <p>
      There are four basic steps (1) retrieve the list using an RdbQuery, (2) define a filter,
      (3) add a manager to the list, and
      (4) wrap the list as a ReadOnlyEntityList so that only its manager can add and remove items.
    </p>
    <P>Step3 #2 and #3 are the crux of the example.</P>
    <code lang="C#">
  Private ReadOnlyEntityList&lt;OrderDetail&gt; mOrderDetails = null
  
  ''' &lt;summary&gt;
  ''' Gets the order details managed list populates it if not yet defined.
  ''' &lt;/summary&gt;
  Private ReadOnlyEntityList&lt;OrderDetail&gt; GetOrderDetails() {
    if (mOrderDetails != null) return mOrderDetails

    ' Step #1: Query for OrderDetails with order id that matches this order's id
    RdbQuery query =
      New RdbQuery(typeof(OrderDetail),
        OrderDetail.OrderIdEntityColumn,
        EntityQueryOp.EQ, this.Id)

    ' Get details in an EntityList
    EntityList&lt;OrderDetail&gt; list =
      this.PersistenceManager.GetEntities&lt;OrderDetail&gt;(query)
      
    ' Step #2: Filter as Predicate delegate returns true if the detail object belongs to this order
    Predicate&lt;OrderDetail&gt; predicate =
      delegate(OrderDetail pDetail) {
        return pDetail.OrderId == this.Id
      }

    ' Step #3: Add a ListManager to the EntityList from the query
    ' Note how manager will only engage predicate if the OrderId changes
    ' as is appropriate for that filter. Other changes to OrderDetails will be ignored
    list.ListManager = New EntityListManager&lt;OrderDetail&gt;(
      this.PersistenceManager,
      list,
      predicate,
      New EntityColumn[] { OrderDetail.OrderIdEntityColumn }, 
      false)
      
    ' Step #4: Wrap the list in a ReadOnlyEntityList and return it
    mOrderDetails = New ReadOnlyEntityList&lt;OrderDetail&gt;(list)
    return mOrderDetails
  }   
   </code>
   <code lang="VB">      
  Private mOrderDetails As ReadOnlyEntityList(Of OrderDetail) = Nothing

  ''' &lt;summary&gt;
  ''' Gets the order details managed list populates it if not yet defined.
  ''' &lt;/summary&gt;
  Private Function GetOrderDetails() As ReadOnlyEntityList(Of OrderDetail)
    If Not mOrderDetails Is Nothing Then
      Return mOrderDetails
    End If

    ' Step #1: Query for OrderDetails with order id that matches this order's id
    Dim query As RdbQuery = _
      New RdbQuery(GetType(OrderDetail), _
      OrderDetail.OrderIdEntityColumn, _
      EntityQueryOp.EQ, Me.Id)

    ' Get details in an EntityList
    Dim list As EntityList(Of OrderDetail) = _
      Me.PersistenceManager.GetEntities(Of OrderDetail)(query)

    ' Step #2: Filter
    Dim myPredicate As Predicate(Of OrderDetail) = _
      New Predicate(Of OrderDetail)(AddressOf OrderDetailFilter)

    ' Step #3: Add a ListManager to the EntityList from the query
    ' Note how manager will only engage predicate if the OrderId changes
    ' as is appropriate for that filter. Other changes to OrderDetails will be ignored
    list.ListManager = New EntityListManager(Of OrderDetail)( _
      Me.PersistenceManager, _
      list, _
      myPredicate, _
      New EntityColumn() {OrderDetail.OrderIdEntityColumn}, _
      False)

    ' Step #4: Wrap the list in a ReadOnlyEntityList and return it
    mOrderDetails = New ReadOnlyEntityList(Of OrderDetail)(list)
    Return mOrderDetails
  End Function

  ' Predicate delegate returns true if the detail object belongs to this order
  Private Function OrderDetailFilter(ByVal pDetail As OrderDetail) As Boolean
    If pDetail.OrderId = Me.Id Then
      Return True
    Else
      Return False
    End If
  End Function
    </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityListManager`1.#ctor(IdeaBlade.Persistence.PersistenceManager,System.Predicate{`0},IdeaBlade.Persistence.EntityColumn[])">
            <summary>
            Initialize a new instance of the EntityListManager.
            </summary>
            <param name="pPersistenceManager">PersistenceManager holding the Entities</param>
            <param name="pFilter">A predicate returning true if the tested entity belongs in the list</param>
            <param name="pFilterColumns">
            The watched columns. If supplied, changes to values in the watched columns trigger filtering. 
            If null, any changes to Entities of this type will trigger filtering.
            </param>
            <remarks>
            The <see cref="P:IdeaBlade.Persistence.EntityListManager`1.Filter"/> uses a .NET <b>Predicate&lt;T&gt;</b>, a delegate that defines a set of 
            criteria and determines whether the specified object passed to it meets those criteria. 
            The Filter receives every addition, deletion or modification (based on the <see cref="P:IdeaBlade.Persistence.EntityListManager`1.FilterColumns"/> specified)
            of entities of the type watched, and determines whether the entity belongs
            in the list.  If the Filter returns true the entity is added to or kept in the list; if the Filter returns false
            the entity is removed from the list.  (Note that entities removed from the managed list are not removed from
            the PersistenceManager, nor are they deleted.)
            <para>
            Performance will be needlessly poor if the EntityListManager tests an entity every time any of its columns change.
            To avoid this, specify in the constructor or the <see cref="P:IdeaBlade.Persistence.EntityListManager`1.FilterColumns"/> property
            which entity columns are relevant to the filtering.
            </para>
            </remarks>
            <example>
    <p>This example simulates the OrderDetails property of an Order entity.</p>
    <p>
      There are four basic steps (1) retrieve the list using an RdbQuery, (2) define a filter,
      (3) add a manager to the list, and
      (4) wrap the list as a ReadOnlyEntityList so that only its manager can add and remove items.
    </p>
    <P>Step3 #2 and #3 are the crux of the example.</P>
    <code lang="C#">
  Private ReadOnlyEntityList&lt;OrderDetail&gt; mOrderDetails = null
  
  ''' &lt;summary&gt;
  ''' Gets the order details managed list populates it if not yet defined.
  ''' &lt;/summary&gt;
  Private ReadOnlyEntityList&lt;OrderDetail&gt; GetOrderDetails() {
    if (mOrderDetails != null) return mOrderDetails

    ' Step #1: Query for OrderDetails with order id that matches this order's id
    RdbQuery query =
      New RdbQuery(typeof(OrderDetail),
        OrderDetail.OrderIdEntityColumn,
        EntityQueryOp.EQ, this.Id)

    ' Get details in an EntityList
    EntityList&lt;OrderDetail&gt; list =
      this.PersistenceManager.GetEntities&lt;OrderDetail&gt;(query)
      
    ' Step #2: Filter as Predicate delegate returns true if the detail object belongs to this order
    Predicate&lt;OrderDetail&gt; predicate =
      delegate(OrderDetail pDetail) {
        return pDetail.OrderId == this.Id
      }

    ' Step #3: Add a ListManager to the EntityList from the query
    ' Note how manager will only engage predicate if the OrderId changes
    ' as is appropriate for that filter. Other changes to OrderDetails will be ignored
    list.ListManager = New EntityListManager&lt;OrderDetail&gt;(
      this.PersistenceManager,
      list,
      predicate,
      New EntityColumn[] { OrderDetail.OrderIdEntityColumn }, 
      false)
      
    ' Step #4: Wrap the list in a ReadOnlyEntityList and return it
    mOrderDetails = New ReadOnlyEntityList&lt;OrderDetail&gt;(list)
    return mOrderDetails
  }   
   </code>
   <code lang="VB">      
  Private mOrderDetails As ReadOnlyEntityList(Of OrderDetail) = Nothing

  ''' &lt;summary&gt;
  ''' Gets the order details managed list populates it if not yet defined.
  ''' &lt;/summary&gt;
  Private Function GetOrderDetails() As ReadOnlyEntityList(Of OrderDetail)
    If Not mOrderDetails Is Nothing Then
      Return mOrderDetails
    End If

    ' Step #1: Query for OrderDetails with order id that matches this order's id
    Dim query As RdbQuery = _
      New RdbQuery(GetType(OrderDetail), _
      OrderDetail.OrderIdEntityColumn, _
      EntityQueryOp.EQ, Me.Id)

    ' Get details in an EntityList
    Dim list As EntityList(Of OrderDetail) = _
      Me.PersistenceManager.GetEntities(Of OrderDetail)(query)

    ' Step #2: Filter
    Dim myPredicate As Predicate(Of OrderDetail) = _
      New Predicate(Of OrderDetail)(AddressOf OrderDetailFilter)

    ' Step #3: Add a ListManager to the EntityList from the query
    ' Note how manager will only engage predicate if the OrderId changes
    ' as is appropriate for that filter. Other changes to OrderDetails will be ignored
    list.ListManager = New EntityListManager(Of OrderDetail)( _
      Me.PersistenceManager, _
      list, _
      myPredicate, _
      New EntityColumn() {OrderDetail.OrderIdEntityColumn}, _
      False)

    ' Step #4: Wrap the list in a ReadOnlyEntityList and return it
    mOrderDetails = New ReadOnlyEntityList(Of OrderDetail)(list)
    Return mOrderDetails
  End Function

  ' Predicate delegate returns true if the detail object belongs to this order
  Private Function OrderDetailFilter(ByVal pDetail As OrderDetail) As Boolean
    If pDetail.OrderId = Me.Id Then
      Return True
    Else
      Return False
    End If
  End Function
    </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityListManager`1.ManageList(System.Collections.IList)">
            <summary>
            Adds a list to the set of those managed by this EntityListManager.
            </summary>
            <param name="pList"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityListManager`1.ManageList(System.Collections.IList,System.Boolean)">
            <summary>
            Adds a list to the set of those managed by this EntityListManager and refreshes the list
            </summary>
            <param name="pList"></param>
            <param name="pRefresh"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityListManager`1.UnmanageList(System.Collections.IList)">
            <summary>
            Removes a list from the set of those managed by this EntityListManager.
            </summary>
            <param name="pList"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityListManager`1.ContainsList(System.Collections.IList)">
            <summary>
            Returns whether the specified list is managed by this EntityListManager.
            </summary>
            <param name="pList"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityListManager`1.RefreshList(System.Collections.IList)">
            <summary>
            Refresh the specified list using the current filter
            </summary>
            <param name="pList"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityListManager`1.RefreshAllLists">
            <summary>
            Refresh all lists managed by this manager using the current filter
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityListManager`1.ApplyToList(System.Collections.IList)">
            <summary>
            Apply the Filter to any list
            </summary>
            <param name="pList"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityListManager`1.RowChangedHandler(System.Object,System.Data.DataRowChangeEventArgs)">
            <summary>
            The list manager is responsible for insuring that any changes to the
            pm that should add to a given list do so.  Any changes that should
            delete from the list are the responsibility of the list itself.  The
            reason for this division of labor is that we need to test every list for
            the add of an item but only those lists that contain an item for deletes
            </summary>
            <param name="pSender"></param>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityListManager`1.ColumnChangedHandler(System.Object,System.Data.DataColumnChangeEventArgs)">
            <summary>
            The list manager is responsible for insuring that any changes to the
            pm that should add to a given list do so.  Any changes that should
            delete from the list are the responsibility of the list itself.  The
            reason for this division of labor is that we need to test every list for
            the add of an item but only those lists that contain an item for deletes
            </summary>
            <param name="pSender"></param>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityListManager`1.Finalize">
            <summary>
            Finalizer. Removes all event handlers
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityListManager`1.PersistenceManager">
            <summary>
            Gets the <see cref="P:IdeaBlade.Persistence.EntityListManager`1.PersistenceManager"/> used by the entities in the managed lists. 
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityListManager`1.Filter">
            <summary>
            Gets or sets the <see cref="T:System.Predicate"/> used to set filtering criteria for the list(s).
            </summary>
            <remarks>
            The filter should return <c>true</c> if the supplied Entity belongs in the list(s) managed.
            <para>
            Setting or resetting the filter does not automatically refresh the list(s).
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityListManager`1.FilterColumns">
            <summary>
            Gets or sets the columns which, if their values change, will cause the <see cref="P:IdeaBlade.Persistence.EntityListManager`1.Filter"/> to be re-applied.
            </summary>
            <remarks>
            If no columns are set then any changes to existing Entities will cause filtering to be re-applied.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.CompressedServerChannelSink">
            <summary>
            This class supports the IdeaBlade Framework infrastructure 
            and is not intended to be used directly from your code 
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.CompressedServerChannelSink.#ctor(System.Runtime.Remoting.Channels.IServerChannelSink)">
            <summary>
            
            </summary>
            <param name="pNextSink"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.CompressedServerChannelSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            
            </summary>
            <param name="pSinkStack"></param>
            <param name="pRequestMsg"></param>
            <param name="pRequestHeaders"></param>
            <param name="pRequestStream"></param>
            <param name="pResponseMsg"></param>
            <param name="pResponseHeaders"></param>
            <param name="pResponseStream"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.CompressedServerChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="pSinkStack"></param>
            <param name="pState"></param>
            <param name="pResponseMessage"></param>
            <param name="pResponseHeaders"></param>
            <param name="pResponseStream"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.CompressedServerChannelSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>
            
            </summary>
            <param name="pSinkStack"></param>
            <param name="pState"></param>
            <param name="pResponseMessage"></param>
            <param name="pResponseHeaders"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.CompressedServerChannelSink.NextChannelSink">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.AllowRpcAttribute">
            <summary>
              Defines an attribute that marks a server method as being callable from a client.
              <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.InvokeServerMethod(ServerRpcDelegate, Object[])"/>
            </summary>
            <remarks>Methods with the <b>AllowRpc</b> attribute may be invoked from client-side code
            using <see cref="M:IdeaBlade.Persistence.PersistenceManager.InvokeServerMethod(IdeaBlade.Persistence.ServerRpcDelegate,System.Object[])"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.AllowRpcAttribute.#ctor">
            <summary>
              Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.PersistenceManagerCreatedEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.Persistence.PersistenceManagerCreated"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManagerCreatedEventArgs.#ctor(IdeaBlade.Persistence.PersistenceManager)">
            <summary>
            Initialize a new instance of this class.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManagerCreatedEventArgs.PersistenceManager">
            <summary>
            The PersistenceManager involved in this event.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.TableMappingInfo">
            <summary>
            Defines the schema mapping information for an <see cref="T:IdeaBlade.Persistence.EntityTable"/>.
            </summary>
            <remarks>
            The <b>DevForce Object Mapping Tool</b> automatically creates the <b>TableMappingInfo</b>
            in your generated <see cref="T:IdeaBlade.Persistence.EntityTable"/> classes.  You can create a custom
            <see cref="T:IdeaBlade.Persistence.DataSourceMappingInterceptor"/> to override the mapping defaults 
            if your design-time and run-time data sources do not have identical mappings.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.TableMappingInfo.#ctor">
            <summary>
            Initialize a new instance of this class
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.TableMappingInfo.#ctor(IdeaBlade.Persistence.EntityTable)">
            <summary>
            Create an instance of this class for the specified <see cref="T:IdeaBlade.Persistence.EntityTable"/>.
            </summary>
            <param name="pTable"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.TableMappingInfo.#ctor(IdeaBlade.Persistence.TableMappingInfo)">
            <summary>
            Copy constructor.
            </summary>
            <param name="pTableMappingInfo"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.TableMappingInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.TableMappingInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.TableMappingInfo.Clone">
            <summary>
            See <see cref="M:System.ICloneable.Clone"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.TableMappingInfo.TableMapping">
            <summary>
            Gets or sets the <see cref="T:System.Data.Common.DataTableMapping"/> to be used.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.TableMappingInfo.ColumnMappings">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.TableMappingInfo.ConcurrencyColumnName">
            <summary>
            Gets or sets the concurrency column specified for this table.
            </summary>
            <remarks>
            The column name is the name of the column in the source table. 
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.TableMappingInfo.SchemaInitializationMode">
            <summary>
            Gets or sets how the schema for this table is initialized.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.TableMappingInfo.ColumnInsertMap">
            <summary>
            Gets the list of {column-name, insert-value} pairs for an Insert command.
            </summary>
            <remarks>
            Column names are the names defined in the Entity, not the column names from the source table.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.TableMappingInfo.ColumnUpdateMap">
            <summary>
            Gets the list of {column-name, update-value} pairs for an Update command.
            </summary>
            <remarks>
            Column names are the names defined in the Entity, not the column names from the source table.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.UseDTCOption">
            <summary>
            The UseDTCOption is used to determine whether to use the TransactionScope 
            mechanism to manage .NET transactions. 
            </summary>
            <remarks>
            See <see cref="T:System.Transactions.TransactionScope"/> for more information on when
            and how to use distributed transactions.  The Microsoft Distributed Transaction Coordinator
            (MSDTC) is used when a local transaction must be escalated.
            </remarks>
        </member>
        <member name="F:IdeaBlade.Persistence.UseDTCOption.UseConfigurationSetting">
            <summary>
            Use the Ibconfig file [UseDTC] node.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.UseDTCOption.True">
            <summary>
            Use DTC.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.UseDTCOption.False">
            <summary>
            Do not use DTC. 
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.InvokeServerMethodCompletedEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.Persistence.PersistenceManager.InvokeServerMethodCompleted"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.InvokeServerMethodCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean,System.Object)">
            <summary>
            Construct an instance of this class - internal use only.
            </summary>
            <param name="pReturnData"></param>
            <param name="pException"></param>
            <param name="pCanceled"></param>
            <param name="pUserState"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.InvokeServerMethodCompletedEventArgs.Result">
            <summary>
            Gets the data returned from the invoked server method.
            </summary>
            <remarks>
            Note the return data must be serializable.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.PersistenceServerErrorEventArgs">
            <summary>
            Arguments to a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> event.  
            </summary>
            <remarks>
            The <see cref="P:IdeaBlade.Persistence.PersistenceServerErrorEventArgs.Exception"/> contains the exception
            for which the event is raised.  Use the <see cref="P:IdeaBlade.Persistence.PersistenceServerErrorEventArgs.Handled"/> property
            to indicate if the error has been handled: if set to <c>false</c> 
            the exception is re-thrown to the caller.  You can also return a custom exception
            by setting the <see cref="P:IdeaBlade.Persistence.PersistenceServerErrorEventArgs.UserException"/> property.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceServerErrorEventArgs.#ctor(IdeaBlade.Persistence.PersistenceServerException)">
            <summary>
            Initialize an instance of this class.  Internal use only.
            </summary>
            <param name="pException"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerErrorEventArgs.Exception">
            <summary>
            The exception for the error condition. 
            </summary>
            <remarks>
            If you need to return a custom exception to the calling routine, set the <see cref="P:IdeaBlade.Persistence.PersistenceServerErrorEventArgs.UserException"/>,
            otherwise this exception will be thrown or returned to the caller.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerErrorEventArgs.UserException">
            <summary>
            A custom user exception. 
            </summary>
            <remarks>
            Your handler can set this if you wish to return or throw a custom exception instead
            of the <b>PersistenceServerException</b> passed to the handler.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerErrorEventArgs.Handled">
            <summary>
            Set to true if the exception has been handled, otherwise the exception will be thrown back to the caller.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityQueryClause">
            <summary>Represents a single phrase in an <see cref="T:IdeaBlade.Persistence.EntityQuery"/>.
            <seealso cref="T:IdeaBlade.Persistence.EntityQuery"/>
            <seealso cref="T:IdeaBlade.Persistence.EntitySubquery"/>
            </summary>  
            <remarks>The <b>EntityQueryClause</b> is the primary constituent of an <see cref="T:IdeaBlade.Persistence.EntityQuery"/>. 
            Each clause represents a query phrase with a single <see cref="T:IdeaBlade.Persistence.EntityColumn"/>, 
            an <see cref="T:IdeaBlade.Persistence.EntityQueryOp"/> and a value (or list of values).
            </remarks>
            <example><code lang="C#">
private void SampleQueryClauses() {
  // Sample showing EntityQueryClause construction

  PersistenceManager pm = PersistenceManager.DefaultManager;
  EntityQuery query;

  query = new EntityQuery(typeof(Order));
  EntityQueryClause clause1 = new EntityQueryClause(Order.FreightEntityColumn, EntityQueryOp.GT, 100);
  EntityQueryClause clause2 = new EntityQueryClause(Order.ShipCityEntityColumn, EntityQueryOp.In,
                              new string[] { "Graz", "Lille" });
  EntityQueryClause clause3 = new EntityQueryClause(Order.RequiredDateEntityColumn, EntityQueryOp.GT, Order.ShippedDateEntityColumn);							  
  
  query.AddClause(clause1);
  query.AddClause(clause2);
  query.AddClause(clause3);

  // Note that an EntityQuery will automatically be converted to an RdbQuery when accessing the data source.
  EntityList&lt;Order&gt; orders = pm.GetEntities&lt;Order&gt;(query, QueryStrategy.DataSourceOnly);

  MessageBox.Show(string.Format("Rows retrieved = {0}\nQuery = {1}",
        orders.Count.ToString(), GetSqlStatement(query)));
}

private string GetSqlStatement(EntityQuery query) {
  RdbKey key = PersistenceManager.DefaultManager.GetDataSourceKey(query.EntityType) as RdbKey;
  RdbQuerySqlFormatter aFormatter = new RdbQuerySqlFormatter(key.AdoHelper);
  return aFormatter.BuildSqlSelect(query).Sql;
} 
	</code></example><example><code lang="VB">
Private Sub SampleQueryClauses()
  ' Sample showing EntityQueryClause construction
  
  Dim pm As PersistenceManager = PersistenceManager.DefaultManager
  Dim query As EntityQuery

  query = New EntityQuery(GetType(Order))
  Dim clause1 As New EntityQueryClause(Order.FreightEntityColumn, EntityQueryOp.GT, 100)
  Dim clause2 As New EntityQueryClause(Order.ShipCityEntityColumn, EntityQueryOp.In, _
				 New String() {"Graz", "Lille"})
  Dim clause3 As New EntityQueryClause(Order.RequiredDateEntityColumn, EntityQueryOp.GT, Order.ShippedDateEntityColumn)			 
  
  query.AddClause(clause1)
  query.AddClause(clause2)
  query.AddCluase(clause3)

  ' Note that an EntityQuery will automatically be converted to an RdbQuery when accessing the data source.
  Dim orders As EntityList(Of Order) = pm.GetEntities(Of Order)(query, QueryStrategy.DataSourceOnly)

  MessageBox.Show(String.Format("Rows retrieved = {0}" + ControlChars.Lf + "Query = {1}", _
         orders.Count.ToString(), GetSqlStatement(query)))
End Sub

Private Function GetSqlStatement(ByVal query As RdbQuery) As String
  Dim key As RdbKey = CType(PersistenceManager.DefaultManager.GetDataSourceKey(query.EntityType), RdbKey)
  Dim aFormatter As New RdbQuerySqlFormatter(key.AdoHelper)
  Return aFormatter.BuildSqlSelect(query).Sql
End Function
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryClause.#ctor(IdeaBlade.Persistence.EntityColumn,IdeaBlade.Persistence.EntityQueryOp,System.Object)">
            <summary>
            Initializes a new instance of the EntityQueryClause class.
            </summary>
            <param name="pEntityColumn"></param>
            <param name="pOperator"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryClause.#ctor(IdeaBlade.Persistence.EntityColumn,IdeaBlade.Persistence.EntityQueryOp,System.Object[])">
            <summary>
            Initializes a new instance of the EntityQueryClause class.
            </summary>
            <param name="pEntityColumn"></param>
            <param name="pOperator"></param>
            <param name="pValues"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryClause.#ctor(System.String,IdeaBlade.Persistence.EntityQueryOp,System.Object)">
            <summary>
            Initializes a new instance of the EntityQueryClause class.
            </summary>
            <param name="pColumnName"></param>
            <param name="pOperator"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryClause.Equals(System.Object)">
            <summary>
            Overridden. <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryClause.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityQueryClause.ToString">
            <summary>
            Returns a human readable version of this query clause.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQueryClause.ColumnName">
            <summary>
            Gets the name of the <see cref="T:IdeaBlade.Persistence.Entity"/> column for this clause.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQueryClause.ColumnDataType">
            <summary>
            Gets or sets the column data type for the EntityQueryClause.  
            </summary>
            <remarks>
            If the EntityQueryClause is created using an <see cref="T:IdeaBlade.Persistence.EntityColumn"/> then the
            ColumnDataType is set automatically and cannot be reset.  If a string representation of the column is passed in, then
            the column may be set by the developer.  Once the value is set it cannot be changed.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQueryClause.UnderlyingColumnDataType">
            <summary>
            For internal use only.  Used when also using a <see cref="P:IdeaBlade.Persistence.EntityQueryClause.TransformedColumnValue"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQueryClause.TransformedColumnValue">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQueryClause.Operator">
            <summary>
            Gets the <see cref="T:IdeaBlade.Persistence.EntityQueryOp"/> for this clause.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityQueryClause.ColumnValue">
            <summary>
            Gets the value (or values) for this clause.
            </summary>
            <remarks>
            The value can also be another <see cref="T:IdeaBlade.Persistence.EntityColumn"/> within the same Entity.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.PersistenceIdentityInsertException">
            <summary>
            Exception thrown when an "identity insert" operation fails and the <see cref="P:IdeaBlade.Persistence.Rdb.RdbKey.UseSqlIdentityProc"/> flag is on.
            </summary>
            <remarks>
            If you are using the DevForce-provided stored procedure to perform inserts to tables having identity columns
            (available with SQL Server 2005 only), the insert operation is performed as a batch rather than
            with separate insert statements.  If any row in the batch fails, the entire insert operation fails, and the
            <b>PersistenceIdentityInsertException</b> identifies this condition.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceIdentityInsertException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PersistenceIdentityInsertException class.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceIdentityInsertException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the PersistenceIdentityInsertException class.
            </summary>
            <param name="pInnerException">An instance of Exception that describes the error that caused this exception</param>
            <param name="pMessage">A message added to describe the exception</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceIdentityInsertException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityRelationsTopoSort">
            <summary>
            Utility functions to provide a topological sort of <see cref="T:IdeaBlade.Persistence.Entity"/> types in a collection of <see cref="T:IdeaBlade.Persistence.EntityRelation"/>s.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelationsTopoSort.Sort(System.Collections.Generic.ICollection{IdeaBlade.Persistence.EntityRelation},System.Boolean@)">
            <summary>
            Performs a topological sort of Entity Types in a collection of EntityRelations.
            </summary>
            <param name="pRelations">EntityRelations defining vertices and edges to sort</param>
            <param name="pIsAcyclic">True if defined Acyclic; False indicates could have persistence order trouble</param>
            <returns>EntityTypes topologically sorted for persistence order</returns>
            <remarks>
            Used internally to set the <see cref="M:IdeaBlade.Persistence.SaveOptions.GetDefaultPersistenceOrder(IdeaBlade.Persistence.PersistenceManager)"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelationsTopoSort.Sort(System.Collections.Generic.ICollection{IdeaBlade.Persistence.EntityRelation})">
            <summary>
            Performas a topological sort of Entity Types in a collection of EntityRelations.
            </summary>
            <param name="pRelations">EntityRelations defining vertices and edges to sort</param>
            <returns>EntityTypes topologically sorted for persistence order</returns>
            <remarks>
            Used internally to set the <see cref="M:IdeaBlade.Persistence.SaveOptions.GetDefaultPersistenceOrder(IdeaBlade.Persistence.PersistenceManager)"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelationsTopoSort.RelationsCollectionToString(System.Collections.Generic.ICollection{IdeaBlade.Persistence.EntityRelation})">
            <summary>
            Convert an EntityRelation collection to a string representation.
            </summary>
            <param name="pRelationList"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelationsTopoSort.TypeCollectionToString(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Convert a System.Type collection to string representation.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityRelationsTopoSort.EntityRelationEdge">
            <summary>
            Wrap EntityRelation to make it implement IEdge. Private class
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelationsTopoSort.EntityRelationEdge.Parent">
            <summary>
            Get the Parent
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelationsTopoSort.EntityRelationEdge.Child">
            <summary>
            Get the Child
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.DynamicEntityTable">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityTable">
            <summary>
            Abstract base container class for all <see cref="T:IdeaBlade.Persistence.Entity"/> objects.  
            </summary>
            <remarks>
            Classes derived from <b>EntityTable</b> are autogenerated by the <b>IdeaBlade DevForce Object Mapping Tool</b>.  
            Every <b>EntityTable</b> holds <see cref="T:IdeaBlade.Persistence.Entity"/> objects
            of a specified type.  The <see cref="T:IdeaBlade.Persistence.PersistenceManager"/> manages all EntityTables
            in its cache.
            <para><b>Note:</b> This class cannot be marked as abstract because of VS.NET
            designer issues, but it should be considered an abstract class.</para>
            </remarks>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityTable.SqlUpdateToken">
            <summary>
            String key used by autogenerated code.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityTable.SqlInsertToken">
            <summary>
            String key used by autogenerated code.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.#ctor">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.Init">
            <summary>
            Protected Initializer.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor.
            </summary>
            <param name="pInfo">info</param>
            <param name="pContext">context</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.Clone">
            <summary>
            See <see cref="M:System.ICloneable.Clone"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.CreateTableMappingInfo">
            <summary>
            Returns the <see cref="P:IdeaBlade.Persistence.EntityTable.TableMappingInfo"/> for this Entity type.
            </summary>
            <returns></returns>
            <remarks>Overridden by final subtypes.</remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.UpdateTableMappingInfo">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.InitColumnProperties">
            <summary>
            Overridden in derived types to initialize DataColumn properties, typically the Caption.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.InitializeClass">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.GetPrototypeTable(System.Type)">
            <summary>
            Return a "prototype" of the EntityTable containing the entity type.  
            </summary>
            <param name="pEntityType"></param>
            <returns></returns>
            <remarks>The prototype table is not contained in the PersistenceManager cache
            and does not contain <see cref="T:IdeaBlade.Persistence.Entity"/> objects.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.GetPrototypeTable(System.Type,IdeaBlade.Util.IDataSourceKey)">
            <summary>
            Return a "prototype" of the EntityTable containing the entity type. In most environments
            there will only be a single EntityTable schema per type. However, it is possible with UDF's
            and multiple DataSourceExtensions to get the case 
            </summary>
            <param name="pEntityType"></param>
            <param name="pDsKey"></param>
            <returns></returns>
            <remarks>The prototype table is not contained in the PersistenceManager cache
            and does not contain <see cref="T:IdeaBlade.Persistence.Entity"/> objects.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.SetPrototypeTable(IdeaBlade.Persistence.EntityTable)">
            <summary>
            Assign the prototype table.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.SetPrototypeTable(IdeaBlade.Persistence.EntityTable,IdeaBlade.Util.IDataSourceKey)">
            <summary>
            Assign the prototype table.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.GetEntityColumns(System.Type)">
            <summary>
            Return a list of all of the EntityColumns associated with a specified entity type.
            </summary>
            <param name="pEntityType"></param>
            <returns>List of <see cref="T:IdeaBlade.Persistence.EntityColumn"/> objects</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.GetEntityColumn(System.Type,System.String)">
            <summary>
            Gets the entity column for a specified entity type and column name.
            </summary>
            <param name="pEntityType">Type of the entity.</param>
            <param name="pColumnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.GetTableName(System.Type)">
            <summary>
            Returns the EntityTable table name corresponding to any <see cref="T:IdeaBlade.Persistence.Entity"/> subtype.
            </summary>
            <param name="pEntityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.IsConcreteSubtype(System.Type)">
            <summary>
            Returns whether a entity subtype is a final type
            </summary>
            <param name="pEntityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.CreateTable(System.Type)">
            <summary>
            Creates an instance of an entity table for a specific entity type
            </summary>
            <param name="pEntityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.GetTableType(System.Type)">
            <summary>
            Returns the EntityTable subtype corresponding to any Entity subtype.
            This method will fail for any dynamic types.
            </summary>
            <param name="pEntityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.GetColumn(System.String,System.Boolean)">
            <summary>
            Returns the DataColumn associated with a given column name.
            </summary>
            <param name="pColumnName"></param>
            <param name="pErrIfNotFound">If set True, an <see cref="T:IdeaBlade.Util.IdeaBladeException"/> is thrown.</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.GetDataSourceColumnName(IdeaBlade.Persistence.EntityColumn)">
            <summary>
            Returns the source column name of the specified <see cref="T:IdeaBlade.Persistence.EntityColumn"/>.
            </summary>
            <param name="pEntityColumn"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.GetDataSourceColumnName(System.Data.DataColumn)">
            <summary>
            Returns the source column name of the specified <see cref="T:System.Data.DataColumn"/>.
            </summary>
            <param name="pDataColumn"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.UpdateSourceMapping(IdeaBlade.Util.IDataSourceKey)">
            <summary>
            Updates the mappings for this EntityTable using the specified data source key.
            </summary>
            <param name="pDataSourceKey">Data source key</param>
            <remarks>
            This will use the <see cref="M:IdeaBlade.Persistence.DataSourceMappingInterceptor.UpdateSourceMapping(IdeaBlade.Util.IDataSourceKey,IdeaBlade.Persistence.EntityTable)"/> method 
            to update the <see cref="P:IdeaBlade.Persistence.EntityTable.TableMappingInfo"/> for this EntityTable.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.GetDefaultValue(System.Type)">
            <summary>
            Returns the default value; usually '0' or null for any data type
            Note that this is subtly different from the TypeFns.GetDefaultValue method
            </summary>
            <param name="pType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.UpdateSchemaFromMap">
            <summary>
            Updates the EntityTable with Object Mapping info.  For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)">
            <summary>
            Raises the <see cref="E:System.Data.DataTable.ColumnChanging"/> event if <see cref="P:IdeaBlade.Persistence.EntityTable.SuppressChangeEvents"/> is not set.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)">
            <summary>
            Raises the <see cref="E:System.Data.DataTable.ColumnChanged"/> event if <see cref="P:IdeaBlade.Persistence.EntityTable.SuppressChangeEvents"/> is not set.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
            <summary>
            
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the <see cref="E:System.Data.DataTable.RowChanged"/> event if <see cref="P:IdeaBlade.Persistence.EntityTable.SuppressChangeEvents"/> is not set.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the <see cref="E:System.Data.DataTable.RowDeleting"/> event if <see cref="P:IdeaBlade.Persistence.EntityTable.SuppressChangeEvents"/> is not set.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the <see cref="E:System.Data.DataTable.RowDeleted"/> event if <see cref="P:IdeaBlade.Persistence.EntityTable.SuppressChangeEvents"/> is not set.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTable.UpdateTableMappingForMissingColumns">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTable.TableMapping">
            <summary>
            Returns data table mapping information.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTable.TableMappingInfo">
            <summary>
            Returns data table mapping information specific to the Entity type.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTable.DataSourceKeyName">
            <summary>
            The name of the <see cref="T:IdeaBlade.Persistence.Rdb.RdbKey"/> 
            or <see cref="T:IdeaBlade.Persistence.WS.WsKey"/> defined in <b>IdeaBlade.ibconfig</b>.
            </summary>
            <remarks>Overridden by final subtypes.</remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTable.PrototypeEntity">
            <summary>
            Returns a reference to a new entity that is not part of any dataset but can be 
            used to call methods on the entity type without having an actual entity available.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTable.HasAutoIncrementPrimaryKey">
            <summary>
            Gets a value indicating whether this EntityTable has an auto-increment primary key.
            </summary>
            <value>
            	<c>true</c> if this instance has auto-increment primary key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTable.RowType">
            <summary>
            The type of <see cref="T:IdeaBlade.Persistence.Entity"/> that is contained within this EntityTable.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTable.PersistenceManager">
            <summary>
            The <see cref="T:PersistenceManager"/> which manages this EntityTable.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTable.SuppressChangeEvents">
            <summary>
            Gets or sets a value indicating whether to suppress change events.
            </summary>
            <value>
            	<c>true</c> if change events will be suppressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTable.IsSchemaInitialized">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityTable.#ctor">
            <summary>
            Initializes a new instance of the DynamicDataTable
            Empty constructor
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityTable.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the DynamicDataTable with a specified rowtype
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the DynamicEntityDataTable class 
            with the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            and the <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
            </summary>
            <param name="pInfo">The data needed to serialize or deserialize an object.</param>
            <param name="pContext">The source and destination of a given serialized stream.</param>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
            <summary>
            Creates a new instance of the DynamicEntity <see cref="T:System.Data.DataRow"/>.
            Constructs a row from the builder.
            <para>** For internal use only. **</para>
            </summary>
            <param name="pRowBuilder"></param>
            <returns>The DynamicEntity <see cref="T:System.Data.DataRow"/>.</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityTable.GetRowType">
            <summary>Returns the <see cref="T:System.Type"/> of the DynamicEntity.</summary>
            <returns>The <see cref="T:System.Type"/> of DynamicEntity.</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityTable.UpdateSchemaFromMap">
            <summary>
            Overrides base implementation to use EntityTypeInfo registered for this dynamic type
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityTable.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.DynamicEntityTable.DataSourceKeyName">
            <summary>
            Gets the name of the <see cref="T:IdeaBlade.Rdb.RdbKey"/> or 
            <see cref="T:IdeaBlade.Persistence.WS.WsKey"/> defined in <b>IdeaBlade.ibconfig</b>. 
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.IDynamicEntitySecurityManager">
            <summary>
            Interface for intercepting any Query and save operations involving DynamicEntity subtypes.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.IDynamicEntitySecurityManager.QuerySecurityCheck(System.Security.Principal.IPrincipal,IdeaBlade.Persistence.IEntityQuery)">
            <summary>
            Is called for any query operation against any dynamic type.  A PersistenceSecurityException
            can be thrown within the implementation of this method to cancel the query;
            </summary>
            <param name="pPrincipal"></param>
            <param name="pEntityQuery"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.IDynamicEntitySecurityManager.SaveSecurityCheck(System.Security.Principal.IPrincipal,IdeaBlade.Persistence.Entity)">
            <summary>
            Is called for each dynamic entity before being saved.  Any PersistenceSecurityException
            can be thrown within the implementation of this method to cancel the save;
            </summary>
            <param name="pPrincipal"></param>
            <param name="pEntity"></param>
        </member>
        <member name="T:IdeaBlade.Persistence.IRefresh">
            <summary>
            Interface implemented by ReadOnlyEntityList to expose NeedsRefreshing property. Internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.IRefresh.NeedsRefreshing">
            <summary>
            Gets or sets whether implementor needs to be refreshed.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.ReadOnlyEntityList`1">
            <summary>
            A read-only <see cref="T:IdeaBlade.Persistence.EntityList`1"/> usually managed by an <see cref="T:IdeaBlade.Persistence.EntityListManager`1"/>.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <remarks>
            A <b>ReadOnlyEntityList</b> is a "live" list managed by an <see cref="T:IdeaBlade.Persistence.EntityListManager`1"/>.
            You cannot directly add or remove items in the list, nor clear the list, since the EntityListManager
            is responsible for managing the contents of the list.
            <para>
            A <b>ReadOnlyEntityList</b> is returned by the <see cref="M:IdeaBlade.Persistence.Entity.GetManagedChildren`1(IdeaBlade.Persistence.EntityRelation)"/>
            method, which is used by the child properties of an Entity auto-generated by the <b>DevForce Object Mapping Tool</b>.  This means
            that child relational properties (e.g., Order.OrderDetails) will return a ReadOnlyEntityList.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.#ctor(IdeaBlade.Persistence.EntityList{`0})">
            <summary>
            Creates a read-only wrapper around an existing <see cref="T:IdeaBlade.Persistence.EntityList`1"/>.
            </summary>
            <param name="pList">List to be contained in the ReadOnlyEntityList</param>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.InnerList_ListChangedHandler(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            A read-only list isn't supposed to change, but the underlying wrapped list can.  Raise the event to
            ensure controls binding to this are informed of new/deleted items.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.ForceRefetch(IdeaBlade.Persistence.MergeStrategy)">
            <summary>
            Forces the ReadOnlyEntityList to refresh itself.
            </summary>
            <param name="pMergeStrategy">How results will be merged into cache</param>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.AddPropertyDescriptor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Add a <see cref="T:System.ComponentModel.PropertyDescriptor"/>
            to this list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>. 
            </summary>
            <param name="pDescriptor">The PropertyDescriptor to add</param>
            <returns>True if the descriptor was added to the list's PropertyDescriptorList;
            false if the descriptor already exists in that PropertyDescriptorList</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.RemovePropertyDescriptor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Remove the <see cref="T:System.ComponentModel.PropertyDescriptor"/>
            from this list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>.  
            </summary>
            <param name="pDescriptor">The PropertyDescriptor to remove</param>
            <returns>True if the descriptor was removed from the list's PropertyDescriptorList;
            false if the descriptor was not in that PropertyDescriptorList</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.GetPropertyDescriptor(System.String)">
            <summary>
            Get the <see cref="T:System.ComponentModel.PropertyDescriptor"/> from the list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>
            for the property path specified.
            </summary>
            <param name="pPropertyPath">Simple or nested PropertyPath such as "Customer.CompanyName".</param>
            <returns>The PropertyDescriptor if found; else null.</returns>
            <remarks>
            The <paramref name="pPropertyPath"/> search is case sensitive.  The string passed
            can also be the name of a custom property on the type, e.g. "Foo".
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            See <see cref="M:System.ComponentModel.ITypedList.GetItemProperties"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            See <see cref="M:System.ComponentModel.ITypedList.GetListName"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.ApplySort(System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
            Sorts the elements in the list using the specified comparer.
            </summary>
            <param name="pComparer">The IComparer implementation to use when comparing elements. </param>
            <param name="pKeepListSorted">Whether to keep the list sorted</param>
            <remarks>
            This is the only sorting method that does not set <see cref="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.IsSorted"/> to true.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.ApplySort(System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the list based on the natural comparator for the <see cref="P:IdeaBlade.Util.BindableList.ItemType"/>.
            </summary>
            <param name="pDirection">The sort direction</param>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.ApplySort(System.String,System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Sorts the list based on the property name and direction specified.
            </summary>
            <param name="pPropertyName">Name of the property on which to sort</param>
            <param name="pDirection">The sort direction</param>
            <param name="pKeepListSorted">Whether to keep the list sorted</param>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Sorts the list based on the <see cref="T:System.ComponentModel.PropertyDescriptor"/> and direction specified.
            </summary>
            <param name="pProperty">PropertyDescriptor on which to sort</param>
            <param name="pDirection">The sort direction</param>
            <param name="pKeepListSorted">Whether to keep the list sorted</param>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.RemoveSort">
            <summary>
            Removes any sort applied to the list.
            </summary>
            <remarks>
            <b>RemoveSort</b> does not actually revert the list to its prior state, but does
             stop it from staying sorted from this point on.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.Finalize">
            <summary>
            Finalizer. Removes all item event handlers
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.System#ComponentModel#IBindingList#AddNew">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
            <param name="property"></param>
            <param name="direction"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
            <param name="property"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.IndexOf(`0)">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.Insert(System.Int32,`0)">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.RemoveAt(System.Int32)">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.Add(`0)">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.Contains(`0)">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.CopyTo(`0[],System.Int32)">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.Remove(`0)">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.Clear">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.ReadOnlyEntityList`1.GetEnumerator">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="E:IdeaBlade.Persistence.ReadOnlyEntityList`1.ListChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.RaiseListChangedEvents">
            <summary>
            Setting this to true will only have an effect when the wrapped list RaiseListChangedEvents is set to true.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.UsesGlobalPropertyDescriptors">
            <summary>
            Gets whether the list uses the global <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>
            defined for the <see cref="P:IdeaBlade.Util.BindableList`1.ItemType"/> of the entities in the list.
            </summary>
            <seealso cref="T:IdeaBlade.Util.IAdaptiveList"/>
            <remarks>
            The setter may not be called for the ReadOnlyEntityList, instead set the corresponding
            property on the <see cref="T:IdeaBlade.Persistence.EntityList`1"/> this class wraps.
            </remarks>
            <exception cref="T:System.NotSupportedException">The setter may not be called</exception>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.IsSorted">
            <summary>
            Returns whether the list is sorted.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.ListManager">
            <summary>
            Returns the <see cref="T:IdeaBlade.Persistence.EntityListManager`1"/> which manages this list.
            </summary>
            <remarks>
            A <see cref="T:System.NotSupportedException"/> is thrown by the setter.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.InnerList">
            <summary>
            Returns the <see cref="T:IdeaBlade.Persistence.EntityList`1"/> wrapped by this class.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.InnerBindingList">
            <summary>
            Returns the <see cref="T:IdeaBlade.Persistence.EntityList`1"/> wrapped by this class cast as an IBindingList
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.InnerIList">
            <summary>
            Returns the <see cref="T:IdeaBlade.Persistence.EntityList`1"/> wrapped by this class cast as as IList
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.NeedsRefreshing">
            <summary>
            Indicates whether current EntityList needs to be refreshed
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.System#ComponentModel#IBindingList#AllowEdit">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.System#ComponentModel#IBindingList#AllowNew">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.System#ComponentModel#IBindingList#AllowRemove">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.System#ComponentModel#IBindingList#SortDirection">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.System#ComponentModel#IBindingList#SortProperty">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.System#ComponentModel#IBindingList#SupportsSearching">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.System#ComponentModel#IBindingList#SupportsSorting">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.Item(System.Int32)">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.IsReadOnly">
            <summary>
            See <see cref="T:IdeaBlade.Util.EntityList`1"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.ReadOnlyEntityList`1.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntitySubquery">
             <summary>
             The mechanism through which one query can reference the results of another query
             to form a join operation in the DevForce Object Query Language.
             <seealso cref="P:IdeaBlade.Persistence.EntitySubquery.EntityRelation"/>
             <seealso cref="T:IdeaBlade.Persistence.EntityQuery"/>
             </summary>
             <remarks>
             An <b>EntitySubquery</b> is a type of <see cref="T:IdeaBlade.Persistence.EntityQuery"/>, but unlike an EntityQuery
             an EntitySubquery is always related to another query via an <see cref="T:IdeaBlade.Persistence.EntityRelation"/>.
             You use <b>EntitySubquery</b> in place of a SQL join to
             add query criteria for attributes on related objects. 
             <para>Like an EntityQuery, an <b>EntitySubquery</b> may contain any number of 
             <see cref="T:IdeaBlade.Persistence.EntityQueryClause"/>'s and nested subqueries.
             </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySubquery.#ctor(IdeaBlade.Persistence.EntityRelationLink)">
            <summary>
            Initializes a new instance of the EntitySubquery class.
            </summary>
            <param name="pEntityRelationLink">A relationship link</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySubquery.#ctor(IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryDirection)">
            <summary>
            Initializes a new instance of the EntitySubquery class.  Obsolete.
            </summary>
            <param name="pEntityRelation"></param>
            <param name="pQueryDirection"></param>
            <remarks>
            Use <see cref="T:IdeaBlade.Persistence.Rdb.RdbSubquery(EntityRelationLink)"/> instead.
            An <see cref="T:IdeaBlade.Persistence.EntityRelationLink"/> can be accessed via 
            either the EntityRelation <see cref="P:IdeaBlade.Persistence.EntityRelation.ToChild"/> or 
            <see cref="P:IdeaBlade.Persistence.EntityRelation.ToParent"/> properties.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySubquery.#ctor(IdeaBlade.Persistence.EntitySubquery)">
            <summary>
            Protected copy constructor.
            </summary>
            <param name="pEntitySubquery">Subquery to be copied</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySubquery.Clone">
            <summary>
            Copy. See <see cref="M:System.ICloneable.Clone"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySubquery.FindSuperRows(IdeaBlade.Persistence.PersistenceManager)">
            <summary>
            Internal use only.  Returns the parent or child entities of the results of this subquery.
            </summary>
            <param name="pPersistenceManager"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySubquery.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySubquery.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.EntitySubquery.EntityRelationLink">
            <summary>
            Returns the <see cref="P:IdeaBlade.Persistence.EntitySubquery.EntityRelationLink"/> relating this query to another.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntitySubquery.EntityRelation">
            <summary>
            Returns the <see cref="P:IdeaBlade.Persistence.EntitySubquery.EntityRelation"/> relating this query to another.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntitySubquery.QueryDirection">
            <summary>
            Returns the <see cref="P:IdeaBlade.Persistence.EntitySubquery.QueryDirection"/> to navigate the <see cref="P:IdeaBlade.Persistence.EntitySubquery.EntityRelation"/> in this subquery.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntitySet">
            <summary>
            A serializable collection of Entities that can be retrieved from a PersistenceManager.
            <seealso cref="T:IdeaBlade.Persistence.PersistenceManager"/>
            <seealso cref="T:IdeaBlade.Persistence.Entity"/>
            </summary>
            <remarks>
            An <b>EntitySet</b> is retrieved from a <see cref="T:IdeaBlade.Persistence.PersistenceManager"/> via the
            <see cref="M:IdeaBlade.Persistence.PersistenceManager.GetEntitySet"/> method; it can then be serialized and stored.
            The <b>EntitySet</b> can be restored by deserializing the contents and calling either the
            <see cref="M:IdeaBlade.Persistence.EntitySet.Merge(IdeaBlade.Persistence.PersistenceManager,IdeaBlade.Persistence.RestoreStrategy)"/> or <see cref="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(IdeaBlade.Persistence.EntitySet)"/> methods.
            <para>The <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveEntitySet(System.String)"/> and <see cref="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(System.String)"/>
            methods of the PersistenceManager class provide additional serialization and deserialization
            capabilities.  You can use <b>EntitySet</b> directly if you prefer additional control over this processing.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySet.#ctor(IdeaBlade.Persistence.PersistenceManager)">
            <summary>
            Initialize a new instance of the EntitySet class.
            </summary>
            <param name="pPersistenceManager"></param>
            <remarks>
            Use this constructor to create an <b>EntitySet</b> for all items in the 
            <see cref="T:IdeaBlade.Persistence.PersistenceManager"/> cache.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySet.#ctor(IdeaBlade.Persistence.PersistenceManager,System.Collections.IEnumerable)">
            <summary>
            Initialize a new instance of the EntitySet class using the list of entities specified.
            </summary>
            <param name="pPersistenceManager"></param>
            <param name="pDataRows">List of Entities</param>
            <remarks>
            Use this constructor to create an <b>EntitySet</b> for only the items passed in
            the <paramref name="pDataRows"/> parameter.  
            <para>
            If any temporary Ids have been assigned to entities in the list provided, all related entities
            which reference the temporary Id must also be included.  For example, if an Order has been assigned 
            a temporary Id of -1, the Order and all its OrderDetails must be included in the list, not only the 
            Order or only the OrderDetails.
            </para>
            </remarks>
            <exception cref="T:IdeaBlade.Util.IdeaBladeException">Thrown if temporary Id references cannot be resolved</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySet.Save(System.String)">
            <summary>
            Saves the EntitySet to a file.
            </summary>
            <param name="pFileName"></param>
            <remarks>
            The EntitySet is serialized to the file in binary format.  The user must have
            write permissions to the directory, and if the file exists it will be overwritten.
            </remarks>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySet.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the EntitySet to a Stream, optionally closing the stream when done.
            </summary>
            <param name="pStream"></param>
            <param name="pCloseOnExit"></param>
            <remarks>
            The EntitySet is serialized to the stream in binary format.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySet.Load(System.String)">
            <summary>
            Static (Shared in Visual Basic) method which creates and loads an EntitySet from the file specified.
            </summary>
            <param name="pFileName">File containing a serialized EntitySet</param>
            <returns>An EntitySet</returns>
            <remarks>
            Use <b>Load</b> to de-serialize an EntitySet which was previously saved to a file.
            <para>
            Note that this method does not merge the EntitySet into a <see cref="T:IdeaBlade.Persistence.PersistenceManager"/>.  Call 
            <see cref="M:IdeaBlade.Persistence.EntitySet.Merge(IdeaBlade.Persistence.PersistenceManager,IdeaBlade.Persistence.RestoreStrategy)"/> or <see cref="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(IdeaBlade.Persistence.EntitySet)"/> for this.
            Instead of performing the <b>Load</b> and merge/restore as separate steps, you can instead
            use <see cref="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(System.String)">PersistenceManager.RestoreEntitySet(fileName)</see>
            to accomplish the same thing.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySet.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Static (Shared in Visual Basic) method which creates and loads an EntitySet from the stream specified.
            </summary>
            <param name="pStream">Stream to be read</param>
            <param name="pCloseOnExit">Whether or not to close the stream when done.</param>
            <returns>An EntitySet</returns>
            <remarks>
            Use <b>Load</b> to de-serialize an EntitySet which was previously saved to a stream or file.
            <para>
            Note that this method does not merge the EntitySet into a <see cref="T:IdeaBlade.Persistence.PersistenceManager"/>.  Call 
            <see cref="M:IdeaBlade.Persistence.EntitySet.Merge(IdeaBlade.Persistence.PersistenceManager,IdeaBlade.Persistence.RestoreStrategy)"/> or <see cref="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(IdeaBlade.Persistence.EntitySet)"/> for this.
            Instead of performing the <b>Load</b> and merge/restore as separate steps, you can instead
            use <see cref="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(System.IO.Stream,IdeaBlade.Persistence.RestoreStrategy,System.Boolean)">PersistenceManager.RestoreEntitySet(Stream)</see>
            to accomplish the same thing.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySet.Merge(IdeaBlade.Persistence.PersistenceManager,IdeaBlade.Persistence.RestoreStrategy)">
            <summary>
            Merges this EntitySet into a PersistenceManager.
            </summary>
            <param name="pPersistenceManager">PersistenceManager to merge data into</param>
            <param name="pStrategy">The restore strategy to use</param>
            <remarks>
            <b>Merge</b> is functionally equivalent to the
            <see cref="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(IdeaBlade.Persistence.EntitySet, ResotreStrategy, System.Boolean)"/>
            method in PersistenceManager.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySet.BuildDataSet(System.Collections.IEnumerable)">
            <summary>
            Build a dataset from the entities provided.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySet.ValidateTempIds(IdeaBlade.Persistence.PersistenceManager,System.Data.DataSet)">
            <summary>
            If any temp Ids were used, ensure that all objects with references to the 
            temp Id have been included in the entity set.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySet.ValidateRelated(IdeaBlade.Persistence.PersistenceManager,IdeaBlade.Persistence.UniqueId,System.Data.DataSet)">
            <summary>
            Check that any entities referencing a tempid are in the entity set.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySet.FixupTempIds(IdeaBlade.Persistence.PersistenceManager,System.Data.DataSet)">
            <summary>
            Fixup temp ids in the loaded entity set.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySet.GetTempIdFixupMap(IdeaBlade.Persistence.PersistenceManager)">
            <summary>
            Build a UniqueIdMap of "fixed up" temp ids.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityRelationFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelationFilter.#ctor(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation)">
            <summary>
            
            </summary>
            <param name="pEntity"></param>
            <param name="pEntityRelation"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelationFilter.IsChildOf(IdeaBlade.Persistence.Entity)">
            <summary>
            
            </summary>
            <param name="pEntity"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelationFilter.IsParentOf(IdeaBlade.Persistence.Entity)">
            <summary>
            
            </summary>
            <param name="pEntity"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelationFilter.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelationFilter.EntityRelation">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityDataSetSurrogate">
            <summary>
            A wrapper for a strongly typed dataset that serializes more efficiently and correctly
            than the .NET dataset (especially with regards to DateTime objects in the context of multiple timezones).
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityDataSetSurrogate.#ctor(System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="pEntityDataSet"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityDataSetSurrogate.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityDataSetSurrogate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityDataSetSurrogate.ToEntityDataSet">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Persistence.GetEntitiesCompletedEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.Persistence.PersistenceManager.GetEntitiesCompleted"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.GetEntitiesCompletedEventArgs.#ctor(System.Collections.IList,System.Int32,System.Exception,System.Boolean,System.Object)">
            <summary>
            Construct an instance of this class - internal use only.
            </summary>
            <param name="pEntities"></param>
            <param name="pTimerInterval"></param>
            <param name="pException"></param>
            <param name="pCanceled"></param>
            <param name="pUserState"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.GetEntitiesCompletedEventArgs.Entities">
            <summary>
            Gets a list of the entities retrieved.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.GetEntitiesCompletedEventArgs.TimerInterval">
            <summary>
            Gets or sets the number of milliseconds upon which to re-execute the query. 
            </summary>
            <remarks>
            Set the value to 0 to stop the query from re-executing.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.WorkState`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:IdeaBlade.Persistence.WorkState">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.WorkState.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="pEntityType"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.WorkState.ReturnEntities">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.WorkState.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="pEntity"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.WorkState.AddRange(System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="pListToAdd"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.WorkState.GetFirst(IdeaBlade.Persistence.PersistenceManager)">
            <summary>
            
            </summary>
            <param name="pPm"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.WorkState.GetEntityArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.WorkState.AsArrayList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.WorkState.RaiseListChangedEvents">
            <summary>
            does nothing in the base class; overrided in the generic subclass
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.WorkState.EntityType">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.WorkState`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.WorkState`1.#ctor(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.WorkState`1.ReturnEntities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.WorkState`1.EntityList">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.IPersistenceLoginManager">
            <summary>
            Interface for server-side user authentication.
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.Login(IdeaBlade.Persistence.ILoginCredential)"/>
            <seealso cref="T:IdeaBlade.Persistence.LoginCredential"/>
            </summary>
            <remarks>You must implement the <b>IPersistenceLoginManager</b> interface in order to use the
            <see cref="M:IdeaBlade.Persistence.PersistenceManager.Login(IdeaBlade.Persistence.ILoginCredential)"/> feature.  The assembly containing the implementation
            must also be specified in a <see cref="P:IdeaBlade.Util.IdeaBladeConfig.ProbeAssemblyNames"/> element in the <b>IdeaBlade.ibconfig</b>.
            <para>
            Note that if <b>IPersistenceLoginManager</b> has been implemented, a <see cref="M:IdeaBlade.Persistence.PersistenceManager.Login(IdeaBlade.Persistence.ILoginCredential)"/>
            call must be made to validate the user before any other PersistenceManager actions may be performed.
            </para>
            <para>
            Implementation of this interface is optional.  If not implemented do not call <see cref="M:IdeaBlade.Persistence.PersistenceManager.Login(IdeaBlade.Persistence.ILoginCredential)"/>
            to perform user validation.  When this interface is not implemented the <see cref="T:IdeaBlade.Persistence.PersistenceManager"/> will implicitly
            perform a Login with null credentials, and use the <see cref="T:IdeaBlade.Persistence.SessionBundle"/> returned for a non-authenticated "Default" user
            for all further communications from the client.
            </para>
            </remarks>
            <example><code lang="C#">
// Sample showing Login, and implementation of IPersistenceLoginManager

// Create a PM - this will also do an implicit Connect().
PersistenceManager pm = PersistenceManager.DefaultManager;

// create a LoginCredential
string userName = "demo";
string password = "demo";
string domain = "Earth";
LoginCredential credential = new LoginCredential(userName, password, domain);

MessageBox.Show("Current user: " + System.Threading.Thread.CurrentPrincipal.Identity.Name);

try {
   // "Login" to PersistenceServer 
   SessionBundle bundle = pm.Login(credential);

   // note change in current principal
   MessageBox.Show("Current user: " + System.Threading.Thread.CurrentPrincipal.Identity.Name);
} catch (LoginException le) {
   MessageBox.Show(le.Message);
} catch (PersistenceServerException pse) {
   MessageBox.Show("Login failed: " + pse.Message);
} catch (Exception ex) {
   MessageBox.Show(ex.Message);
}

//..... Retrieve data, etc.

// Now logout
pm.Logout();


// Sample LoginManager class
[Serializable]
public class LoginManager : IPersistenceLoginManager {
   public LoginManager() {}

   public IPrincipal Login(ILoginCredential pCredential, PersistenceManager pManager) {
      // note that Login runs on server-side -- this will return false
      bool isClient = pManager.IsClient;

      // You would normally validate the credentials, eg against a database, AD, etc, and then
      // build and return an object implementing IPrincipal.
      if (pCredential.Domain != "Earth") {
        throw new LoginException(LoginExceptionType.InvalidUserName, pCredential.Domain, pCredential.UserName);
      }

      // We'll just return a GenericPrincipal
      GenericIdentity identity  = new GenericIdentity(pCredential.UserName);
      return new GenericPrincipal(identity, new String[] { "user" });
   }
}
</code></example><example><code lang="VB">
' Sample showing Login, and implementation of IPersistenceLoginManager

' Create a PM - this will also do an implicit Connect().
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

' create a LoginCredential
Dim userName As String = "demo"
Dim password As String = "demo"
Dim domain As String = "Earth"
Dim credential As New LoginCredential(userName, password, domain)

MessageBox.Show(("Current user: " + System.Threading.Thread.CurrentPrincipal.Identity.Name))

Try
   ' "Login" to PersistenceServer 
   Dim bundle As SessionBundle = pm.Login(credential)
   
   ' note change in current principal
   MessageBox.Show(("Current user: " + System.Threading.Thread.CurrentPrincipal.Identity.Name))
Catch le As LoginException
   MessageBox.Show(le.Message)
Catch pse As PersistenceServerException
   MessageBox.Show("Login failed: " + pse.Message)
Catch ex As Exception 
   MessageBox.Show(ex.Message)
End Try

'..... Retrieve data, etc.

' Now logout
pm.Logout()

&lt;Serializable()&gt; _
Public Class LoginManager : Implements IPersistenceLoginManager 

    Public Sub New()
    End Sub 

    Public Function Login(ByVal pCredential As ILoginCredential, ByVal pManager As PersistenceManager) As IPrincipal _
    Implements IPersistenceLoginManager.Login
        ' note that Login runs on server-side -- this will return false
        Dim isClient As Boolean = pManager.IsClient

        ' You would normally validate the credentials, eg against a database, and then
        ' build and return an object implementing IPrincipal.
        If pCredential.Domain &lt;&gt; "Earth" Then
            Throw New LoginException(LoginExceptionType.InvalidUserName, pCredential.Domain, pCredential.UserName)
        End If

        ' We'll just return a GenericPrincipal
        Dim identity As New GenericIdentity(pCredential.UserName)
        Return New GenericPrincipal(identity, New [String]() {"user"})
    End Function 
End Class 
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.IPersistenceLoginManager.Login(IdeaBlade.Persistence.ILoginCredential,IdeaBlade.Persistence.PersistenceManager)">
            <summary>
            Validate user credentials and return an IPrinicipal.
            </summary>
            <remarks>
            <para>The <see cref="T:System.Security.Principal.IPrincipal"/> returned here is wrapped into a <see cref="T:IdeaBlade.Persistence.SessionBundle"/>
            before returning to the client-side code which called <see cref="M:IdeaBlade.Persistence.PersistenceManager.Login(IdeaBlade.Persistence.ILoginCredential)"/>.
            </para>
            <para>Implementors should throw a <see cref="T:IdeaBlade.Persistence.LoginException"/> if the credentials passed fail validation.</para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.QueryDirection">
            <summary>
            Used to distinguish between queries where the parent is searching for its children
            and those where a child is searching for its parents.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.QueryDirection.ParentQuery">
            <summary>
            Children searching for parents
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.QueryDirection.ChildQuery">
            <summary>
            Parents searching for children
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityRelation">
            <summary>
            Represents a parent/child relationship between two <see cref="T:IdeaBlade.Persistence.Entity"/> subtypes.
            </summary>
            <remarks><b>EntityRelation</b> objects are automatically generated for you by the
            <b>IdeaBlade DevForce Object Mapping Tool</b> for any relationships defined during 
            design, and placed in a class called <b>EntityRelations</b> in your business objects
            project.  
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.InitializeEntityRelations(System.Reflection.Assembly)">
            <summary>
            Initializes all of the EntityRelations found in an assembly.  
            </summary>
            <param name="pAssembly"></param>
            <remarks>
            Equivalent to calling EntityRelations.Initialize(), this method dynamically locates 
            the EntityRelations class in the assembly.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.GetEntityRelations">
            <summary>
            Returns a list of all of the EntityRelations currently defined.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.GetEntityRelations(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Returns a list of all of the EntityRelations currently defined involving the specified types.
            </summary>
            <param name="pTypes">types</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.GetEntityRelations(System.String)">
            <summary>
            Returns all EntityRelations having the specified relation name.
            </summary>
            <param name="pRelationName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.GetEntityRelation(System.String)">
            <summary>
            Returns the first EntityRelation having the specified relation name.
            </summary>
            <param name="pRelationName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.GetRelatedColumns(IdeaBlade.Persistence.EntityColumn)">
            <summary>
            Returns a collection of columns related to the specified column.
            </summary>
            <param name="pEntityColumn"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.#ctor(IdeaBlade.Persistence.EntityColumn,IdeaBlade.Persistence.EntityColumn)">
            <overloads>
             Initialize a new instance of the EntityRelation class. 
            </overloads>
             <summary>
             Initialize a new instance of the EntityRelation class from parent and child columns.
             </summary>
             <param name="pParentColumn">A single parent <see cref="T:IdeaBlade.Persistence.EntityColumn"/></param>
             <param name="pChildColumn">The corresponding child <see cref="T:IdeaBlade.Persistence.EntityColumn"/></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.#ctor(IdeaBlade.Persistence.EntityColumn,IdeaBlade.Persistence.EntityColumn,System.Boolean)">
            <summary>
            Initialize a new instance of the EntityRelation class from parent and child columns, 
            optionally creating a <see cref="T:System.Data.ForeignKeyConstraint"/>.
            </summary>
            <param name="pParentColumn">A single parent <see cref="T:IdeaBlade.Persistence.EntityColumn"/></param>
            <param name="pChildColumn">The corresponding child <see cref="T:IdeaBlade.Persistence.EntityColumn"/></param>
            <param name="pCreateConstraint">Whether or not to create a constraint to enforce this relation</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.#ctor(IdeaBlade.Persistence.EntityColumn[],IdeaBlade.Persistence.EntityColumn[])">
            <summary>
            Initialize a new instance of the EntityRelation class from an array of parent and child columns.
            </summary>
            <param name="pParentColumns">An array of parent <see cref="T:IdeaBlade.Persistence.EntityColumn"/>'s</param>
            <param name="pChildColumns">A corresponding array of child <see cref="T:IdeaBlade.Persistence.EntityColumn"/>'s</param>    
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.#ctor(IdeaBlade.Persistence.EntityColumn[],IdeaBlade.Persistence.EntityColumn[],System.Boolean)">
            <summary>
            Initialize a new instance of the EntityRelation class from an array of parent and child columns, 
            optionally creating a <see cref="T:System.Data.ForeignKeyConstraint"/>.
            </summary>
            <param name="pParentColumns">An array of parent <see cref="T:IdeaBlade.Persistence.EntityColumn"/>'s</param>
            <param name="pChildColumns">A corresponding array of child <see cref="T:IdeaBlade.Persistence.EntityColumn"/>'s</param>
            <param name="pCreateConstraint">Whether or not to create a constraint to enforce this relation</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.#ctor(IdeaBlade.Persistence.EntityColumn[],IdeaBlade.Persistence.EntityColumn[],System.Boolean,System.String)">
            <summary>
            Initialize a new instance of the EntityRelation class from an array of parent and child columns, 
            optionally creating a <see cref="T:System.Data.ForeignKeyConstraint"/>.
            </summary>
            <param name="pParentColumns">An array of parent <see cref="T:IdeaBlade.Persistence.EntityColumn"/>'s</param>
            <param name="pChildColumns">A corresponding array of child <see cref="T:IdeaBlade.Persistence.EntityColumn"/>'s</param>
            <param name="pCreateConstraint">Whether or not to create a constraint to enforce this relation</param>
            <param name="pRelationName">The unique name representing the parent/child relation.</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.#ctor(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>
            Initialize a new instance of the EntityRelation class from lists of parent and child columns, 
            optionally creating a <see cref="T:System.Data.ForeignKeyConstraint"/>.
            </summary>
            <param name="pParentColumns">A list of parent <see cref="T:IdeaBlade.Persistence.EntityColumn"/>'s</param>
            <param name="pChildColumns">A corresponding list of child <see cref="T:IdeaBlade.Persistence.EntityColumn"/>'s</param>
            <param name="pCreateConstraint">Whether or not to create a constraint to enforce this relation</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.#ctor(System.Collections.IList,System.Collections.IList,System.Boolean,System.String)">
            <summary>
            Initialize a new instance of the EntityRelation class from lists of parent and child columns, 
            optionally creating a <see cref="T:System.Data.ForeignKeyConstraint"/>.
            </summary>
            <param name="pParentColumns">A list of parent <see cref="T:IdeaBlade.Persistence.EntityColumn"/>'s</param>
            <param name="pChildColumns">A corresponding list of child <see cref="T:IdeaBlade.Persistence.EntityColumn"/>'s</param>
            <param name="pCreateConstraint">Whether or not to create a constraint to enforce this relation</param>
            <param name="pRelationName">The unique name representing the parent/child relation.</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.ToDataRelation(System.Data.DataSet)">
            <summary>
            Creates a <see cref="T:System.Data.DataRelation"/> representation
            of this EntityRelation within a specified <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="pDataSet">The <see cref="T:System.Data.DataSet"/> in which this relation
            is to be created</param>
            <returns>The newly created DataRelation</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.ToDataRelation(System.Data.DataSet,System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Data.DataRelation"/> representation
            of this EntityRelation within a specified <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="pDataSet">The <see cref="T:System.Data.DataSet"/> in which this relation
            is to be created</param>
            <param name="pCreateConstraint">If set to <c>true</c> create constraint</param>
            <returns>The newly created DataRelation</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.GetEntityType(IdeaBlade.Persistence.QueryDirection)">
            <summary>
            Returns either the <see cref="P:IdeaBlade.Persistence.EntityRelation.ChildType"/> or <see cref="P:IdeaBlade.Persistence.EntityRelation.ParentType"/> for this
            relation using the <see cref="T:IdeaBlade.Persistence.QueryDirection"/> specified.
            </summary>
            <param name="pDirection">The <see cref="T:IdeaBlade.Persistence.QueryDirection"/> to determine whether we want
            the parent or the child type from this relation</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.GetColumns(IdeaBlade.Persistence.QueryDirection)">
            <summary>
            Returns either the <see cref="P:IdeaBlade.Persistence.EntityRelation.ChildColumns"/> or the <see cref="P:IdeaBlade.Persistence.EntityRelation.ParentColumns"/> for this
            relation using the <see cref="T:IdeaBlade.Persistence.QueryDirection"/> specified.
            </summary>
            <param name="pDirection">The <see cref="T:IdeaBlade.Persistence.QueryDirection"/> to determine whether we want
            the parent or the child columns from this relation</param>    /// 
            <returns>An array of either parent or child <see cref="T:IdeaBlade.Persistence.EntityColumn"/>'s</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.Equals(System.Object)">
            <summary>
            Overridden. See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.GetHashCode">
            <summary>
            Overridden. See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelation.ToString">
            <summary>
            Returns a human readable description of this relation.
            </summary>
            <returns>A human readable description of this relation</returns>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelation.EntityAssemblies">
            <summary>
            Returns a list of all of the assemblies in which an <b>EntityRelations</b> is defined.
            </summary>
            <value>The entity assemblies.</value>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelation.RelationName">
            <summary>
            Gets the Relation name assigned during mapping.
            </summary>
            <remarks>
            A default unique Relation name is automatically 
            generated based on the parent and child types involved.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelation.ParentRelationPropertyName">
            <summary>
            Gets the property name corresponding to the parent relation of this EntityRelation.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelation.ChildRelationPropertyName">
            <summary>
            Gets the property name corresponding to the child relation of this EntityRelation.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelation.ToParent">
            <summary>
            Gets the <see cref="T:IdeaBlade.Persistence.EntityRelationLink"/> to the parent Entity.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelation.ToChild">
            <summary>
            Gets the <see cref="T:IdeaBlade.Persistence.EntityRelationLink"/> to the child Entity.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelation.ParentColumns">
            <summary>
            The parent <see cref="T:IdeaBlade.Persistence.EntityColumn"/>'s for this relation.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelation.ChildColumns">
            <summary>
            The child <see cref="T:IdeaBlade.Persistence.EntityColumn"/>'s for this relation.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelation.ParentType">
            <summary>
            The parent entity type for this relation.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelation.ChildType">
            <summary>
            The child entity type for this relation.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.DataSetSurrogate">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSetSurrogate.#ctor(System.Data.DataSet)">
            <summary>
            Constructs a DataSetSurrogate object from a DataSet.
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSetSurrogate.ConvertToDataSet">
            <summary>
            Constructs a DataSet from the DataSetSurrogate object. This can be used after the user recieves a Surrogate object over the wire and wished to construct a DataSet from it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSetSurrogate.ReadSchemaIntoDataSet(System.Data.DataSet)">
            <summary>
            Reads the schema into the dataset from the DataSetSurrogate object.
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSetSurrogate.ReadDataIntoDataSet(System.Data.DataSet)">
            <summary>
            Reads the data into the dataset from the DataSetSurrogate object.
            </summary>
            <param name="ds"></param>
        </member>
        <member name="T:IdeaBlade.Persistence.DataTableSurrogate">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.DataTableSurrogate.#ctor(System.Data.DataTable)">
            <summary>
            Constructs a DataTableSurrogate from a DataTable.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.DataTableSurrogate.ConvertToDataTable">
            <summary>
            Constructs a DataTable from DataTableSurrogate. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.DataTableSurrogate.ReadSchemaIntoDataTable(System.Data.DataTable)">
            <summary>
            Reads the schema into the datatable from DataTableSurrogate. 
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.DataTableSurrogate.ReadDataIntoDataTable(System.Data.DataTable)">
            <summary>
            Reads the data into a DataTable from DataTableSurrogate. 
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.DataTableSurrogate.ConvertToDataRow(System.Data.DataTable,System.Int32)">
            <summary>
            Constructs the row, rowError and columnErrors.
            </summary>
            <param name="dt"></param>
            <param name="bitIndex"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Persistence.DataSourceResolver">
            <summary>
            Used by the framework to manage and resolve data source keys.
            </summary>
            <remarks>
            If you use the <see cref="M:IdeaBlade.Persistence.PersistenceManager.InvokeServerMethod(IdeaBlade.Persistence.ServerRpcDelegate,System.Object[])"/>
            to call static server-based methods, those methods will receive a <b>DataSourceResolver</b> as a parameter.  
            You can use the DataSourceResolver to access data source key information, and to obtain an <see cref="T:IdeaBlade.Rdb.AdoHelper"/>.
            <para>
            There is one <b>DataSourceResolver</b> for each extension name used.  
            </para>
            </remarks>
            <example>
		   <code lang="C#">
// Example of a static server method receiving a DataSourceResolver.
[AllowRpc]
public static Object GetNumberOfOrders(IPrincipal pPrincipal, DataSourceResolver pResolver, params Object[] pArgs) {
   // Use the DataSourceResolver to determine key and AdoHelper.
   RdbKey aRdbKey = pResolver.GetDataSourceKey(typeof(Order)) as RdbKey;
   AdoHelper aAdoHelper = aRdbKey.AdoHelper;

   // Use the AdoHelper to build connection and command objects.
   IDbConnection connection = aAdoHelper.CreateConnection(true);
   Object val;
   String sqlText = "select count(*) from OrderSummary";

   using (connection) {
      IDbCommand command = (IDbCommand)aAdoHelper.CreateDbCommand(connection);
      command.CommandText = sqlText;
      command.CommandType = CommandType.Text;
      val = command.ExecuteScalar();
   }
   return val;
}
		   </code>
	   </example><example>
		   <code lang="VB">
' Example of a static server method receiving a DataSourceResolver.
&lt;AllowRpc()&gt; _
Public Shared Function GetNumberOfOrders(ByVal pPrincipal As IPrincipal, ByVal pResolver As DataSourceResolver, ByVal ParamArray pArgs() As [Object]) As [Object]
   ' Use the DataSourceResolver to determine key and AdoHelper.
   Dim aRdbKey As RdbKey = pResolver.GetDataSourceKey(GetType(Order))
   Dim aAdoHelper As AdoHelper = aRdbKey.AdoHelper

   ' Use the AdoHelper to build connection and command objects.
   Dim connection As IDbConnection = aAdoHelper.CreateConnection(True)
   Dim val As [Object] = Nothing
   Dim sqlText As [String] = "select count(*) from OrderSummary"

   Using connection
      Dim command As IDbCommand = aAdoHelper.CreateDbCommand(connection)
      Command.CommandText = sqlText
      Command.CommandType = CommandType.Text
      val = Command.ExecuteScalar()
   End Using
   Return val
End Function
		   </code>
	   </example>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSourceResolver.GetDataSourceExtension(IdeaBlade.Util.IDataSourceKey)">
            <summary>
            Gets the datasource extension for any IDataSourceKey
            </summary>
            <param name="pDsKey"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSourceResolver.GetDataSourceExtension(System.String)">
            <summary>
            Gets the datasource extension for any DataSourceKeyName with an extension
            </summary>
            <param name="pDataSourceKeyNameWithExtension"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSourceResolver.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="pDataSourceExtensionName">The DataSourceExtension name</param>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSourceResolver.GetDataSourceKey(System.Type)">
            <summary>
            Returns the data source key for the specified <see cref="T:IdeaBlade.Persistence.Entity"/> type.
            </summary>
            <param name="pEntityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSourceResolver.GetDataSourceKey(System.String)">
            <summary>
            Returns the data source key for the specified key name.
            </summary>
            <param name="pDataSourceKeyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSourceResolver.GetIdGenerator(System.Type)">
            <summary>
            Returns the ID generator for the specified <see cref="T:IdeaBlade.Persistence.Entity"/> type.
            </summary>
            <param name="pEntityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSourceResolver.GetIdGenerator(System.String)">
            <summary>
            Returns the ID generator for the specified key name.
            </summary>
            <param name="pDataSourceKeyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSourceResolver.GetDataSourceKeyName(System.Type)">
            <summary>
            Returns the data source key name for the specified <see cref="T:IdeaBlade.Persistence.Entity"/> type.
            </summary>
            <param name="pEntityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSourceResolver.Merge(IdeaBlade.Persistence.DataSourceResolver)">
            <summary>
            Merges another DataSourceResolver into this one. 
            </summary>
            <param name="pResolver">resolver</param>
            <remarks>
            IdGenerators are merged only if the current IdGenerator does not contain uncommitted temporary IDs.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.DataSourceResolver.DataSourceExtensionName">
            <summary>
            Gets the name of the data source extension for this resolver.
            </summary>
            <value>The name of the data source extension.</value>
        </member>
        <member name="P:IdeaBlade.Persistence.DataSourceResolver.DataSourceKeyNames">
            <summary>
            Gets the list of data source key names managed by this resolver.
            </summary>
            <value>The data source key names.</value>
        </member>
        <member name="P:IdeaBlade.Persistence.DataSourceResolver.DataSourceKeys">
            <summary>
            Gets the list of data source keys managed by this resolver.
            </summary>
            <value>The data source keys.</value>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.DataSourceResolver.IdGenerators">
            <summary>
            Gets the list of ID generators managed by this resolver.
            </summary>
            <value>The id generators.</value>
        </member>
        <member name="T:IdeaBlade.Persistence.CompressedServerChannelSinkProvider">
            <summary>
            This class supports the IdeaBlade Framework infrastructure 
            and is not intended to be used directly from your code 
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.CompressedServerChannelSinkProvider.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.CompressedServerChannelSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.CompressedServerChannelSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.CompressedServerChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.CompressedServerChannelSinkProvider.Next">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.CompressedClientChannelSinkProvider">
            <summary>
            This class supports the IdeaBlade Framework infrastructure 
            and is not intended to be used directly from your code 
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.CompressedClientChannelSinkProvider.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.CompressedClientChannelSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.CompressedClientChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelSender,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="pChannel"></param>
            <param name="pUrl"></param>
            <param name="pRemoteChannelData"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.CompressedClientChannelSinkProvider.Next">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.CompressedClientChannelSink">
            <summary>
            Implementation of IClientChannelSink that compresses HTTP data. 
            This class supports the IdeaBlade Framework infrastructure 
            and is not intended to be used directly from your code 
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.CompressedClientChannelSink.#ctor(System.Runtime.Remoting.Channels.IClientChannelSink)">
            <summary>
            
            </summary>
            <param name="pNextSink"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.CompressedClientChannelSink.ProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            
            </summary>
            <param name="pMessage"></param>
            <param name="pRequestHeaders"></param>
            <param name="pRequestStream"></param>
            <param name="pResponseHeaders"></param>
            <param name="pResponseStream"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.CompressedClientChannelSink.AsyncProcessRequest(System.Runtime.Remoting.Channels.IClientChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="pSinkStack"></param>
            <param name="pMessage"></param>
            <param name="pHeaders"></param>
            <param name="pStream"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.CompressedClientChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="pSinkStack"></param>
            <param name="pState"></param>
            <param name="pHeaders"></param>
            <param name="pStream"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.CompressedClientChannelSink.GetRequestStream(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>
            
            </summary>
            <param name="pMessage"></param>
            <param name="pHeaders"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.CompressedClientChannelSink.NextChannelSink">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.PersistenceServerProxy">
            <summary>
            This class supports the DevForce Framework infrastructure 
            and is not intended to be used directly from your code. 
            </summary>
            <remarks>
            Each <see cref="T:IdeaBlade.Persistence.PersistenceManager"/> contains a <b>PersistenceServerProxy</b>
            used to communicate with the PersistenceService and a PersistenceServer.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceServerProxy.CreateInstance(IdeaBlade.Persistence.PersistenceManager)">
            <summary>
            Retrieve the correct PersistenceServerProxy based on whether .NET remoting or WCF is used.
            </summary>
            <param name="pm"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceServerProxy.#ctor(System.String,System.Boolean)">
             <summary>
             Create an instance of this class.
             </summary>
            <param name="pDataSourceExtension"></param>
            <param name="pUseRemotePersistenceService"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceServerProxy.Reconnect">
            <summary>
            Connect or reconnect to a PersistenceServer.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceServerProxy.Disconnect">
            <summary>
            Disconnect from a PersistenceServer.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.Entity">
            <summary>
            <c>Abstract</c> (<c>MustInherit</c> in Visual Basic) base class for all persistable business objects used within DevForce.  
            <seealso cref="T:IdeaBlade.Persistence.PersistenceManager"/>
            <seealso cref="T:IdeaBlade.Persistence.EntityQuery"/>
            <seealso cref="T:IdeaBlade.Persistence.EntityTable"/>
            </summary>
            <remarks>
            Instances of <b>Entity</b> are not created directly; instead, every persistable business object type inherits from Entity.
            <para><b>Entity</b> objects are managed and cached by a <see cref="T:IdeaBlade.Persistence.PersistenceManager"/>.
            You'll use a PersistenceManager to create, retrieve and save your entities.  The PersistenceManager
            will also handle serialization and remoting of entities.  
            </para>
            <para>When working with business objects, you will generally focus on creating additional properties 
            to support business logic and rules; basic properties are auto-generated for you by the 
            <b>IdeaBlade DevForce Object Mapping Tool</b> when business objects are designed. 
            You'll modify and delete entities using both auto-generated and custom properties on the business object.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.#ctor(System.Data.DataRowBuilder)">
            <summary>For internal use only.
            </summary>
            <param name="pRowBuilder"></param>
            <remarks>This method is not intended to be used directly from your code, it is used internally
            by the framework.  Entities cannot be constructed using this constructor. 
            <para>Use the <b>Create</b> method stub generated for you in derived classes by the 
            <b>IdeaBlade DevForce Object Mapping Tool</b> to construct business objects.
            </para>
            </remarks>
        </member>
        <member name="F:IdeaBlade.Persistence.Entity.SelfPropertyChangedEventArgs">
            <summary>
            Initialize a static instance of PropertyChangedEventArgs for the object itself.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetDataSourceKeyName(System.Type)">
            <summary>
            
            </summary>
            <param name="pEntityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.Delete">
            <summary>
            Mark this entity for deletion.  (Note that this method shadows the .NET DataRow Delete method 
            in order to provide a virtual implementation - i.e. any DataRow delete method calls will not 
            call this implementation
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.CompareTo(System.Object)">
            <summary>
            Base implementation of <see cref="M:System.IComparable.CompareTo(System.Object)"/>.
            </summary>
            <param name="pObject">Object to compare with this instance</param>
            <returns></returns>
            <remarks>This will compare Entities by <see cref="P:IdeaBlade.Persistence.Entity.PrimaryKey"/>.  Derived classes
            can override this implementation as needed to modify the default sort order of objects of this type.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.Validate">
            <summary>
            Validate this entity. 
            </summary>
            <returns>The result of the validation</returns>
            <remarks>This method should be overridden in subclasses in order to perform
            custom validation logic.
            <para><b>Note:</b> Validate is not automatically called by the framework.</para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.Validate(IdeaBlade.Persistence.EntityValidationContext)">
            <summary>
            Validate this entity. 
            </summary>
            <returns>The result of the validation</returns>
            <remarks>This method should be overridden in subclasses in order to perform
            custom validation logic.
            <para><b>Note:</b> Validate is not automatically called by the framework.</para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.ForcePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Forces a PropertyChanged event to be fired. 
            </summary>
            <param name="pArgs">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> or null</param>
            <remarks>
            An Empty value or a null reference (<c>Nothing</c> in Visual Basic) for the propertyName parameter of 
            PropertyChangedEventArgs indicates that all of the properties have changed, causing 
            the .NET framework to also fire a ListChangedEventArgs.ListChangedType of "Reset" if the event
            propagates to a list that supports the ListChanged event.
            <para>
            Passing a null value to this method will
            insure that a valid (dynamically created) property name is passed on to any listeners.
            </para>
            <para>
            This method should only be needed in situations where changes to calculated fields or other properties 
            not backed by an <see cref="T:IdeaBlade.Persistence.EntityColumn"/> must be made known.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetQuery">
            <summary>
            Constructs an <see cref="T:IdeaBlade.Persistence.EntityQuery"/> that can be used to requery this entity.
            </summary>
            <returns>A new <see cref="T:IdeaBlade.Persistence.EntityQuery"/></returns>
            <remarks>The base implementation of this method returns an <see cref="T:IdeaBlade.Persistence.EntityQuery"/>.  This method
            can be overridden as needed in derived classes.
            <para>
            An EntityQuery built for an Entity backed by a stored procedure or web service method cannot be used
            to query the data source, since specialized implementations of IEntityQuery are required for these
            data sources.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetColumnValues(IdeaBlade.Persistence.EntityColumn[])">
            <summary>
            Retrieve the values of specified columns within this Entity.
            </summary>
            <param name="pEntityColumns">An array of <see cref="T:IdeaBlade.Persistence.EntityColumn"/>s for which values
            are desired</param>
            <returns>An array of data values corresponding to the specified columns</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetColumnValues(System.Data.DataColumn[])">
            <summary>
            Retrieve the values of specified columns within this Entity.
            </summary>
            <param name="pColumns">An array of <see cref="T:System.Data.DataColumn"/>s for which values
            are desired</param>
            <returns>An array of data values corresponding to the specified columns</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetColumnValues(System.String[])">
            <summary>
            Retrieve the values of specified columns within this Entity.
            </summary>
            <param name="pColumnNames">An array of <see cref="T:IdeaBlade.Persistence.EntityColumn"/> names for which values
            are desired</param>
            <returns>An array of data values corresponding to the specified columns</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetColumnValue(System.Data.DataColumn)">
            <summary>
            Retrieve the value of a specified column within this Entity.
            </summary>
            <param name="pColumn"><see cref="T:System.Data.DataColumn"/> whose value is desired</param>
            <returns>The column value or null</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetColumnValue(System.Data.DataColumn,System.Type,System.Boolean)">
            <summary>
            Retrieve the value of a specified column within this Entity.
            </summary>
            <param name="pColumn"><see cref="T:System.Data.DataColumn"/> whose value is desired</param>
            <param name="pOutputType">Type of the output value</param>
            <param name="pAllowNull">Whether null value may be returned</param>
            <returns>Column value </returns>
            <remarks>
            If the <see cref="P:System.Data.DataColumn.DataType"/> is not the same as the 
            output type wanted the <see cref="T:IdeaBlade.Util.TypeTransformManager"/> is used
            to transform the type.
            <para>
            If <paramref name="pAllowNull"/> is <c>true</c>, a null may be returned; if <c>false</c>
            and the value is null the default value for the Type is returned.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetColumnValue(System.String)">
            <summary>
            Retrieve the value of a specified column within this Entity.
            </summary>
            <param name="pColumnName"><see cref="T:IdeaBlade.Persistence.EntityColumn"/> name</param>
            <returns>Column value or null</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetColumnValue``1(System.Data.DataColumn)">
            <summary>
            Returns the strongly typed value of a specified column within this Entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pColumn"><see cref="T:System.Data.DataColumn"/> whose value is desired</param>
            <returns>Strongly typed value</returns>
            <remarks>
            Note: If the column value is <see cref="T:System.DBNull"/>, the <b>default</b> 
            of the Type is returned: this will be <c>null</c> for reference types and zero for numeric value types. 
            For structs, each member of the struct is initialized to zero or null depending on whether it is a value or reference type.
            If you are working with a nullable column containing a value type and this behavior is not wanted, use the 
            non-generic <see cref="M:IdeaBlade.Persistence.Entity.GetColumnValue(System.Data.DataColumn)"/> method or the <see cref="M:IdeaBlade.Persistence.Entity.GetColumnValueNullable``1(System.Data.DataColumn)"/> method instead.
            <para>The simple properties generated for the entity by the <b>IdeaBlade DevForce Object Mapping Tool</b>
            use this <b>GetColumnValue</b> overload in their getter methods.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetColumnValueNullable``1(System.Data.DataColumn)">
            <summary>
            Returns the strongly typed value of a specified column within this Entity.
            </summary>
            <typeparam name="T">A structure type</typeparam>
            <param name="pColumn"><see cref="T:System.Data.DataColumn"/> whose value is desired</param>
            <returns>A nullable structure type</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.SetColumnValue(System.Data.DataColumn,IdeaBlade.Persistence.Entity,System.Data.DataColumn)">
            <overloads>Sets the value of a given column.
            </overloads>
             <summary>
             Sets the value of a given column based on the value of a column in another entity.
             </summary>
             <param name="pSetColumn">The <see cref="T:System.Data.DataColumn"/> in this entity whose value is to be set</param>
             <param name="pValueEntity">The entity from which the value is to come</param>
             <param name="pValueColumn">The <see cref="T:System.Data.DataColumn"/> in the 
             <paramref name="pValueEntity"/> where the value is to come from </param>
             <remarks>
             If <paramref name="pValueEntity"/> is a <see cref="P:IdeaBlade.Persistence.Entity.NullEntity"/>, the target column value
             will be set to null if the database column is nullable, otherwise the 
             NullEntity column value is used.
             <para>The relational properties generated for the entity by the <b>IdeaBlade DevForce Object Mapping Tool</b>
             use this <b>SetColumnValue</b> overload in their setter methods.
             </para>
             </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.SetColumnValue(System.Data.DataColumn,System.Object)">
            <summary>
            Sets the value of a given column.
            </summary>
            <param name="pSetColumn">The <see cref="T:System.Data.DataColumn"/> in this entity whose value is to be set</param>
            <param name="pValue">New column value</param>
            <remarks>This will handle null conversion, and not set the value if it is unchanged.
            <para>The simple properties generated for the entity by the <b>IdeaBlade DevForce Object Mapping Tool</b>
            use this <b>SetColumnValue</b> overload in their setter methods.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.SetColumnValueTransformed(System.Data.DataColumn,System.Object)">
            <summary>
            Sets the transformed column value.
            </summary>
            <param name="pSetColumn">The <see cref="T:System.Data.DataColumn"/> in this entity whose value is to be set</param>
            <param name="pValue">Pre-transform value to set</param>
            <remarks>
            The input value will be transformed by the <see cref="T:IdeaBlade.Util.TypeTransformManager"/> into the 
            <see cref="T:System.Data.DataColumn.DataType"/> of the column.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetDisplayName(IdeaBlade.Persistence.EntityColumn)">
            <overloads>Gets the display name for the specified column.
            </overloads>
             <summary>
             Gets the display name for any given <see cref="T:IdeaBlade.Persistence.EntityColumn"/>.
             </summary>
             <param name="pColumn">The column for which a display name is desired</param>
             <returns>The localized display name for the specified column</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetDisplayName(System.Data.DataColumn)">
            <summary>
            Gets the display name for the specified <see cref="T:System.Data.DataColumn"/>.
            </summary>
            <param name="pColumn">The column for which a display name is desired</param>
            <returns>The localized display name for the specified column</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetDisplayName(System.String)">
            <summary>
            Gets the display name for the specified column name.
            </summary>
            <param name="pColumnName">The column for which a display name is desired</param>
            <returns>The localized display name for the specified column</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.Undo">
            <summary>
            Undo any changes to the entity.
            <seealso cref="M:System.Data.DataRow.RejectChanges"/>
            <seealso cref="M:IdeaBlade.Persistence.Entity.RemoveFromManager"/>
            </summary>
            <remarks>
            Rejects any changes made to the Entity since the last save operation.
            This will also remove the Entity from the <b>PersistenceManager</b> if it was an 'added' object.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.AddToManager">
            <summary>
            Adds a newly created entity to the <see cref="T:IdeaBlade.Persistence.PersistenceManager"/>.
            </summary>
            <remarks>There is no difference between <b>AddToManager</b> and 
            <see cref="M:IdeaBlade.Persistence.PersistenceManager.AddEntity(IdeaBlade.Persistence.Entity)"/>.
            Use either method to add a business object created by the <see cref="M:IdeaBlade.Persistence.PersistenceManager.CreateEntity(System.Type)"/> method
            to the PersistenceManager cache.  The object must have a "detached" <see cref="P:IdeaBlade.Persistence.Entity.RowState"/>, 
            and if <see cref="P:IdeaBlade.Persistence.PersistenceManager.EnforceConstraints"/> is set must conform to all constraints. 
            </remarks>
            <example><code lang="C#">
// Sample showing creation of a new entity via CreateEntity, and
// adding to the PersistenceManager cache.

PersistenceManager pm = PersistenceManager.DefaultManager;
// Retrieve an order
Order order = pm.GetEntity&lt;Order&gt;(new PrimaryKey(typeof(Order), 10250));
// Retrieve a product
Product product = pm.GetEntity&lt;Product&gt;(new PrimaryKey(typeof(Product), 1));

// Create an OrderDetail 
OrderDetail dtl = pm.CreateEntity&lt;OrderDetail&gt;();
// Assign key fields
dtl.Order = order;
dtl.Product = product;

// Add the OrderDetail to the PersistenceManager cache
DebugFns.WriteLine("row state before add = " + dtl.RowState);
dtl.AddToManager();
DebugFns.WriteLine("row state after add = " + dtl.RowState);
</code></example><example><code lang="VB">
' Sample showing creation of a new entity via CreateEntity, and
' adding to the PersistenceManager cache.

Dim pm As PersistenceManager = PersistenceManager.DefaultManager
' Retrieve an order
Dim order As Order = pm.GetEntity(Of Order)(New PrimaryKey(GetType(Order), 10250))
' Retrieve a product
Dim product As Product = pm.GetEntity(Of Product)(New PrimaryKey(GetType(Product), 1))

' Create an OrderDetail 
Dim dtl As OrderDetail = pm.CreateEntity(Of OrderDetail)()
' Assign key fields
dtl.Order = order
dtl.Product = product

' Add the OrderDetail to the PersistenceManager cache
DebugFns.WriteLine("row state before add = " + dtl.RowState.ToString())
dtl.AddToManager()
DebugFns.WriteLine("row state after add = " + dtl.RowState.ToString())
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.RemoveFromManager">
             <summary>
             Removes the entity from the PersistenceManager cache.
             </summary>
             <remarks>The Entity will be in a "detached" state after the remove. 
             <b>RemoveFromManager</b> and <see cref="M:IdeaBlade.Persistence.PersistenceManager.RemoveEntity(IdeaBlade.Persistence.Entity)"/>
              can be used interchangeably. Calling <b>RemoveFromManager</b> also clears the PersistenceManager's <see cref="P:IdeaBlade.Persistence.PersistenceManager.QueryCache"/>.
            <para>This does not delete the object from the backend server.  To delete an entity,
            use the <see cref="M:IdeaBlade.Persistence.Entity.Delete"/> method.</para>
             </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.SaveSecurityCheck(System.Security.Principal.IPrincipal)">
            <summary>
            Override to perform a server-side security check during PersistenceManager.<see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/>
            processing.
            </summary>
            <param name="pPrincipal"></param>
            <remarks>If <see cref="P:IdeaBlade.Persistence.Entity.SaveSecurityEnabled"/> returns true, the <b>SaveSecurityCheck</b> method 
            is called during save processing prior to saving to the backend data source.
            If a security check for an entity fails, you should
            throw an exception to stop further save processing.  Any type of pre-save processing
            can be done in this method, but will not participate in the save transaction if a 
            transactional save was requested.
            </remarks>
            <example><code lang="C#">
// Sample showing overrides to SaveSecurityEnabled and SaveSecurityCheck within a Customer class
public class Customer : CustomerDataRow {	
//....

   public override bool SaveSecurityEnabled {
      get { return true; }
   }
 
   public override void SaveSecurityCheck(IPrincipal pPrincipal) {      
      if (!pPrincipal.IsInRole("BigWig")) {
        throw new PersistenceSecurityException("User lacks sufficient privileges to save this object.");
      }
   }
}
	</code></example><example><code lang="VB">
' Sample showing overrides to SaveSecurityEnabled and SaveSecurityCheck within a Customer class
Public Class Customer : Inherits CustomerDataRow
   '....
   Public Overrides ReadOnly Property SaveSecurityEnabled() As Boolean
      Get
         Return True
      End Get
   End Property
    
   Public Overrides Sub SaveSecurityCheck(pPrincipal As IPrincipal)
      If Not pPrincipal.IsInRole("BigWig") Then
         Throw New PersistenceSecurityException("User lacks sufficient privileges to save this object.")
      End If
   End Sub 
End Class 
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.QuerySecurityCheck(System.Security.Principal.IPrincipal,IdeaBlade.Persistence.IEntityQuery)">
            <summary>
            Override to perform a server-side security check prior to execution of an <see cref="T:IdeaBlade.Persistence.EntityQuery"/>.
            </summary>
            <param name="pPrincipal"></param>
            <param name="pEntityQuery">Query to be executed</param>
            <remarks>If <see cref="P:IdeaBlade.Persistence.Entity.QuerySecurityEnabled"/> returns true, the <b>QuerySecurityCheck</b> method 
            is called prior to execution of an <see cref="T:IdeaBlade.Persistence.EntityQuery"/> whose <see cref="P:IdeaBlade.Persistence.EntityQuery.EntityType"/> 
            is of this subtype.  
            If a security check for the query fails, you should throw an exception to stop the query from executing.  
            </remarks>
            <example><code lang="C#">
// Sample showing overrides to QuerySecurityEnabled and QuerySecurityCheck within a Customer class
public class Customer : CustomerDataRow {	
//....    
    
   public override bool QuerySecurityEnabled {
      get { return true; }
   }

   public override void QuerySecurityCheck(IPrincipal pPrincipal, IEntityQuery pQuery) {
      RdbQuery aQuery = pQuery as RdbQuery;

      if (aQuery.ContainsSubquery &amp;&amp; !pPrincipal.IsInRole("PatientPerson")) {
        throw new PersistenceSecurityException("Subqueries on customer are too time-consuming for you.");
      }
   }    
}   
</code></example><example><code lang="VB">
' Sample showing overrides to QuerySecurityEnabled and QuerySecurityCheck within a Customer class
Public Class Customer : Inherits CustomerDataRow
   '....    
   Public Overrides ReadOnly Property QuerySecurityEnabled() As Boolean
      Get
         Return True
      End Get
   End Property
    
   Public Overrides Sub QuerySecurityCheck(ByVal pPrincipal As IPrincipal, ByVal pQuery As IEntityQuery)
      Dim aQuery As RdbQuery = CType(pQuery, RdbQuery)
      If aQuery.ContainsSubquery AndAlso Not pPrincipal.IsInRole("PatientPerson") Then
         Throw New PersistenceSecurityException("Subqueries on customer are too time-consuming for you.")
      End If
   End Sub 
End Class 
      </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetManagedChildren``1(IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Returns a <see cref="T:IdeaBlade.Persistence.ReadOnlyEntityList`1"/> of child entities for this entity and a given <see cref="T:IdeaBlade.Persistence.EntityRelation"/>.
            </summary>
            <param name="pEntityRelation">The relation to be used to retrieve the children</param>
            <param name="pStrategy">QueryStrategy to use</param>
            <returns>A list of child entities</returns>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> defining the relationship between parent and child objects
            is usually set up using the <b>IdeaBlade DevForce Object Mapping Tool</b>.  The Mapping tool will also automatically generate
            parent and child relation properties for all relationships defined.
            <para>
            This is functionally equivalent to 
            <see cref="M:PersistenceManager.GetChildren``1(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy,System.Boolean)"/>
            where a managed list is requested.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetManagedChildren``1(IdeaBlade.Persistence.EntityRelation)">
            <summary>
            Returns a <see cref="T:IdeaBlade.Persistence.ReadOnlyEntityList`1"/> of child entities for this entity and a given <see cref="T:IdeaBlade.Persistence.EntityRelation"/>
            using the <see cref="P:PersistenceManager.DefaultQueryStrategy"/>.
            </summary>
            <param name="pEntityRelation">The relation to be used to retrieve the children</param>
            <returns>A list of child entities</returns>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> defining the relationship between parent and child objects
            is usually set up using the <b>IdeaBlade DevForce Object Mapping Tool</b>.  The Mapping tool will also automatically generate
            parent and child relation properties for all relationships defined.
            <para>
            This is functionally equivalent to 
            <see cref="M:PersistenceManager.GetChildren``1(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy,System.Boolean)"/>
            where a managed list is requested.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetParent``1(IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Returns the parent of this entity given an EntityRelation and QueryStrategy.
            </summary>
            <typeparam name="T">Type of parent entity</typeparam>
            <param name="pRelation">EntityRelation to use</param>
            <param name="pStrategy">QueryStrategy</param>
            <returns>Parent entity</returns>
            <remarks>
            This is functionally equivalent to 
            <see cref="M:PersistenceManager.GetParent``1(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)">PersistenceManager.GetParent&lt;T&gt;</see>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetChild``1(IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Returns a single child Entity given the EntityRelation and QueryStrategy.
            </summary>
            <typeparam name="T">Type of child entity</typeparam>
            <param name="pEntityRelation">EntityRelation to use</param>
            <param name="pQueryStrategy">QueryStrategy</param>
            <returns>Child entity</returns>
            <remarks>
            This is functionally equivalent to 
            <see cref="M:PersistenceManager.GetChild``1(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)">PersistenceManager.GetChild&lt;T&gt;</see>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetChildren``1(IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Returns an array of child entities given the EntityRelation and QueryStrategy.
            </summary>
            <typeparam name="T">Type of child entity</typeparam>
            <param name="pEntityRelation">EntityRelation to use</param>
            <param name="pQueryStrategy">QueryStrategy</param>
            <returns>Array of child entities</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.IsChildOf(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation)">
            <summary>
            Determines if this entity is a child of a specific entity via a specified relation.
            </summary>
            <param name="pParentEntity"></param>
            <param name="pEntityRelation"></param>
            <returns><c>True</c> if this entity is a child of <paramref name="pParentEntity"/></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.IsParentOf(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation)">
            <summary>
            Determines if this entity is a parent of a specific entity via a specified relation.
            </summary>
            <param name="pChildEntity"></param>
            <param name="pEntityRelation"></param>
            <returns><c>True</c> if this entity is a parent of <paramref name="pChildEntity"/></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetSchema(System.Xml.Schema.XmlSchemaSet,System.Type)">
            <summary>
            Required by the XmlSchemaProviderAttribute.  Internal use only.
            </summary>
            <param name="pSchemaSet"></param>
            <param name="pType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetSchema">
            <summary>
            Implements IXmlSerialiable.GetSchema.  Internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.ReadXml(System.Xml.XmlReader)">
            <summary>
            Implements IXmlSerializable.ReadXml.  Internal use only.
            </summary>
            <param name="pReader"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Implements IXmlSerializable.WriteXml.  Internal use only.
            </summary>
            <param name="pWriter"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetDataErrorInfo">
             <summary>
             Returns an error message indicating what is wrong with this entity.
             </summary>
             <returns>
             An error message indicating what is wrong with this entity. 
             The default is an empty string ("").
            </returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetDataErrorInfo(System.String)">
            <summary>
            Returns error message for the property with the given name.
            </summary>
            <param name="pPropertyName">The name of the property whose error message to get.</param>
            <returns>
            The error message for the property. The default is an empty string ("").
            </returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.BeforeSetValue(System.String,System.Object)">
            <summary>
            Override this method to perform any logic before a column value is set.  Make sure to
            call the base implementation if you want any registered preset verifiers to execute.
            </summary>
            <param name="pPropertyName"></param>
            <param name="pProposedValue"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.AfterSetValue(System.String)">
            <summary>
            /// Override this method to perform any logic after a column value is set.  Make sure to
            call the base implementation if you want any registered postset verifiers to execute.
            </summary>
            <param name="pPropertyName"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetInterceptor``1(System.String,IdeaBlade.Persistence.Entity.PropertyGetterCore{``0},``0@)">
            <summary>
            Overridable interceptor method called by all Entity property getters.
            </summary>
            <typeparam name="T">Type of property value</typeparam>
            <param name="pPropertyName">Name of property</param>
            <param name="pGetter">Delegate to be called to perform property Get</param>
            <param name="result">Returned property value if intercepted</param>
            <returns>True if intercepted</returns>
            <remarks>
            You can override this method in your derived classes to perform field-level
            interception and authorization.  If you handle or otherwise "intercept"
            the property retrieval, set the <paramref name="result"/> parameter and 
            return true so that the default property getter is not also called.
            You can call the <paramref name="pGetter"/> delegate to obtain the property value.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.SetInterceptor``1(System.String,``0,IdeaBlade.Persistence.Entity.PropertySetterCore{``0})">
            <summary>
            Overridable interceptor method called by all Entity property setters.
            </summary>
            <typeparam name="T">Type of property value</typeparam>
            <param name="pPropertyName">Name of property</param>
            <param name="pValue">Value to be set</param>
            <param name="pSetter">Delegate to be called to perform property Set</param>
            <remarks>
            You can override this method in your derived classes to perform field-level
            interception and authorization. If you handle or otherwise "intercept"
            the property setting, return true so that the default property setter is not also called.
            You can call the <paramref name="pSetter"/> delegate to set the property value.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.OnColumnChanging(System.Data.DataColumnChangeEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.Persistence.Entity.ColumnChanging"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.OnColumnChanged(System.Data.DataColumnChangeEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.Persistence.Entity.ColumnChanged"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.Persistence.Entity.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.UpdateNullEntity">
            <summary>
            Provided to allow subclasses to add their own behavior when creating a null entity.
            </summary>
            <example><code lang="C#">
// Sample showing override of UpdateNullEntity in the Customer entity
// to provide NullEntity customization.
public class Customer : CustomerDataRow {	
//....
   // Provide custom implementation for NullEntity
   protected override void UpdateNullEntity() {
      this.CompanyName = "{N/A}";
   }
}
	</code></example><example><code lang="VB">
' Sample showing override of UpdateNullEntity in the Customer entity
' to provide NullEntity customization.
Public Class Customer : Inherits CustomerDataRow
   '....
   ' Provide custom implementation for NullEntity
   Protected Overrides Sub UpdateNullEntity()
      Me.CompanyName = "{N/A}"
   End Sub 
End Class 
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetColumnValues(System.Collections.IEnumerable,IdeaBlade.Persistence.EntityColumn)">
             <summary>
            
             </summary>
             <param name="pEntities"></param>
             <param name="pEntityColumn"></param>
             <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Entity.GetColumnValues(System.Collections.IEnumerable,IdeaBlade.Persistence.EntityColumn[])">
            <summary>
            
            </summary>
            <param name="pEntities"></param>
            <param name="pValueColumns"></param>
            <returns></returns>
        </member>
        <member name="F:IdeaBlade.Persistence.Entity.mPrimaryKey">
            <value>
            The PrimaryKey for this entity
            </value>
        </member>
        <member name="F:IdeaBlade.Persistence.Entity.mIsNullEntity">
            <value>
            Whether this instance is the null entity for this entity type
            </value>
        </member>
        <member name="E:IdeaBlade.Persistence.Entity.ColumnChanging">
            <summary>
            Occurs when the data in a column changes.
            </summary>
        </member>
        <member name="E:IdeaBlade.Persistence.Entity.ColumnChanged">
            <summary>
            Occurs after the data in a column changes.
            </summary>
        </member>
        <member name="E:IdeaBlade.Persistence.Entity.PropertyChanged">
            <summary>
            Occurs when a property value has changed.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.TypedTable">
            <summary>
            Returns a typed <see cref="T:IdeaBlade.Persistence.EntityTable"/> specific to the Entity type.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.VerifierEngine">
            <summary>
            Gets the <see cref="T:IdeaBlade.Verification.VerifierEngine"/>
            shared by all entities within the same PersistenceManager.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.IsDeserializing">
            <summary>
            Returns <c>true</c> if the Entity is currently in the process of deserialization.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.IsDetached">
            <summary>
            Returns <c>true</c> if the Entity is <see cref="F:System.Data.DataRowState.Detached"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.WasDetached">
            <summary>
            Whether this entity is detached as a result of being detached
            or rather was never attached in the first place 
            true = created, attached and then detached
            false = created but never attached
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.IsUnderConstruction">
            <summary>
            Whether the entity is currently under construction - i.e. created but not yet added to the 
            persistence manager - an object that is removed from a pm is not underconstruction; it is just
            detached
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.ChangeOccuredAfterConstruction">
            <summary>
            Whether if the most recent change to the entity occured after the entity was fully constructed
            this is needed because the ColumnChanged events occur before a rowstate change but the RowChanged
            event occurs after. This means that the RowChanged event cannot tell if the change that it is 
            processing occured before or after the RowState change.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.PrimaryKey">
            <summary>
            The <see cref="P:IdeaBlade.Persistence.Entity.PrimaryKey"/> for this entity. 
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.PrimaryKeyHasChanged">
            <summary>
            Returns whether the primary key for this Entity has changed.
            </summary>
            <remarks>
            Returns <c>false</c> for Detached, Added and Deleted objects because the change 
            state is either meaningless or cannot be determined.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.PersistenceManager">
            <summary>
            The <see cref="P:IdeaBlade.Persistence.Entity.PersistenceManager"/> that manages this entity.
            </summary>
            <remarks>
            When the entity is referenced from the <b>Business Object Server</b> the value of this
            property will usually be null.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.IsNullEntity">
            <summary>
            Returns whether the current instance is a null entity.
            <seealso cref="P:IdeaBlade.Persistence.Entity.NullEntity"/>
            </summary>
            <remarks>The PersistenceManager.<see cref="M:IdeaBlade.Persistence.PersistenceManager.GetEntity(IEntityQuery)">GetEntity</see>
            method will return a null entity when the requested object cannot be found.
            </remarks>
            <example><code lang="C#">
// Sample showing IsNullEntity check.
PersistenceManager pm = PersistenceManager.DefaultManager;
// Try to retrieve order #1 
Order order = pm.GetEntity&lt;Order&gt;(new PrimaryKey(typeof(Order), 1));
if (order.IsNullEntity)
  MessageBox.Show("Order 1 not found.");
else
  MessageBox.Show("Order 1 date is " + order.OrderDate.Value.ToShortDateString());
</code></example><example><code lang="VB"> 
' Sample showing IsNullEntity check.
Dim pm As PersistenceManager = PersistenceManager.DefaultManager
' Try to retrieve order #1 
Dim order As Order = pm.GetEntity(Of Order)(New PrimaryKey(GetType(Order), 1))
If order.IsNullEntity Then
   MessageBox.Show("Order 1 not found.")
Else
   MessageBox.Show("Order 1 date is " + order.OrderDate.Value.ToShortDateString())
End If
	</code></example>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.NullEntity">
            <summary>
            The null instance of this entity type. 
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.GetNullEntity(System.Type)"/>
            </summary>
            <remarks>Every entity type has a default 'null' entity, which can be overridden using
            <see cref="M:IdeaBlade.Persistence.Entity.UpdateNullEntity"/>.
            A null entity has all of the characteristics of a real entity except
            that it is immutable and is never persisted. 
            <para>You may use <b>NullEntity</b> and <see cref="M:IdeaBlade.Persistence.PersistenceManager.GetNullEntity(System.Type)"/> interchangeably. 
            </para>
            </remarks>
            <example><code lang="C#">
// Sample showing override of UpdateNullEntity in the Customer entity
// to provide NullEntity customization.
public class Customer : CustomerDataRow {	
//....
   // Provide custom implementation for NullEntity
   protected override void UpdateNullEntity() {
      this.CompanyName = "{N/A}";
   }
}
	</code></example><example><code lang="VB">
' Sample showing override of UpdateNullEntity in the Customer entity
' to provide NullEntity customization.
Public Class Customer : Inherits CustomerDataRow
   '....
   ' Provide custom implementation for NullEntity
   Protected Overrides Sub UpdateNullEntity()
      Me.CompanyName = "{N/A}"
   End Sub 
End Class 
	</code></example>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.SaveSecurityEnabled">
            <summary>
            Determines whether the <see cref="M:IdeaBlade.Persistence.Entity.SaveSecurityCheck(System.Security.Principal.IPrincipal)"/> override should be called.
            </summary>
            <remarks>
            <b>SaveSecurityEnabled</b> and <see cref="M:IdeaBlade.Persistence.Entity.SaveSecurityCheck(System.Security.Principal.IPrincipal)"/> should
            be overridden in subclasses which need to implement server-side security.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.QuerySecurityEnabled">
            <summary>
            Determines whether the <see cref="M:IdeaBlade.Persistence.Entity.QuerySecurityCheck(System.Security.Principal.IPrincipal,IdeaBlade.Persistence.IEntityQuery)"/> override should be called.
            </summary>
            <remarks>
            <b>QuerySecurityEnabled</b> and <see cref="M:IdeaBlade.Persistence.Entity.QuerySecurityCheck(System.Security.Principal.IPrincipal,IdeaBlade.Persistence.IEntityQuery)"/> should
            be overridden in subclasses which need to implement server-side security.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.RowError">
            <summary>
            Gets or sets the custom error description for an entity.  
            </summary>
            <remarks>Functionally equivalent to DataRow.<see cref="P:System.Data.DataRow.RowError"/>.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.HasErrors">
            <summary>
            Gets a value indicating whether there are errors in this entity.
            </summary>
            <remarks>Functionally equivalent to DataRow.<see cref="P:System.Data.DataRow.HasErrors"/>.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.RowState">
            <summary>
            Gets the <see cref="P:System.Data.DataRow.RowState"/> of the entity.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.System#ComponentModel#IDataErrorInfo#Error">
            <summary>
            Returns an error message indicating what is wrong with this entity.
            </summary>
            <returns>
            An error message indicating what is wrong with this entity. 
            The default is an empty string ("").
            </returns>
            <remarks>
            You can override the behavior of this method in your derived classes
            by overriding the <see cref="M:IdeaBlade.Persistence.Entity.GetDataErrorInfo"/> method.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.System#ComponentModel#IDataErrorInfo#Item(System.String)">
            <summary>
            Returns error message for the property with the given name.
            </summary>
            <param name="columnName">The name of the property whose error message to get.</param>
            <returns>
            The error message for the property. The default is an empty string ("").
            </returns>
            <remarks>
            You can override the behavior of this method in your derived classes
            by overriding the <see cref="M:IdeaBlade.Persistence.Entity.GetDataErrorInfo(System.String)"/> method.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.GetSecurityHashCode">
            <summary>
            Hash used to check whether the before image of a data has been tampered with.  This method
            can be overridden to provide a more secure hash if desired.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.Entity.EncryptedSecurityHashCode">
            <summary>
            Used internally by the PersistenceServer to store and retrieve an encrypted version of the
            hash.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.Entity.PropertyGetterCore`1">
            <summary>
            Delegate to a function to be used to retrieve a property value from the Entity.
            </summary>
            <typeparam name="T">Type of property value</typeparam>
            <returns>Property value</returns>
            <remarks>
            A <b>PropertyGetterCore</b> delegate is passed to the overridable 
            <see cref="M:IdeaBlade.Persistence.Entity.GetInterceptor``1(System.String,IdeaBlade.Persistence.Entity.PropertyGetterCore{``0},``0@)"></see> method.   
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.Entity.PropertySetterCore`1">
            <summary>
            Delegate to a function to be used to set a property value on the Entity.
            </summary>
            <typeparam name="T">Type of property value</typeparam>
            <param name="value">Property value to be set</param>
            <remarks>
            A <b>PropertySetterCore</b> delegate is passed to the overridable 
            <see cref="M:IdeaBlade.Persistence.Entity.SetInterceptor``1(System.String,``0,IdeaBlade.Persistence.Entity.PropertySetterCore{``0})"></see> method.   
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityOrderBy">
            <summary>
            Represents an "order by" statement in an <see cref="T:IdeaBlade.Persistence.EntityQuery"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityOrderBy.#ctor(IdeaBlade.Persistence.EntityColumn,System.ComponentModel.ListSortDirection)">
            <summary>
            Initializes a new instance of the EntityOrderBy class for the specified column and direction.
            </summary>
            <param name="pColumn">Entity column to order results by</param>
            <param name="pSortDirection">Order by direction</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityOrderBy.#ctor(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Initializes a new instance of the EntityOrderBy class for the specified column name and direction.
            </summary>
            <param name="pColumnName">Entity column name to order results by</param>
            <param name="pSortDirection">Order by direction</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityOrderBy.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityOrderBy.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityOrderBy.ColumnName">
            <summary>
            Gets or sets the name of the order by column.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityOrderBy.SortDirection">
            <summary>
            Gets or sets the order by direction.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.Compression">
            <summary>
            This class supports the IdeaBlade Framework infrastructure 
            and is not intended to be used directly from your code 
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.Compression.Compress(System.IO.Stream)">
            <summary>
            Compresses the specified data stream.
            </summary>
            <param name="pDataStream">data stream</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.Compression.Decompress(System.IO.Stream)">
            <summary>
            Decompresses the specified compressed data stream.
            </summary>
            <param name="pCompressedDataStream">compressed data stream</param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityValidationContext">
            <summary>
            Context object that is passed to the Entity.Validate method to provide 
            the context under which the validation is being performed.  This class may  
            be subclassed to add additional information or behaviors beyond that provided
            by the base.
            This class will likely be extended in future releases of IdeaBlade.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.EntityValidationContext.Empty">
            <summary>
            An "Null" EntityValidationContext
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityValidationContext.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the EntityValidationContext class
            </summary>
            <param name="pValidationParameter"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityValidationContext.ValidationParameter">
            <summary>
            A used defined value that is intended to allow a developer to pass custom
            data into the Validation process.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.IPersistenceServerSaved">
            <summary>
            Interface for intercepting the save operation after the transaction has occurred on the server.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.IPersistenceServerSaved.OnSaved(IdeaBlade.Persistence.PersistenceServerSavedEventArgs)">
            <summary>
            Called after save transaction occurs on the server.
            </summary>
            <remarks>
            The event handler can use the <see cref="P:IdeaBlade.Persistence.PersistenceServerSavedEventArgs.PersistenceManager"/> 
            to access the PersistenceManager containing the list of entities that were saved.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.PersistenceServerSavedEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.Persistence.IPersistenceServerSaved.OnSaved"/> handler.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceServerSavedEventArgs.#ctor(System.Security.Principal.IPrincipal,IdeaBlade.Persistence.PersistenceManager,System.Object)">
            <summary>
            Initialize a new instance of this class. 
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerSavedEventArgs.Principal">
            <summary>
            Gets of sets the Principal involved in this event.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerSavedEventArgs.PersistenceManager">
            <summary>
            Gets the server-side PersistenceManager involved in this event.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerSavedEventArgs.Context">
            <summary>
            Gets or sets the Context object involved in this event.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerSavedEventArgs.SaveSuccessful">
            <summary>
            Gets whether or not the save succeeded.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerSavedEventArgs.SaveException">
            <summary>
            Gets the Exception thrown by the save transaction.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.SaveOperation">
            <summary>
            Returns the kind of operation performed during a <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/> call.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.SaveOperation.NoOperation">
            <summary>
            No entities to save. 
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.SaveOperation.Cancelled">
            <summary>
            The save was cancelled.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.SaveOperation.Normal">
            <summary>
            The save was processed normally.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.SaveResult">
            <summary>
            The result of a <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/> call. 
            <seealso cref="T:IdeaBlade.Persistence.PersistenceManager"/>
            </summary>
            <remarks><b>SaveResult</b> indicates whether the save succeeded or failed, and if it failed 
            the entities involved and/or any exception encountered.
            <para>
            The <see cref="T:IdeaBlade.Persistence.SaveOptions"/> used during the <b>SaveChanges</b> call will determine whether
            the <b>SaveResult</b> is returned if an error occurs.  
            </para>
            </remarks>
        </member>
        <member name="F:IdeaBlade.Persistence.SaveResult.NoOperation">
            <summary>
            Static instance of a NoOperation successful SaveResult.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.SaveResult.Cancelled">
            <summary>
            Static instance of a cancelled SaveResult.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.SaveResult.#ctor(System.Collections.Generic.IList{IdeaBlade.Persistence.Entity},System.Exception)">
            <summary>
            Initializes a new instance of the SaveResult class.
            </summary>
            <param name="pEntitiesWithErrors">Entities with errors</param>
            <param name="pException">Exception</param>
        </member>
        <member name="M:IdeaBlade.Persistence.SaveResult.#ctor(System.Collections.Generic.IList{IdeaBlade.Persistence.Entity},System.Exception,IdeaBlade.Persistence.SaveOperation)">
            <summary>
            Initializes a new instance of the SaveResult class.
            </summary>
            <param name="pEntitiesWithErrors">Entities with errors</param>
            <param name="pException">Exception</param>
            <param name="pOperation">Operation</param>
        </member>
        <member name="M:IdeaBlade.Persistence.SaveResult.ToString">
            <summary>
            Human readable representation of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.SaveResult.EntitiesWithErrors">
            <summary>
            A list of any <see cref="T:IdeaBlade.Persistence.Entity"/> objects that failed during the save process.   
            </summary>
            <remarks>Each of these entities
            has a RowError property that contains the actual error encountered during the save
            of that entity.
            <para>
            Note that the length of the list of errors 
            returned in the SaveResult will be determined by the transactional nature of the save
            being attempted. In a transactional save, the first failure causes a rollback of the
            entire operation and only this first error will be returned in the SaveResult.  In
            a nontransactional save all of the errors encountered during the save will be returned.  
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.SaveResult.InternalException">
            <summary>
            Used internally to get or set the Exception value.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.SaveResult.Exception">
            <summary>
            Exception encountered during the save process.
            </summary>
            <remarks>It is possible for errors to occur during the save process that cannot
            be localized to a specific entity.  Any errors of this kind force an immediate
            end to the save process and the exception encountered will be available here.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.SaveResult.SaveOperation">
            <summary>
            Returns the kind of operation performed during this save.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.SaveResult.Ok">
            <summary>
            Returns whether or not the save succeeded.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.SaveResult.WasCancelled">
            <summary>
            Gets a value indicating whether the operation was cancelled.
            </summary>
            <value><c>true</c> if was cancelled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:IdeaBlade.Persistence.NullIdGenerator">
             <summary>
             The default, "null" implementation of the IIdGenerator interface.  Internal use only.
             </summary>
            <remarks>
             Used internally
             when an application has not implemented the <see cref="T:IdeaBlade.Persistence.IIdGenerator"/> interface.
             This class supports the DevForce Framework infrastructure and is not intended 
             to be used directly from your code.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.NullIdGenerator.#ctor">
            <summary>
            Initializes a new instance of the NullIdGenerator class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.NullIdGenerator.IsApplicable(IdeaBlade.Util.IDataSourceKey)">
            <summary>
            See <see cref="M:IdeaBlade.Persistence.IIdGenerator.IsApplicable(IdeaBlade.Util.IDataSourceKey)"/>.
            </summary>
            <param name="pDsKey"></param>
            <returns>Always returns false</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.NullIdGenerator.GetNextTempId(IdeaBlade.Persistence.EntityColumn)">
            <summary>
            See <see cref="M:IdeaBlade.Persistence.IIdGenerator.GetNextTempId(IdeaBlade.Persistence.EntityColumn)"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.NullIdGenerator.IsTempId(IdeaBlade.Persistence.UniqueId)">
            <summary>
            See <see cref="M:IdeaBlade.Persistence.IIdGenerator.IsTempId(IdeaBlade.Persistence.UniqueId)"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.NullIdGenerator.Reset">
            <summary>
            See <see cref="M:IdeaBlade.Persistence.IIdGenerator.Reset"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.NullIdGenerator.GetRealIdMap(IdeaBlade.Persistence.UniqueIdCollection,IdeaBlade.Util.IDataSourceKey)">
            <summary>
            See <see cref="M:IdeaBlade.Persistence.IIdGenerator.GetRealIdMap(IdeaBlade.Persistence.UniqueIdCollection,IdeaBlade.Util.IDataSourceKey)"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.NullIdGenerator.TempIds">
            <summary>
            See <see cref="P:IdeaBlade.Persistence.IIdGenerator.TempIds"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.LoginExceptionType">
            <summary>
            Enumeration of standard <see cref="M:IdeaBlade.Persistence.PersistenceManager.Login(IdeaBlade.Persistence.ILoginCredential)"/> failures.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.LoginExceptionType.None">
            <summary>
            Not a standard login exception.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.LoginExceptionType.InvalidUserName">
            <summary>
            Invalid User Name
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.LoginExceptionType.InvalidPassword">
            <summary>
            Invalid Password
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.LoginExceptionType.InvalidPasswordLength">
            <summary>
            Invalid Password Length
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.LoginExceptionType.DuplicateUser">
            <summary>
            Duplicate User
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.LoginExceptionType.NoCredentials">
            <summary>
            No credentials were presented
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.LoginExceptionType.NoLoginManager">
            <summary>
            No LoginManager found
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.LoginException">
            <summary>
            Exception that should be thrown within the implementation of an <see cref="T:IdeaBlade.Persistence.IPersistenceLoginManager"/> whenever a login attempt fails.
            </summary>
            <remarks>
            If you subclass the <b>LoginException</b> be sure to mark your custom class
            with the <see cref="T:System.SerializableAttribute"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.LoginException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.LoginException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.LoginException.#ctor(IdeaBlade.Persistence.LoginExceptionType,System.String,System.String)">
            <summary>
            Initializes a new instance of the LoginException class.
            </summary>
            <param name="pExceptionType">Type of login exception.</param>
            <param name="pDomain">Domain (aka, Namespace), typically from the login credential.</param>
            <param name="pUserName">Username, typically from the login credential.</param>
            <remarks>The parameters are used to determine the exception message and its type.</remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.LoginException.#ctor(IdeaBlade.Persistence.LoginExceptionType,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the LoginException class.
            </summary>
            <param name="pExceptionType">Type of login exception.</param>
            <param name="pDomain">Domain (aka, Namespace), typically from the login credential.</param>
            <param name="pUserName">Username, typically from the login credential.</param>
            <param name="pMinPasswordLength">The minimum password length that this attempt perhaps failed to satisfy.</param>
        </member>
        <member name="P:IdeaBlade.Persistence.LoginException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.LoginException.ExceptionType">
            <summary>
            The <see cref="T:IdeaBlade.Persistence.LoginExceptionType"/> of this exception.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntitySavingEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.Persistence.PersistenceManager.Saving"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySavingEventArgs.#ctor(System.Collections.Generic.IList{IdeaBlade.Persistence.Entity})">
            <summary>
            Initialize a new instance of this class.
            </summary>
            <param name="pEntities"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.EntitySavingEventArgs.Entities">
            <summary>
            List of entities to be saved.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntitySavedEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.Persistence.PersistenceManager.Saved"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySavedEventArgs.#ctor(System.Collections.Generic.IList{IdeaBlade.Persistence.Entity})">
            <summary>
            Initialize a new instance of this class.
            </summary>
            <param name="pEntities"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.EntitySavedEventArgs.Entities">
            <summary>
            List of entities to be saved.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.FetchStrategy">
            <summary>
            An enum used when retrieving entities to determine where to look and in what order.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.FetchStrategy.CacheOnly">
            <summary>
            Retrieve entities from the cache only.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.FetchStrategy.CacheThenDataSource">
            <summary>
            Retrieve entities from the cache, and if not in cache, the back-end data source.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.FetchStrategy.DataSourceOnly">
            <summary>
            Retrieve entities from the back-end data source only.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.FetchStrategy.DataSourceThenCache">
            <summary>
            Retrieve entities from the backend data source, and then retrieve entites that are in the cache.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.CacheSearchStrategy">
            <summary>
            An enum used to determine how to retrieve entities from the cache.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.CacheSearchStrategy.DefaultIndexing">
            <summary>
            Retrieve entities from the cache using the default strategy. 
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.CacheSearchStrategy.DynamicIndexing">
            <summary>
            Retrieve entities from the cache using a dynamically constructed set of indexes. 
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.MergeStrategy">
            <summary>
            An enum used when retrieving or restoring entities to determine how to merge results back into
            the <see cref="T:IdeaBlade.Persistence.PersistenceManager"/> cache.
            </summary>
            <remarks>
            Use the <b>MergeStrategy</b> to determine merge behavior when a cached entity and 
            its corresponding data source entity are no longer in sync.  
            <para>
            A cached entity is considered <b>current</b> if its <see cref="F:System.Data.DataRowVersion.Original">DataRowVersion.Orginal</see>
            matches the incoming entity's current state.  If there is a mismatch, the cached version
            is considered <b>obsolete</b>, since the incoming entity has been modified by some other means since
            the entity was first fetched.
            </para>
            <para>
            A <b>MergeStrategy</b> is used when fetching entities from a data source, either through a 
            <b>Get</b> or <b>Refetch</b>; when restoring entities from an <see cref="T:IdeaBlade.Persistence.EntitySet"/>; and 
            when doing an <b>Import</b> from another PersistenceManager.
            </para>
            <para>
            All strategies (except NotApplicable) replace an unmodified cached entity completely.
            </para>
            <para>
            You can find a complete discussion of merge strategies in the <b>DevForce Developer's Guide</b>.
            </para>
            </remarks>
        </member>
        <member name="F:IdeaBlade.Persistence.MergeStrategy.NotApplicable">
            <summary>
            No merge action applies because there is no data source data. This merge strategy must be used – and may only be used – with the CacheOnly fetch strategy. 
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.MergeStrategy.OverwriteChanges">
            <summary>
            Overwrites the cached entity with incoming data and uses the RowState of the incoming entity (will be 
            Unchanged if the incoming entity is from the data source).
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.MergeStrategy.PreserveChanges">
            <summary>
            Preserves (does not overwrite) any existing entities that have been changed (modified, added or deleted).
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.MergeStrategy.PreserveChangesUnlessOriginalObsolete">
            <summary>
            Preserves the persistent state of the cached entity if the entity is current. 
            Overwrites an entity if it is obsolete and gives it the RowState of the incoming entity (will be
            Unchanged if the incoming entity is from the data source).
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.MergeStrategy.PreserveChangesUpdateOriginal">
            <summary>
            Preserves the persistent state of the cached entity whether it is current or not.
            Overwrites the <b>Original</b> version of the entity if obsolete.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.QueryStrategy">
            <summary>
            Determines the <see cref="P:IdeaBlade.Persistence.QueryStrategy.FetchStrategy"/>, <see cref="P:IdeaBlade.Persistence.QueryStrategy.MergeStrategy"/> and
            <see cref="P:IdeaBlade.Persistence.QueryStrategy.TransactionSettings"/> to use when retrieving entities.
            </summary>
            <remarks>
            All pre-defined static QueryStrategy objects use a <see cref="P:IdeaBlade.Persistence.QueryStrategy.TransactionSettings"/> which
            defaults to not use DTC.  If you need to perform transactional fetches you will need to
            set the appropriate TransactionSettings values.
            </remarks>
        </member>
        <member name="F:IdeaBlade.Persistence.QueryStrategy.DataSourceOnly">
            <summary>
            Retrieve entities from the back-end data source only, and overwrite any matching entities.
            </summary>
            <remarks>
            Combines <see cref="F:FetchStrategy.DataSourceOnly"/> and <see cref="F:MergeStrategy.OverwriteChanges"/>.
            </remarks>
        </member>
        <member name="F:IdeaBlade.Persistence.QueryStrategy.DataSourceThenCache">
            <summary>
            Retrieve entities from the backend data source, add objects from cache, and overwrite any matching entities.
            </summary>
            <remarks>
            Combines <see cref="F:FetchStrategy.DataSourceThenCache"/> and <see cref="F:MergeStrategy.OverwriteChanges"/>.
            </remarks>
        </member>
        <member name="F:IdeaBlade.Persistence.QueryStrategy.Normal">
            <summary>
            Retrieve business objects from the cache, and if not in cache, the back-end data source, preserving any changes.
            </summary>
            <remarks>
            Combines <see cref="F:FetchStrategy.CacheThenDataSource"/> and <see cref="F:MergeStrategy.PreserveChanges"/>.
            </remarks>
        </member>
        <member name="F:IdeaBlade.Persistence.QueryStrategy.CacheOnly">
            <summary>
            Retrieve business objects from the cache only.
            </summary>
            <remarks>
            Combines <see cref="F:FetchStrategy.CacheOnly"/> and <see cref="F:MergeStrategy.NotApplicable"/>.
            </remarks> 
        </member>
        <member name="M:IdeaBlade.Persistence.QueryStrategy.#ctor(IdeaBlade.Persistence.FetchStrategy,IdeaBlade.Persistence.MergeStrategy)">
            <summary>
            Initialize a new QueryStrategy with the fetch and merge strategies specified, and defaulting the 
            <see cref="P:IdeaBlade.Persistence.QueryStrategy.TransactionSettings"/> to not use DTC.
            </summary>
            <param name="pFetchStrategy">Fetch strategy</param>
            <param name="pMergeStrategy">Merge strategy</param>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryStrategy.#ctor(IdeaBlade.Persistence.FetchStrategy,IdeaBlade.Persistence.MergeStrategy,IdeaBlade.Persistence.TransactionSettings)">
            <summary>
            Initialize a new QueryStrategy with the fetch strategy, the merge strategy, and the transaction settings specified.
            </summary>
            <param name="pFetchStrategy">Fetch strategy</param>
            <param name="pMergeStrategy">Merge strategy</param>
            <param name="pTransactionSettings">Transaction settings</param>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryStrategy.#ctor(IdeaBlade.Persistence.FetchStrategy,IdeaBlade.Persistence.MergeStrategy,IdeaBlade.Persistence.CacheSearchStrategy,IdeaBlade.Persistence.TransactionSettings)">
            <summary>
            Initialize a new QueryStrategy.
            </summary>
            <param name="pFetchStrategy">Fetch strategy</param>
            <param name="pMergeStrategy">Merge strategy</param>
            <param name="pCacheSearchStrategy">Cache search strategy</param>
            <param name="pTransactionSettings">Transaction settings</param>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryStrategy.#ctor(IdeaBlade.Persistence.QueryStrategy,IdeaBlade.Persistence.TransactionSettings)">
            <summary>
            Initialize a new QueryStrategy based on another.
            </summary>
            <param name="pQueryStrategy"></param>
            <param name="pTransactionSettings"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryStrategy.#ctor(IdeaBlade.Persistence.QueryStrategy,IdeaBlade.Persistence.CacheSearchStrategy)">
            <summary>
            Initialize a new QueryStrategy based on another QueryStrategy and a specific CacheSearchStrategy.
            </summary>
            <param name="pQueryStrategy"></param>
            <param name="pCacheSearchStrategy"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryStrategy.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryStrategy.op_Equality(IdeaBlade.Persistence.QueryStrategy,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Operator == overload.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryStrategy.op_Inequality(IdeaBlade.Persistence.QueryStrategy,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Operator != overload.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryStrategy.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:IdeaBlade.Persistence.QueryStrategy.FetchStrategy">
            <summary>
            Returns the FetchStrategy for this QueryStrategy.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.QueryStrategy.MergeStrategy">
            <summary>
            Returns the MergeStrategy for this QueryStrategy.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.QueryStrategy.CacheSearchStrategy">
            <summary>
            Returns the CacheSearchStrategy for this QueryStrategy.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.QueryStrategy.TransactionSettings">
            <summary>
            Returns the TransactionSettings for this QueryStrategy.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.PersistenceManagerSaveException">
            <summary>
            Exception thrown for failures during <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/> processing.
            </summary>
            <remarks>
            The <see cref="P:IdeaBlade.Persistence.PersistenceManagerSaveException.SaveResult"/> will contain additional information about save processing, including
            the list of <see cref="P:IdeaBlade.Persistence.SaveResult.EntitiesWithErrors"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManagerSaveException.#ctor">
            <summary>
            Initializes a new instance of the PersistenceManagerSaveException class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManagerSaveException.#ctor(System.String,IdeaBlade.Persistence.SaveResult)">
            <summary>
            Initializes a new instance of the PersistenceManagerSaveException class.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
            <param name="pSaveResult">The SaveResult returned by the SaveChanges call</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManagerSaveException.#ctor(System.String,System.Exception,IdeaBlade.Persistence.SaveResult)">
            <summary>
            Initializes a new instance of the PersistenceManagerSaveException class.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
            <param name="pInnerException">Wrapped Exception</param>
            <param name="pSaveResult">The SaveResult returned by the SaveChanges call</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManagerSaveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the PersistenceManagerSaveException class.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManagerSaveException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Internal use only.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManagerSaveException.SaveResult">
            <summary>
            The result of a <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/> call. 
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.TransactionSettings">
            <summary>
            Options that can be used to control transactional behavior in 
            query and save processing.
            </summary>
            <seealso cref="T:IdeaBlade.Persistence.SaveOptions"/>
            <seealso cref="T:IdeaBlade.Persistence.QueryStrategy"/>
        </member>
        <member name="F:IdeaBlade.Persistence.TransactionSettings.Default">
            <summary>
            Default TransactionSettings using "useDTC" setting from IdeaBlade.ibconfig.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.TransactionSettings.DefaultWithoutDTC">
            <summary>
            Default TransactionSettings without using DTC.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.TransactionSettings.DefaultWithDTC">
            <summary>
            Default TransactionSettings using DTC.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.TransactionSettings.#ctor(IdeaBlade.Persistence.UseDTCOption)">
            <summary>
            Create a TransactionSettings object using the option specified.
            </summary>
            <param name="pUseDTC"></param>
            <remarks>
            If UseDTCOption parameter is "True" or "UseConfigurationSetting" then
            the IsolationLevel will default to Serializable and the Timeout will be
            set to one minute.
            <para>DTC may only be used in the Enterprise versions of DevForce.</para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.TransactionSettings.#ctor(IdeaBlade.Persistence.UseDTCOption,System.Transactions.IsolationLevel,System.TimeSpan)">
            <summary>
            Create a TransactionSettings object with the specified settings.
            </summary>
            <remarks>
            <para>DTC may only be used in the Enterprise versions of DevForce.</para>
            <para>
            When DTC is used, both the transaction isolation level and timeout values 
            may be specified.
            </para>
            <para>When DTC is not used, the transaction isolation level may be specified,
            however the timeout value is ignored.  If you are performing a transactional
            query, you can use the <see cref="P:IdeaBlade.Persistence.IEntityQuery.CommandTimeout"/> property to specify a
            timeout value. </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.TransactionSettings.ToTransactionOptions">
            <summary>
            Converts the TransactionSettings to a <see cref="T:System.Transactions.TransactionOptions"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.TransactionSettings.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.TransactionSettings.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:IdeaBlade.Persistence.TransactionSettings.UseDTC">
            <summary>
            Gets whether or not DTC will be used. 
            This feature is only available in certain editions of DevForce.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.TransactionSettings.UseDTCOption">
            <summary>
            Gets the setting for the UseDTCOption.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.TransactionSettings.IsolationLevel">
            <summary>
            Gets the isolation level of a transaction.
            </summary>
            <remarks>
            If <see cref="P:IdeaBlade.Persistence.TransactionSettings.UseDTC"/> is true, the 
            default IsolationLevel is Serializable.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.TransactionSettings.Timeout">
            <summary>
            Gets the timeout period for the transaction. 
            </summary>
            <remarks>
            Only applicable if <see cref="P:IdeaBlade.Persistence.TransactionSettings.UseDTC"/> is true.  The
            default Timeout = 1 minute.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.ServerNotifyDelegate">
            <summary>
            Defines a delegate for a method that performs "push" processing on the BOS.
            <seealso cref="T:IdeaBlade.Persistence.AllowRpcAttribute"/>
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.RegisterCallback(IdeaBlade.Persistence.ServerNotifyDelegate,IdeaBlade.Persistence.ClientNotifyDelegate,System.Object,System.Object[])"/>
            <seealso cref="T:IdeaBlade.Persistence.ClientNotifyDelegate"/>
            </summary>
            <param name="pServiceKey">Server-assigned key used for communicating with the NotificationManager</param>
            <param name="pManager">The NotificationManager used for communication with the BOS</param>
            <param name="pServerPersistenceManager">A server-side PersistenceManager</param>
            <remarks>
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.SchemaInitializationMode">
            <summary>
            An enum used when determining the schema for an <see cref="T:IdeaBlade.Persistence.EntityTable"/>.
            </summary>
            <remarks>
            The <b>SchemaInitializationMode</b> is used by the framework in 
            ascertaining the runtime data type and corresponding data transform
            for columns in an <see cref="T:IdeaBlade.Persistence.EntityTable"/>.
            <para>
            <b>SchemaInitializationMode</b> defaults to <b>FromMap</b> in entities generated by 
            the <b>DevForce Object Mapping Tool</b>.
            </para>
            <para>
            See the <b>DevForce Developer's Guide</b> for more information on data transforms and 
            mapping interceptors.
            </para>
            </remarks>
        </member>
        <member name="F:IdeaBlade.Persistence.SchemaInitializationMode.FromMap">
            <summary>
            An Entity's schema is determined solely by the design time definition as generated by the Object Mapping tool. (Default)
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.SchemaInitializationMode.FromMapWithDiscovery">
            <summary>
            An Entity's schema is determined primarily by the design time definition as generated by the Object Mapping tool.
            However if additional fields are discovered at runtime by actually querying the datasource these will be added
            to the schema as well.  This option will be most often used in conjunction with user defined fields. This will
            require the datasource to be connected on the first reference to each entity type so marked.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.SchemaInitializationMode.FromDataSource">
            <summary>
            An Entity's schema is determined solely by run time discovery via a query to the datasource.  This will
            require the datasource to be connected on the first reference to each entity type so marked.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.PersistenceServiceApplication">
            <summary>
            Provides a means of handling application-level events on the Business Object Server.
            </summary>
            <remarks>
            To perform custom processing for application-level events, sub-class the <b>PersistenceServiceApplication</b>
            class and place the name of the assembly containing your custom class in the <see cref="P:IdeaBlade.Util.IdeaBladeConfig.ProbeAssemblyNames"/> 
            in your <b>IdeaBlade.ibconfig</b>.  
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceServiceApplication.OnServiceStartup(System.Object,IdeaBlade.Persistence.ServiceStartupEventArgs)">
            <summary>
            Called when the PersistenceService is started.
            </summary>
            <param name="sender">Always null</param>
            <param name="e">Always empty</param>
            <remarks>
            You can override this method in your subclass to perform custom startup logic.
            <para>The <see cref="T:IdeaBlade.Util.IdeaBladeConfig"/> provided in the <b>ServiceStartupEventArgs</b>
            may be modified as needed.  These modifications will be available for all following
            PersistenceServer processing.</para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceServiceApplication.OnServiceShutdown(System.Object,System.EventArgs)">
            <summary>
            Called when the PersistenceService is shutting down.
            </summary>
            <param name="sender">Always null</param>
            <param name="e">Always empty</param>
            <remarks>
            You can override this method in your subclass to perform custom shutdown logic.
            <para>Note that all TraceSubscribers (including the DebugLog) will have shutdown
            so any trace messages written here will be lost.</para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServiceApplication.Instance">
            <summary>
            Returns the singleton instance of the PersistenceServiceApplication.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.ServiceStartupEventArgs">
            <summary>
            Arguments passed to the OnServiceStartup method in the PersistenceServiceApplication.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.ServiceStartupEventArgs.#ctor(IdeaBlade.Util.IdeaBladeConfig)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="pConfig"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.ServiceStartupEventArgs.IdeaBladeConfig">
            <summary>
            Gets the loaded IdeaBladeConfig instance.
            </summary>
            <remarks>
            The properties of the IdeaBladeConfig can be retrieved and set as needed.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.PersistenceOperation">
            <summary>
            Indicates the persistence operation requested when a <see cref="T:IdeaBlade.Persistence.PersistenceServerException"/> occurs.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceOperation.Connect">
            <summary>
            Connect request.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceOperation.Login">
            <summary>
            Login request.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceOperation.Get">
            <summary>
            Get request, including schema initialization.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceOperation.Save">
            <summary>
            Save request.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceOperation.QuerySecurity">
            <summary>
            A <see cref="M:IdeaBlade.Persistence.Entity.QuerySecurityCheck(System.Security.Principal.IPrincipal,IdeaBlade.Persistence.IEntityQuery)"/> during a Get request.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceOperation.SaveSecurity">
            <summary>
            A <see cref="M:IdeaBlade.Persistence.Entity.SaveSecurityCheck(System.Security.Principal.IPrincipal)"/> during a Save request.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceOperation.IdFixup">
            <summary>
            Temporary-to-real ID fixup request.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceOperation.Other">
            <summary>
            Unspecified or undetermined request.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.PersistenceFailure">
            <summary>
            Indicates the general failure type of a <see cref="T:IdeaBlade.Persistence.PersistenceServerException"/>.
            </summary>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.PersistenceServerException"/> sub-type and the <see cref="P:System.Exception.InnerException"/>
            will provide additional information on the failure.
            </remarks>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceFailure.Connection">
            <summary>
            Connection failure.  The error occurred while accessing the network.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceFailure.Data">
            <summary>
            Data failure.  The error occurred while accessing the data source.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceFailure.Concurrency">
            <summary>
            Data concurrency failure.  A database concurrency failure was raised.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceFailure.License">
            <summary>
            License exception.  The attempted operation is not valid for the license.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.PersistenceFailure.Other">
            <summary>
            Unspecified failure.  Check the <see cref="P:System.Exception.InnerException"/> for more information.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.NamespaceDoc">
            <summary>
              Contains the classes and interfaces that provide object relational mapping
              functionality, as well as the mechanisms to distribute and synchronize
              business objects between application server and client tiers.
              Essential classes in this namespace are <see cref="T:IdeaBlade.Persistence.PersistenceManager"/>, 
              <see cref="T:IdeaBlade.Persistence.EntityQuery"/>, and <see cref="T:IdeaBlade.Persistence.Entity"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityRelationLink">
            <summary>
            A composite of an <see cref="P:IdeaBlade.Persistence.EntityRelationLink.EntityRelation"/> and a <see cref="P:IdeaBlade.Persistence.EntityRelationLink.QueryDirection"/> forming an unambiguous relationship
            between <see cref="T:IdeaBlade.Persistence.Entity"/> types.
            </summary>
            <remarks>
            The <b>EntityRelationLink</b> does not have a public constructor.  To obtain a link instance use the 
            <see cref="M:IdeaBlade.Persistence.EntityRelationLink.From(IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryDirection)"/> static method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelationLink.From(IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryDirection)">
            <summary>
            Returns an <b>EntityRelationLink</b> from the <see cref="P:IdeaBlade.Persistence.EntityRelationLink.EntityRelation"/> and <see cref="P:IdeaBlade.Persistence.EntityRelationLink.QueryDirection"/> specified.
            </summary>
            <param name="pEntityRelation">Describes the relationship between two entities</param>
            <param name="pQueryDirection">Whether query is to the parent or the child</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelationLink.From(System.String,IdeaBlade.Persistence.QueryDirection)">
            <summary>
            Returns an <b>EntityRelationLink</b> from the EntityRelation name and <see cref="P:IdeaBlade.Persistence.EntityRelationLink.QueryDirection"/> specified.
            </summary>
            <param name="pEntityRelationName">Describes the relationship between two entities</param>
            <param name="pQueryDirection">Whether query is to the parent or the child</param>
            <returns></returns>
            <remarks>
            If multiple EntityRelations have been defined using the same relation name (i.e., multiple entity
            projects are defined), only the first EntityRelation found matching the relation name is used.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelationLink.From(System.Type,System.String)">
            <summary>
            Returns an <b>EntityRelationLink</b> for a specified Type and relational property name.
            </summary>
            <param name="pType">Entity type</param>
            <param name="pRelationalPropertyName">Name of relational property</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelationLink.GetInverse">
            <summary>
            Returns the EntityRelationLink in the inverse direction of this link's <see cref="P:IdeaBlade.Persistence.EntityRelationLink.QueryDirection"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelationLink.ToString">
            <summary>
            Returns a human readable description of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelationLink.#ctor(IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryDirection)">
            <summary>
            Internal constructor.
            </summary>
            <param name="pEntityRelation"></param>
            <param name="pQueryDirection"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelationLink.Equals(System.Object)">
            <summary>
            Determines whether two object instances are equal.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityRelationLink.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelationLink.EntityRelation">
            <summary>
            Returns the EntityRelation for this EntityRelationLink.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelationLink.QueryDirection">
            <summary>
            Returns the QueryDirection for this EntityRelationLink.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelationLink.FromType">
            <summary>
            Entity type that is navigated <b>from</b> using this EntityRelationLink.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelationLink.ToType">
            <summary>
            Entity type that is navigated <b>to</b> using this EntityRelationLink.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelationLink.FromColumns">
            <summary>
            Returns an array of EntityColumn objects in the <see cref="P:IdeaBlade.Persistence.EntityRelationLink.FromType"/> entity.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityRelationLink.ToColumns">
            <summary>
            Returns an array of EntityColumn objects in the <see cref="P:IdeaBlade.Persistence.EntityRelationLink.ToType"/> entity.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.DefaultDataSourceKeyResolver">
            <summary>
            Default implementation of the <see cref="T:IdeaBlade.Persistence.IDataSourceKeyResolver"/> interface.
            </summary>
            <remarks>
            The <b>DefaultDataSourceKeyResolver</b> is used for all data source key name resolution unless
            a custom implementation of <see cref="T:IdeaBlade.Persistence.IDataSourceKeyResolver"/> is found in
            the <see cref="P:IdeaBlade.Util.IdeaBladeConfig.ProbeAssemblyNames"/> list in <b>IdeaBlade.ibconfig</b>.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.IDataSourceKeyResolver">
            <summary>
            Interface used to resolve the data source key which will be used to connect to an <see cref="T:IdeaBlade.Persistence.Entity"/>'s
            data source.
            </summary>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.DefaultDataSourceKeyResolver"/> is used by default to determine the key
            and connection information to be used when accessing the data source.  To override this behavior implement
            a custom <b>IDataSourceKeyResolver</b> and add its assembly name to the 
            <see cref="P:IdeaBlade.Util.IdeaBladeConfig.ProbeAssemblyNames"/> list in <b>IdeaBlade.ibconfig</b>.
            If a custom IDataSourceKeyResolver is found, a single instance of the class will be 
            created for the <see cref="T:IdeaBlade.Persistence.PersistenceManager"/>, and called for all data source key resolution.
            <para>
            If using a custom <b>IDataSourceKeyResolver</b> you will not need to place data source key information
            in your <b>IdeaBlade.ibconfig</b>.
            </para>
            </remarks>
            <example><code lang="C#">
// Sample custom implementation of IDataSourceKeyResolver.

[Serializable]
public class DynamicDataSourceKeyResolver : IDataSourceKeyResolver {

  // This class will process keys named "Dynamic" - other key names 
  // are handled by the default resolver.
  // Note the rdbKeys created here are not defined in IdeaBlade.ibconfig. 

  // Also note that GetKey will be called once on both the client and the server.

  public IDataSourceKey GetKey(string pKeyName, string pKeyExtension) {

    IDataSourceKey aKey;

    if (pKeyName != "Dynamic") return null;   // Allow default resolution of key.

    // Switch database server based on time of day.
    if (DateTime.UtcNow.Hour &lt; 12) {
      aKey = new RdbKey(pKeyName,
          "Provider=SQLOLEDB.1;Integrated Security=SSPI;Initial Catalog=IdeaBladeTutorial;Data Source=SF-Server");
    } else {
      aKey = new RdbKey(pKeyName,
          "Provider=SQLOLEDB.1;Integrated Security=SSPI;Initial Catalog=IdeaBladeTutorial;Data Source=NY-Server");
    } 

    return aKey;
  }
}
</code></example><example><code lang="VB">
' Sample custom implementation of IDataSourceKeyResolver.

&lt;Serializable()&gt; _
Public Class DynamicDataSourceKeyResolver :  Implements IDataSourceKeyResolver

    ' This class will process keys named "Dynamic" - other key names 
    ' are handled by the default resolver.
    ' Note the rdbKeys created here are not defined in IdeaBlade.ibconfig. 

    ' Also note that GetKey will be called once on both the client and the server.

    Public Function GetKey(ByVal pKeyName As String, ByVal pKeyExtension As String) As IDataSourceKey Implements IDataSourceKeyResolver.GetKey

        Dim aKey As IDataSourceKey

        If pKeyName &lt;&gt; "Dynamic" Then
            Return Nothing                          ' Allow default resolution of key.
        End If
        ' Switch database server based on time of day.
        If DateTime.UtcNow.Hour &lt; 12 Then
            aKey = New RdbKey(pKeyName, "Provider=SQLOLEDB.1;Integrated Security=SSPI;Initial Catalog=IdeaBladeTutorial;Data Source=SF-Server")
        Else
            aKey = New RdbKey(pKeyName, "Provider=SQLOLEDB.1;Integrated Security=SSPI;Initial Catalog=IdeaBladeTutorial;Data Source=NY-Server")
        End If

        Return aKey
    End Function
End Class
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.IDataSourceKeyResolver.GetKey(System.String,System.String)">
            <summary>
            Returns the <see cref="T:IdeaBlade.Util.IDataSourceKey"/> for a given key name and extension.
            </summary>
            <param name="pKeyName"></param>
            <param name="pKeyExtension"></param>
            <returns>A data source key or null if default key resolution is desired </returns>
            <remarks>
            If a <c>null</c> key is returned the <see cref="T:IdeaBlade.Persistence.DefaultDataSourceKeyResolver"/> will attempt
            to resolve the key.
            <para>
            <b>GetKey</b> will be called once per keyName and keyExtension on both the client and server.  If you
            need to secure your client connection information you may want to implement separate versions of 
            this class on the client and server tiers, possibly using different <b>probeAssemblyName</b> lists 
            in the client and server versions of <b>IdeaBlade.ibconfig</b>.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.DefaultDataSourceKeyResolver.GetKey(System.String,System.String)">
            <summary>
            Returns the <see cref="T:IdeaBlade.Util.IDataSourceKey"/> for a given key name and extension.
            </summary>
            <param name="pKeyName">Data source key name</param>
            <param name="pKeyExtension">Extension or empty string</param>
            <returns>Concrete data source key</returns>
            <remarks>
            <b>GetKey</b> searches the keys specified in <b>IdeaBlade.ibconfig</b>
            for the first key matching the name and extension provided.  
            If an extension is provided, key name matching is first done for the "keyName_ext" pattern; if not found 
            then the "keyName_ext_*" pattern is used; and finally if still not found the search is for the keyName only.  
            <para>
            If an extension is not provided (either null or empty string) then only the keyName lookup is done.
            </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.QueryCache">
            <summary>
            A list of queries that can be satisfied without having to go out to an external data source.
            </summary>
            <remarks>
            The <b>QueryCache</b> is managed by the <see cref="T:IdeaBlade.Persistence.PersistenceManager"/> and is used within
            the framework to determine which queries can be executed against cache only.  Developers don't
            usually need to interact with the <b>QueryCache</b>, but you do have several means of controlling
            its contents.  Use <see cref="P:IdeaBlade.Persistence.PersistenceManager.QueryCache"/> to access the cache.  Use
            <see cref="P:IdeaBlade.Persistence.EntityQuery.IsQueryCacheable"/> to control whether a query will be cached.  You will
            not usually need to directly add and remove queries from the cache, since <b>PersistenceManager</b>
            will manage it based on queries executed and entities removed.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryCache.Contains(IdeaBlade.Persistence.IEntityQuery)">
            <summary>
            Determines whether the query cache contains the specified EntityQuery.
            </summary>
            <param name="pEntityQuery">Entity query</param>
            <returns>
            	<c>true</c> if contains the specified EntityQuery; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryCache.Contains(IdeaBlade.Persistence.RelationQuery)">
            <summary>
            Determines whether the query cache contains the specified RelationQuery.
            </summary>
            <param name="pRelationQuery">Entity query</param>
            <returns>
            	<c>true</c> if contains the specified RelationQuery; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryCache.Contains(IdeaBlade.Persistence.PrimaryKey)">
            <summary>
            Determines whether the query cache contains the specified PrimaryKey.
            </summary>
            <param name="pPrimaryKey">primary key</param>
            <returns>
            	<c>true</c> if contains the specified PrimaryKey; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryCache.ContainsRaw(System.Object)">
            <summary>
            Determines whether the query cache contains the object specified.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryCache.Add(System.Type)">
            <summary>
            Add the specified type to the QueryCache to indicate that all queries for this
            type may be found in cache.
            </summary>
            <param name="pEntityType"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryCache.Add(IdeaBlade.Persistence.PrimaryKey)">
            <summary>
            Adds the specified primary key to the QueryCache.
            </summary>
            <param name="pPrimaryKey">primary key</param>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryCache.Add(IdeaBlade.Persistence.PrimaryKeyList)">
            <summary>
            Adds the specified primamry key list to the QueryCache.
            </summary>
            <param name="pPkList">pk list</param>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryCache.Add(IdeaBlade.Persistence.IEntityQuery)">
            <summary>
            Adds the specified entity query to the QueryCache.
            </summary>
            <param name="pEntityQuery">entity query</param>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryCache.AddRaw(System.Object)">
            <summary>
            Adds the specified object to the QueryCache.
            </summary>
            <param name="pObject"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryCache.Add(IdeaBlade.Persistence.RelationQuery)">
            <summary>
            Adds the specified RelationQuery to the QueryCache.
            </summary>
            <param name="pRelationQuery">primary key</param>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryCache.Remove(System.Type)">
            <summary>
            Removes the specified entity type from the QueryCache.
            </summary>
            <param name="pEntityType"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryCache.Remove(IdeaBlade.Persistence.PrimaryKeyList)">
            <summary>
            Removes the specified primary key list from the QueryCache.
            </summary>
            <param name="pPkList">pk list</param>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryCache.Remove(IdeaBlade.Persistence.PrimaryKey)">
            <summary>
            Removes the specified primary key from the QueryCache.
            </summary>
            <param name="pPrimaryKey">primary key</param>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryCache.Remove(IdeaBlade.Persistence.EntityQuery)">
            <summary>
            Removes the specified entity query from the QueryCache.
            </summary>
            <param name="pEntityQuery">entity query</param>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryCache.Remove(IdeaBlade.Persistence.RelationQuery)">
            <summary>
            Removes the specified RelationQuery from the QueryCache.
            </summary>
            <param name="pRelationQuery"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.QueryCache.Clear">
            <summary>
            Clears the query cache.   
            </summary>
            <remarks>This does not remove any Entities from the cache. It
            simply clears the record of which queries have already been performed. 
            <para>Clearing the query cache also results in subsequent queries
            retrieving data from the backend data source instead of cache, because the
            queries used for cached data are unknown. </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.QueryCache.Keys">
            <summary>
            Returns all of the Keys in the query cache. This will be a mixed collection of 
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.NotificationSubscriber">
            <summary>
            Subscriber information returned from a <see cref="M:IdeaBlade.Persistence.INotificationManager.GetSubscribers(System.Guid)"/> call 
            made by a <see cref="T:IdeaBlade.Persistence.ServerNotifyDelegate"/> implementation.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.NotificationSubscriber.Principal">
            <summary>
            Gets the IPrincipal identifying the subscriber.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.NotificationSubscriber.UserToken">
            <summary>
            Gets the token identifying the client request.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.NotificationSubscriber.ClientArguments">
            <summary>
            Gets the arguments passed with the client request.
            </summary>
            <remarks>
            The number and type of arguments is user-defined.  No arguments
            are required.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.NotificationSubscriberCollection">
            <summary>
            List of <see cref="T:IdeaBlade.Persistence.NotificationSubscriber"/> objects returned from a <see cref="M:IdeaBlade.Persistence.INotificationManager.GetSubscribers(System.Guid)"/> call.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.NotificationSubscriberCollection.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.NotificationSubscriberCollection.#ctor(System.Collections.Generic.IEnumerable{IdeaBlade.Persistence.NotificationSubscriber})">
            <summary>
            Initializes a new instance of the class from an existing collection of objects.
            </summary>
            <param name="pSubscribers"></param>
        </member>
        <member name="T:IdeaBlade.Persistence.DynamicEntityTypeBuilder">
            <summary>
            A static builder pattern class for defining a <see cref="T:IdeaBlade.Persistence.DynamicEntity"/>.
            </summary>
            <remarks>
            Use one of the <b>CreateType</b> overloads of the <b>DynamicEntityTypeBuilder</b> 
            to define a <see cref="T:IdeaBlade.Persistence.DynamicEntity"/> Type and optionally specify its structure.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityTypeBuilder.CreateType(System.String,System.String)">
            <summary>
            Constructs a new dynamic entity type without a primary key whose schema is determined from a query.
            This feature is only available in certain editions of DevForce.
            </summary>
            <param name="pDynamicTypeKey">A "key" or short name for the DynamicEntity type.</param>
            <param name="pDataSourceKeyName">The datasource key name.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if the dynamic type key name is already defined.</exception>
            <example><code lang="C#"><![CDATA[
// Create a DynamicEntity w/o a primary key, whose structure is determined by the query.

Type aType = DynamicEntityTypeBuilder.CreateType("Foo", "Default");
IEntityQuery query = new PassthruRdbQuery(aType, "select FirstName, LastName from Employee");
EntityList<DynamicEntity> list = PersistenceManager.DefaultManager.GetEntities<DynamicEntity>(query);

foreach (DynamicEntity anEntity in list) {
  System.Diagnostics.Debug.WriteLine(string.Format("{1}, {0}", anEntity["FirstName"], anEntity["LastName"])); 
}
	]]></code></example><example><code lang="VB">
' Create a DynamicEntity w/o a primary key, whose structure is determined by the query.

Dim aType As Type = DynamicEntityTypeBuilder.CreateType("Foo", "Default")
Dim query As New PassthruRdbQuery(aType, "select FirstName, LastName from Employee")
Dim list As EntityList(Of DynamicEntity) = PersistenceManager.DefaultManager.GetEntities(Of DynamicEntity)(query)

For Each anEntity As DynamicEntity In list
   System.Diagnostics.Debug.WriteLine(String.Format("{1}, {0}", anEntity("FirstName"), anEntity("LastName")))
Next anEntity
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityTypeBuilder.CreateType(System.String,System.String,System.String[])">
            <summary>
            Constructs a new dynamic entity type with a primary key  whose schema is determined from a query.
            This feature is only available in certain editions of DevForce.
            </summary>
            <param name="pDynamicTypeKey">A "key" or short name for the DynamicEntity type.</param>
            <param name="pDataSourceKeyName">The datasource key name.</param>
            <param name="pPrimaryKeyColumnNames">Name(s) of the primary key columns.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if the dynamic type key name is already defined.</exception>
            <example><code lang="C#"><![CDATA[
// Create a DynamicEntity with a primary key, whose structure is determined by the query.

Type aType = DynamicEntityTypeBuilder.CreateType("Foo", "Default", "Id");
IEntityQuery query = new PassthruRdbQuery(aType, "select Id, FirstName, LastName from Employee");
EntityList<DynamicEntity> list = PersistenceManager.DefaultManager.GetEntities<DynamicEntity>(query);

foreach (DynamicEntity anEntity in list) {
   System.Diagnostics.Debug.WriteLine(string.Format("{0}: {1} {2}", anEntity.PrimaryKey.ToString(), anEntity["FirstName"], anEntity["LastName"]));
}
	]]></code></example><example><code lang="VB">
' Create a DynamicEntity with a primary key, whose structure is determined by the query.

Dim aType As Type = DynamicEntityTypeBuilder.CreateType("Foo", "Default", "Id")
Dim query As New PassthruRdbQuery(aType, "select Id, FirstName, LastName from Employee")
Dim list As EntityList(Of DynamicEntity) = PersistenceManager.DefaultManager.GetEntities(Of DynamicEntity)(query)

For Each anEntity As DynamicEntity In list
   System.Diagnostics.Debug.WriteLine(String.Format("{0}: {1} {2}", anEntity.PrimaryKey.ToString(), anEntity("FirstName"), anEntity("LastName")))
Next anEntity
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityTypeBuilder.CreateType(System.String,System.String,System.Int32[])">
            <summary>
            Constructs a new dynamic entity type with a primary key  whose schema is determined from a query.
            This feature is only available in certain editions of DevForce.
            </summary>
            <param name="pDynamicTypeKey">A "key" or short name for the DynamicEntity type.</param>
            <param name="pDataSourceKeyName">The datasource key name.</param>
            <param name="pPrimaryKeyColumnIndices">Index(es) of the primary key columns.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if the dynamic type key name is already defined.</exception>
            <example><code lang="C#"><![CDATA[
// Create a DynamicEntity with a primary key, whose structure is determined by the query.

Type aType = DynamicEntityTypeBuilder.CreateType("Foo", "Default", 0);
IEntityQuery query = new PassthruRdbQuery(aType, "select Id, FirstName, LastName from Employee");
EntityList<DynamicEntity> list = PersistenceManager.DefaultManager.GetEntities<DynamicEntity>(query);

foreach (DynamicEntity anEntity in list) {
   System.Diagnostics.Debug.WriteLine(string.Format("{0}: {1} {2}", anEntity.PrimaryKey.ToString(), anEntity["FirstName"], anEntity["LastName"]));
}
	]]></code></example><example><code lang="VB">
' Create a DynamicEntity with a primary key, whose structure is determined by the query.

Dim aType As Type = DynamicEntityTypeBuilder.CreateType("Foo", "Default", 0)
Dim query As New PassthruRdbQuery(aType, "select Id, FirstName, LastName from Employee")
Dim list As EntityList(Of DynamicEntity) = PersistenceManager.DefaultManager.GetEntities(Of DynamicEntity)(query)

For Each anEntity As DynamicEntity In list
   System.Diagnostics.Debug.WriteLine(String.Format("{0}: {1} {2}", anEntity.PrimaryKey.ToString(), anEntity("FirstName"), anEntity("LastName")))
Next anEntity
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityTypeBuilder.CreateType(System.String,System.String,System.Data.DataTable)">
            <summary>
            Constructs a new dynamic entity type using the schema from a template table.
            This feature is only available in certain editions of DevForce.
            </summary>
            <param name="pDynamicTypeKey">A "key" or short name for the DynamicEntity type.</param>
            <param name="pDataSourceKeyName">The datasource key name.</param>
            <param name="pTemplateDataTable">DataTable to use as a template.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if the dynamic type key name is already defined.</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityTypeBuilder.CreateType(System.String,System.String,System.Data.DataTable,IdeaBlade.Persistence.TableMappingInfo)">
            <summary>
            Constructs a new dynamic entity type using a template table and TableMappingInfo.
            This feature is only available in certain editions of DevForce.
            </summary>
            <param name="pDynamicTypeKey">A "key" or short name for the DynamicEntity type.</param>
            <param name="pDataSourceKeyName">he datasource key name.</param>
            <param name="pTemplateDataTable">DataTable to use as a template.</param>
            <param name="pTableMappingInfo">Schema mapping information.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if the dynamic type key name is already defined.</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityTypeBuilder.CreateType(IdeaBlade.Persistence.EntityTypeInfo)">
            <summary>
            Constructs a new dynamic entity type from the specified EntityTypeInfo.
            This feature is only available in certain editions of DevForce.
            </summary>
            <param name="pInfo">An EntityTypeInfo instance</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if the dynamic type key name is already defined.</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityTypeBuilder.CreateTypes(System.Collections.Generic.IEnumerable{IdeaBlade.Persistence.EntityTypeInfo})">
            <summary>
            Creates multiple dynamic types given a list of EntityTypeInfo. Already
            created types are ignored.
            </summary>
            <param name="pTypeInfoList">List of EntityTypeInfo.</param>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntityTypeBuilder.OnDynamicEntityTypeCreated(IdeaBlade.Persistence.DynamicEntityTypeCreatedEventArgs)">
            <summary>
            
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="E:IdeaBlade.Persistence.DynamicEntityTypeBuilder.DynamicEntityTypeCreated">
            <summary>
            Event fired whenever a new dynamic entity type is created.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.IdGeneratorFactory">
            <summary>
            Internal use only.  Returns the <see cref="T:IdeaBlade.Persistence.IIdGenerator"/> associated with an <see cref="T:IdeaBlade.Util.IDataSourceKey"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.IdGeneratorFactory.GetIdGenerator(IdeaBlade.Util.IDataSourceKey)">
            <summary>
            Returns the <see cref="T:IdeaBlade.Persistence.IIdGenerator"/> associated with an <see cref="T:IdeaBlade.Util.IDataSourceKey"/>.
            </summary>
            <param name="pDataSourceKey"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Persistence.SaveOptions">
            <summary>
            Options that can be used to control <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/> processing.
            </summary>
            <remarks>
            Using <b>SaveOptions</b> you can set whether save processing <see cref="P:IdeaBlade.Persistence.SaveOptions.IsTransactional"/>, 
            the <see cref="P:IdeaBlade.Persistence.SaveOptions.PersistenceOrder"/> of entities to be saved, the <see cref="P:IdeaBlade.Persistence.SaveOptions.UpdateBatchSize"/> 
            of commands sent to the data source, <see cref="P:IdeaBlade.Persistence.SaveOptions.FixupTempIds"/> to specify whether to fixup 
            all generated temporary Ids or only those Ids corresponding to entities passed into the SaveChanges method, 
            and the <see cref="P:IdeaBlade.Persistence.SaveOptions.ThrowExceptionOnSaveFailure"/> rule.
            <para>
            By default, <see cref="P:IdeaBlade.Persistence.SaveOptions.IsTransactional"/> is <c>true</c>, <see cref="P:IdeaBlade.Persistence.SaveOptions.TransactionSettings"/> specify
            that the UseDTC setting in the IdeaBlade.ibconfig is used,
            <see cref="P:IdeaBlade.Persistence.SaveOptions.UpdateBatchSize"/> is 1,  
            the <see cref="P:IdeaBlade.Persistence.SaveOptions.PersistenceOrder"/> is determined by a topological sort based on entity relationships,
            <see cref="P:IdeaBlade.Persistence.SaveOptions.FixupTempIds"/> is set to All,
            and <see cref="P:IdeaBlade.Persistence.SaveOptions.ThrowExceptionOnSaveFailure"/> is <see cref="F:IdeaBlade.Persistence.ThrowExceptionRule.Always"/>.
            </para>
            <para>
            If using the default <see cref="P:IdeaBlade.Persistence.SaveOptions.ThrowExceptionOnSaveFailure"/> setting you should be sure to wrap the 
            <b>SaveChanges</b> call within try/catch logic.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.SaveOptions.#ctor">
            <summary>
            Create a new instance of this class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.SaveOptions.#ctor(IdeaBlade.Persistence.SaveOptions)">
            <summary>
            A SaveOptions copy constructor.
            </summary>
            <param name="pSaveOptions"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.SaveOptions.SetPersistenceOrder(System.Type[])">
            <summary>
            Equivalent to <see cref="P:IdeaBlade.Persistence.SaveOptions.PersistenceOrder"/> property setter.
            </summary>
            <param name="pEntityTypes"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.SaveOptions.GetOrderedTableNames">
            <summary>
            Used internally by the DevForce framework.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.SaveOptions.GetDefaultPersistenceOrder(IdeaBlade.Persistence.PersistenceManager)">
            <summary>
            Gets the default persistence order using a topological sort based on entity relationships.
            </summary>
            <param name="pManager">PersistenceManager</param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.SaveOptions.IsTransactional">
            <summary>
            Gets or sets whether save processing is transactional.
            </summary>
             <value>
            	<c>true</c> if this instance is transactional; otherwise, <c>false</c>.
            </value>
            <remarks>
            Determines whether to allow any updates to
            the backend data source in the event that any errors are encountered.
            If <paramref name="pIsTransactional"/> is true, then all changes will be rejected if any
            update or insert fails.  If <paramref name="pIsTransactional"/> is false, then only the
            failing updates or inserts will not be reflected in the data source.
            <para>The length of the list of errors
            returned in the <see cref="T:IdeaBlade.Persistence.SaveResult"/> will be determined by the transactional nature of the save
            being attempted. In a transactional save, the first failure causes a rollback of the
            entire operation and only this first error will be returned in the SaveResult.  In
            a non-transactional save all of the errors encountered during the save will be returned.
            </para>
            <para>Upon success <see cref="T:System.Data.DataSet.AcceptChanges"/>, or
            <see cref="T:System.Data.DataRow.AcceptChanges"/> for a non-transactional save
            in which errors occurred, will have been called. </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.SaveOptions.TransactionSettings">
            <summary>
            Gets or sets the transactional behavior for the save. 
            </summary>
            <remarks>
            Defaults to using the UseDTC setting in IdeaBlade.ibconfig.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.SaveOptions.PersistenceOrder">
            <summary>
            Gets or sets the order in which entities should be processed 
            when persisting to a backend data source.
            </summary>
            <exception cref="T:IdeaBlade.Util.IdeaBladeException">Thrown if an entity type is unknown</exception>
            <remarks>
            Takes and returns a list of <see cref="T:IdeaBlade.Persistence.Entity"/> types in processing order.
            <para>
            If the data source contains any foreign key constraints or other hierarchical relationships
            the <b>PersistenceOrder</b> should be set to reflect this.  
            Any entity types that are not specified will be treated as if appearing after the specified types. 
            </para>
            <para>
            Processing of a save operation will be handled internally in the following sequence:
            <list type="number">
            <item>First all deletes for all tables will be processed in the inverse order to that specified by the PersistenceOrder.</item>
            <item>Next inserts and updates will be processed in the specified PersistenceOrder.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.SaveOptions.UpdateBatchSize">
            <summary>
            Gets or sets the ADO.NET 2.0 DbDataAdapter value 
            that enables or disables batch processing support, and 
            specifies the number of commands that can be executed in a batch.
            </summary>
            <remarks>
            The default value is 1, which means that batch processing is disabled.
            Use a value of 0 to indicate the largest possible setting for the provider,
            and a value greater than 1 to indicate the actual batch size wanted.
            <para>
            Note that setting this value has no effect if using an OleDb provider; you must
            use a native provider if you wish to enable batch processing.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.SaveOptions.ThrowExceptionOnSaveFailure">
            <summary>
            Gets or sets the conditions under which an exception should be thrown if the <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/> fails.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.SaveOptions.FixupTempIds">
            <summary>
            Gets or sets the option to fixup all generated temporary Ids or 
            only those Ids corresponding to entities passed into the SaveChanges method.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.SaveOptions.ExcludeFromPostSaveRefetch">
            <summary>
            Gets or sets the types of entities to be excluded from 
            the refetch that is performed after a save.
            </summary>
            <exception cref="T:IdeaBlade.Util.IdeaBladeException">Thrown if an entity type is unknown</exception>
            <remarks>
            Examples of types of entities to exclude from post-save refetch:
            <list type="bullet">
            <item>Entities that have changed solely because the creation timeStamp has changed.
            </item>
            <item>User saves a large image entity in addition to other entities in 
            the same transaction. Perhaps those other entities should be re-queried 
            and returned but not the image entity.
            </item>
            <item>User saves a modified Employee. The middle tier (SaveSecurityCheck) 
            generates three Audit objects reflecting the modification. Four objects 
            are returned to the client cache - the Employee and the 3 audit objects.
            The preferred response would be to re-read the Employee but block the Audit records.
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.FixupTempIds">
            <summary>
            SaveOptions setting determining whether to fixup all generated temporary Ids 
            or only those Ids corresponding to entities passed into the SaveChanges method.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.FixupTempIds.All">
            <summary>
            Default setting. Perform Id fixup on all generated temporary Ids.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.FixupTempIds.InSaveListOnly">
            <summary>
            Perform Id fixup only on those entities passed into the SaveChanges method.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.ThrowExceptionRule">
            <summary>
            SaveOptions setting determining how errors should be processed.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.ThrowExceptionRule.Never">
            <summary>
            Never throw an exception if <b>SaveChanges</b> fails.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.ThrowExceptionRule.OnConnectionError">
            <summary>
            Throw an exception for connection-related failures during a <b>SaveChanges</b> call.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.ThrowExceptionRule.Always">
            <summary>
            Throw an exception for any failures during a <b>SaveChanges</b> call.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.RemotingPersistenceServerProxy">
            <summary>
            This class supports the DevForce Framework infrastructure 
            and is not intended to be used directly from your code. 
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.RemotingPersistenceServerProxy.#ctor(System.String,System.Boolean)">
            <summary>
            Create an instance of this class.
            </summary>
            <param name="pDataSourceExtension"></param>
            <param name="pUseRemotePersistenceService"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.RemotingPersistenceServerProxy.Reconnect">
            <summary>
            Connect or reconnect to a PersistenceServer.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.RemotingPersistenceServerProxy.Disconnect">
            <summary>
            Disconnect from the PersistenceServer.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.IPersistenceServerSaving">
            <summary>
            Interface for intercepting the save operation before the transaction has occurred on the server.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.IPersistenceServerSaving.OnSaving(IdeaBlade.Persistence.PersistenceServerSavingEventArgs)">
            <summary>
            Called after SaveSecurityChecks but before save transaction occurs on the server.
            </summary>
            <remarks>
            The event handler can use the <see cref="P:IdeaBlade.Persistence.PersistenceServerSavingEventArgs.PersistenceManager"/> 
            to access the PersistenceManager containing the list of entities to be saved.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.PersistenceServerSavingEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.Persistence.IPersistenceServerSaving.Saving"/> handler.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceServerSavingEventArgs.#ctor(System.Security.Principal.IPrincipal,IdeaBlade.Persistence.PersistenceManager,System.Object)">
            <summary>
            Initialize a new instance of this class.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerSavingEventArgs.Principal">
            <summary>
            Gets or sets the Principal involved in this event.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerSavingEventArgs.PersistenceManager">
            <summary>
            Gets the server-side PersistenceManager involved in this event.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceServerSavingEventArgs.Context">
            <summary>
            Gets or sets the Context object involved in this event.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.UniqueIdCollection">
            <summary>
            Represents a collection of <see cref="T:IdeaBlade.Persistence.UniqueId"/> objects.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.UniqueIdCollection.#ctor">
            <summary>
            Initializes a new instance of the UniqueIdCollection class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.UniqueIdCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialize into a new instance of the UniqueIdCollection class.
            </summary>
            <param name="pInfo">info</param>
            <param name="pContext">context</param>
        </member>
        <member name="M:IdeaBlade.Persistence.UniqueIdCollection.AddRange(IdeaBlade.Persistence.UniqueIdCollection)">
            <summary>
            Add the elements of the specified collection to the end of the list.
            </summary>
            <param name="pCollection"></param>
        </member>
        <member name="P:IdeaBlade.Persistence.UniqueIdCollection.ContainsIdentityIds">
            <summary>
            Returns whether the list contains any auto-incrementing (Identity) columns.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.SessionBundle">
            <summary>
            Returned from a <see cref="M:IdeaBlade.Persistence.PersistenceManager.Login(IdeaBlade.Persistence.ILoginCredential)"/> call to uniquely
            identify a client session.
            </summary>
            <remarks>
            After <see cref="M:IdeaBlade.Persistence.PersistenceManager.Login(IdeaBlade.Persistence.ILoginCredential)"/>, all client and server exchanges are accompanied 
            by this tamper-proof certification.  The server typically caches the <b>SessionBundle</b> for performance; 
            however, the cached version is not essential and can be (re)constructed as needed so that load-balanced, 
            multi-server applications can be truly stateless.
            <para>Although the <b>SessionBundle</b> is returned from a Login, your application code will rarely, if ever,
            need to use the SessionBundle directly.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.SessionBundle.#ctor(System.Security.Principal.IPrincipal)">
            <summary>
            Creates a new bundle for a specified principal.  For internal use only.
            </summary>
            <param name="pPrincipal"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.SessionBundle.Encrypt(IdeaBlade.Persistence.ILoginCredential,System.String)">
            <summary>
            Encrypts a LoginCredential.  For internal use only.
            </summary>
            <param name="pCredential"></param>
            <param name="pEncryptionKey"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.SessionBundle.Decrypt(System.String)">
            <summary>
            Decrypts a LoginCredential.  For internal use only.
            </summary>
            <param name="pEncryptionKey"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.SessionBundle.ToBytes(System.Boolean)">
            <summary>
            Serialize the object to a byte array.
            </summary>
            <param name="pCompress">True to compress the serialized stream</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.SessionBundle.FromBytes(System.Byte[],System.Boolean)">
            <summary>
            Deserialize a byte array into a SessionBundle.
            </summary>
            <param name="pBytes"></param>
            <param name="pDecompress">True to decompress the deserialized stream</param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.SessionBundle.NullSessionBundle">
            <summary>
            A null session bundle, for internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.SessionBundle.SessionKey">
            <summary>
            The SessionKey associated with this bundle.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.SessionBundle.Principal">
            <summary>
            The Principal associated with this bundle. 
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.SessionBundle.EncryptedCredential">
            <summary>
            Encrypted login credentials.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.RestoreStrategy">
            <summary>
            Determines the options to use when restoring an <see cref="T:IdeaBlade.Persistence.EntitySet"/>.
            </summary>
            <remarks>
            A <b>RestoreStrategy</b> is used when restoring an EntitySet with
            one of the <see cref="T:IdeaBlade.Persistence.PersistenceManager"/> <b>RestoreEntitySet</b> methods.
            </remarks>
        </member>
        <member name="F:IdeaBlade.Persistence.RestoreStrategy.Normal">
            <summary>
            Restore the <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultSaveOptions"/> and <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultQueryStrategy"/> 
            from the EntitySet, and use MergeStrategy.PreserveChanges.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.RestoreStrategy.#ctor(System.Boolean,System.Boolean,IdeaBlade.Persistence.MergeStrategy)">
            <summary>
            Initialize a new RestoreStrategy.
            </summary>
            <param name="pRestoreSaveOptions">Whether the <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultSaveOptions"/> should be restored using the value in the EntitySet</param>
            <param name="pRestoreQueryStrategy">Whether the <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultQueryStrategy"/> should be restored using the value in the EntitySet</param>
            <param name="pMergeStrategy">The merge strategy to use when restoring the EntitySet</param>
        </member>
        <member name="M:IdeaBlade.Persistence.RestoreStrategy.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.RestoreStrategy.op_Equality(IdeaBlade.Persistence.RestoreStrategy,IdeaBlade.Persistence.RestoreStrategy)">
            <summary>
            Operator == overload.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.RestoreStrategy.op_Inequality(IdeaBlade.Persistence.RestoreStrategy,IdeaBlade.Persistence.RestoreStrategy)">
            <summary>
            Operator != overload.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.RestoreStrategy.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:IdeaBlade.Persistence.RestoreStrategy.MergeStrategy">
            <summary>
            Returns the MergeStrategy for this RestoreStrategy.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.RestoreStrategy.RestoreSaveOptions">
            <summary>
            Returns whether the <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultSaveOptions"/> should be restored using the value int the EntitySet.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.RestoreStrategy.RestoreQueryStrategy">
            <summary>
            Returns whether the <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultQueryStrategy"/> should be restored using the value int the EntitySet.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.DynamicEntity">
            <summary>
            Base class for all Dynamic entities.
            <seealso cref="T:IdeaBlade.Persistence.DynamicEntityTypeBuilder"/>
            <seealso cref="T:IdeaBlade.Persistence.IDynamicEntitySecurityManager"/>
            </summary>
            <remarks>
            A dynamic entity type is used to define a class which inherits from the 
            DevForce <see cref="T:IdeaBlade.Persistence.Entity"/> but whose schema is not known until runtime.  The schema or structure 
            of a dynamic entity type can be set either when it is created by the <see cref="T:IdeaBlade.Persistence.DynamicEntityTypeBuilder"/>
            or when instances of that type are first queried for from the <see cref="T:IdeaBlade.Persistence.PersistenceManager"/>.
            Dynamic entity type instances reside in the entity cache of a PersistenceManager 
            just like instances of the static entity types. They can be queried, created, modified and deleted. (Persisting
            data to the backend datasource requires implementation of a custom <b>IAdapterProvider</b>.)
            <para>
            Dynamic entity types can be defined with or without a primary key.
            Instances of dynamic entity types with a primary key operate almost exactly like regular DevForce entity types, and follow
            the same merge semantics when the structure of the query matches the type's schema.
            </para>
            <para>
            Instances of dynamic entity types without a primary key can be queried into the PersistenceManager cache
            like any other entity type, but because no primary key exists the results cannot be merged with previously
            retrieved data.  Because a merge cannot be performed without a primary key, previously retrieved
            data for the dynamic entity is discarded each time a query for the type is executed.
            Because of this behavior, the schema for a dynamic type without a primary key can be changed each 
            time it is queried for.  
            </para>
            <para>
            Currently dynamic entities can be queried for using either a <b>PassthruRdbQuery</b> against a database-backed datasource 
            or from the local cache using an <see cref="T:IdeaBlade.Persistence.EntityQuery"/>.
            </para>
            <para>
            To implement query and/or save security of dynamic entities, you must implement the 
            <see cref="T:IdeaBlade.Persistence.IDynamicEntitySecurityManager"/>.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.DynamicEntity.#ctor(System.Data.DataRowBuilder)">
            <summary>
            Initializes a new instance of the DynamicEntityDataRow.
            Constructs a row from the builder.
            <para>** For internal use only. **</para>
            </summary>
            <param name="pRowBuilder"></param>
        </member>
        <member name="T:IdeaBlade.Persistence.DataSetQueryFormatter">
            <summary>
               This class supports the DevForce Framework infrastructure and is not 
               intended to be used directly from your code.
            </summary>
            <remarks>
             <b>QueryHelper</b> is a singleton that provides a set of static functions to handle standard
              query parsing and construction tasks for cache queries.
            </remarks>
        </member>
        <member name="F:IdeaBlade.Persistence.DataSetQueryFormatter.Instance">
            <summary>
            Singleton instance of the QueryHelper.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSetQueryFormatter.FormatQueryClause(System.String,IdeaBlade.Persistence.EntityQueryOp,System.Object)">
            <summary>
            Constructs a query clause that supports ADO Query (DataTable Select) syntax.
            </summary>
            <param name="pColumnName">The database column name</param>
            <param name="pOperator">The query operator</param>
            <param name="pValue">The arguments needed by the query operator</param>
            <returns>A syntactically correct ADO DataTable Select query clause</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.DataSetQueryFormatter.FormatQueryClause(System.String,System.Type,IdeaBlade.Persistence.EntityQueryOp,System.Object)">
            <summary>
            Constructs a query clause that supports ADO Query (DataTable Select) syntax.
            </summary>
            <param name="pColumnName">The database column name</param>
            <param name="pColumnDataType">The column datatype.</param>
            <param name="pOperator">The query operator</param>
            <param name="pValue">The arguments needed by the query operator</param>
            <returns>A syntactically correct ADO DataTable Select query clause</returns>
        </member>
        <member name="T:IdeaBlade.Persistence.INotificationManager">
            <summary>
            Interface describing the public methods available to a <see cref="T:IdeaBlade.Persistence.ServerNotifyDelegate"/> implementation to
            communicate with a notification manager.
            </summary>
            <remarks>
            An implementation of a <see cref="T:IdeaBlade.Persistence.ServerNotifyDelegate"/> will use these methods to retrieve information about
            its subscribers and to communicate data back to its subscribers.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.INotificationManager.Send(System.Guid,System.Object[])">
            <summary>
            Called by a <see cref="T:IdeaBlade.Persistence.ServerNotifyDelegate"/> implementation to send information to all current subscribers.
            </summary>
            <param name="pServiceKey">The service key passed to your method</param>
            <param name="pArgs">Data to be sent to subscribers</param>
        </member>
        <member name="M:IdeaBlade.Persistence.INotificationManager.Send(System.Guid,IdeaBlade.Persistence.NotificationSubscriber,System.Object[])">
            <summary>
            Called by a <see cref="T:IdeaBlade.Persistence.ServerNotifyDelegate"/> implementation to send information to a specific subscriber.
            </summary>
            <param name="pServiceKey">The service key passed to your method</param>
            <param name="pSubscriber">The subscriber to be notified</param>
            <param name="pArgs">Data to be sent to the subscriber</param>
            <remarks>
            Use the <see cref="M:IdeaBlade.Persistence.INotificationManager.GetSubscribers(System.Guid)"/> method to retrieve a list of subscribers.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.INotificationManager.GetSubscribers(System.Guid)">
            <summary>
            Called by a <see cref="T:IdeaBlade.Persistence.ServerNotifyDelegate"/> implementation to retrieve a list of current subscribers.
            </summary>
            <param name="pServiceKey">The service key passed to your method</param>
            <returns>List of subscribers</returns>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityList`1">
            <summary>
            A strongly-typed <see cref="T:IdeaBlade.Util.BindableList`1"/> holding <see cref="T:IdeaBlade.Persistence.Entity"/> objects.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <remarks>
            An <b>EntityList</b> is returned by all the generic <b>GetEntities&lt;T&gt;</b> methods in <see cref="T:IdeaBlade.Persistence.PersistenceManager"/>
            to return strongly-typed lists of entities.  
            <para>
            The <b>EntityList</b> has all the benefits of a <see cref="T:IdeaBlade.Util.BindableList`1"/> but can also
            optionally be used as a "live" or managed list through several means:
            1) The <see cref="M:IdeaBlade.Persistence.EntityList`1.InitializeRelationConstraint(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,System.Boolean)"/> method can be used to set a live list of parent or child
            entities; or 2) for complex filtering capabilities an <see cref="T:IdeaBlade.Persistence.EntityListManager`1"/> can be assigned to 
            the <see cref="P:IdeaBlade.Util.BindableList`1.ListManager"/> property. 
            </para>
            <para>
            The <see cref="P:IdeaBlade.Persistence.EntityList`1.ShouldRemoveDeletedEntities"/> property can also be used independent from other filtering
            to indicate whether deleted entities should automatically be removed from the list.
            </para>
            <para>
            An <b>EntityList</b> differs from a <see cref="T:IdeaBlade.Persistence.ReadOnlyEntityList`1"/> in that it supports the 
            <see cref="M:System.Collections.ObjectModel.Collection.Add"/> and 
            <see cref="M:System.Collections.ObjectModel.Collection.Remove"/> methods, and will not be a "live" list unless
            a <see cref="P:IdeaBlade.Util.BindableList`1.ListManager"/> has been attached.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityList`1.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the class from a strongly-typed collection.
            </summary>
            <param name="pCollection">Collection of Entities</param>
            <remarks>
            Note that if the collection passed is an EntityList or <see cref="T:IdeaBlade.Persistence.ReadOnlyEntityList`1"/> 
            with a <see cref="P:IdeaBlade.Util.BindableList`1.ListManager"/>
            assigned, the ListManager will also manage this list.  If this behavior is not wanted, call
            <see cref="M:IdeaBlade.Persistence.EntityListManager`1.UnmanageList(IList)"/> for this list.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityList`1.#ctor(IdeaBlade.Persistence.EntityList{`0},System.Boolean)">
            <summary>
            
            </summary>
            <param name="pList"></param>
            <param name="pIsWrapper"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityList`1.InitializeRelationConstraint(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,System.Boolean)">
            <summary>
            Initializes a constraint on this list to transform it into a "live" or managed list.
            </summary>
            <param name="pParentEntity">Parent entity</param>
            <param name="pEntityRelation">Parent-child relationship</param>
            <param name="pRefresh">If true the constraint will be applied to the list immediately</param>
            <remarks>
            Initializing a constraint ensures that all of the list elements will be children of the specified
            parent entity via the <see cref="T:IdeaBlade.Persistence.EntityRelation"/> indicated.
            <para>
            Constructing an EntityList and calling <b>InitializeRelationConstraint</b> is analogous to calling
            one of the PersistenceManager <b>GetChildren&lt;T&gt;</b> methods for a parent entity and specifying that
            a managed list be returned.
            </para>
            <para>
            An <see cref="T:IdeaBlade.Persistence.EntityListManager`1"/> is created to manage this list from the constraint specified.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityList`1.RemoveRelationConstraint">
            <summary>
            Removes any constraint on this list added through the <see cref="M:IdeaBlade.Persistence.EntityList`1.InitializeRelationConstraint(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityList`1.ForceRefetch(IdeaBlade.Persistence.MergeStrategy)">
            <summary>
            Forces an EntityList with a relation constraint to refresh itself.
            </summary>
            <param name="pMergeStrategy"></param>
            <remarks>
            A relation constraint is added using the <see cref="M:IdeaBlade.Persistence.EntityList`1.InitializeRelationConstraint(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,System.Boolean)"/> method.
            <para>
            Child entities are re-fetched using the <see cref="F:IdeaBlade.Persistence.FetchStrategy.DataSourceThenCache"/>
            FetchStrategy, then the specified <see cref="T:MergeStrategy"/> is applied.
            </para>
            </remarks>
            <exception cref="T:System.NotSupportedException">Thrown if no relation constraints have been added</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Occurs when any change is made to the list.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityList`1.ShouldDelete(`0)">
            <summary>
            The EntityList is responsible for removal of items that do not belong
            in the list when the item changes. 
            </summary>
            <param name="pEntity"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityList`1.ShouldRemoveDeletedEntities">
            <summary>
            Gets or sets whether to remove an entity from this list when the entity is deleted.
            </summary>
            <remarks>
            Calling <see cref="M:Entity.Delete"/> on an Entity does not automatically cause the
            entity to be removed from a list, unless the <b>ShouldRemoveDeletedEntities</b> flag is on.
            <para>
            If deleted entities are being automatically removed by the list, be sure not to pass the list to a 
            <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges(System.Collections.IEnumerable)"/> call to have the entities removed from the backend data source;
            instead place the deleted entities in another array or list if you need to track them for persistence purposes.
            </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.Persistence.PersistenceManager">
             <summary>
             Management class for all high-level retrieval, caching and persistence operations on business objects. 
             <seealso cref="T:IdeaBlade.Persistence.Server.PersistenceServer"/>
             <seealso cref="T:IdeaBlade.Persistence.EntityQuery"/>
             <seealso cref="T:IdeaBlade.Persistence.Entity"/>
             </summary>
             <remarks>
             The <b>PersistenceManager</b> is responsible for communicating with a <see cref="T:IdeaBlade.Persistence.Server.PersistenceServer"/>
             to retrieve entities from and persist entities to their backend data sources, 
             managing entities in its cache, creating new entities, ensuring entity security, and persisting its
             cache to local storage to facilitate disconnected access.
            <para>
             A single PersistenceManager can manage entities backed by any number of data sources.  It caches objects and queries,
             both to improve performance and to support offline operation of applications.  Entities remain in the cache 
             until the application terminates or they are explicitly removed.  
             </para>
             <para>
             Use <see cref="M:IdeaBlade.Persistence.PersistenceManager.Login(IdeaBlade.Persistence.ILoginCredential)"/> and <see cref="M:IdeaBlade.Persistence.PersistenceManager.Logout"/> to validate a user's credentials and
             provide session-level security to the <see cref="T:IdeaBlade.Persistence.Server.PersistenceServer"/>.  
             You'll need to implement <see cref="T:IdeaBlade.Persistence.IPersistenceLoginManager"/> to perform
             this validation.  If login security is required, be sure to call <b>Login</b> prior to performing any other
             PersistenceManager actions.
             </para>
            <para>
             Use <see cref="M:IdeaBlade.Persistence.PersistenceManager.Connect"/> and <see cref="M:IdeaBlade.Persistence.PersistenceManager.Disconnect"/> to explicitly manage connection state to the 
             PersistenceServer.  Use the <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> delegate to set up an error handler to 
             catch connection and other PersistenceServer problems.  Use <see cref="M:IdeaBlade.Persistence.PersistenceManager.CheckDataSourceKey(System.String)"/>
             to determine whether a data source connection is available.
             </para>
             <para>
             Use the <see cref="M:IdeaBlade.Persistence.PersistenceManager.GetEntity(IdeaBlade.Persistence.IEntityQuery)"/> and 
             <see cref="M:IdeaBlade.Persistence.PersistenceManager.GetEntities(IdeaBlade.Persistence.IEntityQuery)"/> methods, or one of their many overloads, 
             to retrieve <see cref="T:IdeaBlade.Persistence.Entity"/> objects from either the backend data source or the
             PersistenceManager's cache.  Use <see cref="M:IdeaBlade.Persistence.PersistenceManager.CreateEntity`1()"/> to create new business objects.
             Use one of the <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/> overloads to persist changed objects to the backend data source.
             </para>
             <para>Use <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveEntitySet(System.String)"/> to save cached business
             objects and the state of the PersistenceManager to the local file system.  Use <see cref="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(System.String)"/>
             to restore from the saved file.  Use <see cref="M:IdeaBlade.Persistence.PersistenceManager.ImportEntities(System.Collections.IEnumerable,IdeaBlade.Persistence.MergeStrategy)"/> to move entities between PersistenceManagers.
             </para>
             <para>
             Use <see cref="M:IdeaBlade.Persistence.PersistenceManager.BeginCheckpoint"/> to begin an in-memory log recording changes to cached objects, and <see cref="M:IdeaBlade.Persistence.PersistenceManager.RollbackCheckpoint"/>
             to undo those object changes, or <see cref="M:IdeaBlade.Persistence.PersistenceManager.ClearCheckpoints"/> to stop recording.
             </para>
             <para><b>Note:</b> The PersistenceManager is not thread-safe.</para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.#ctor">
            <overloads>
            <summary>Initialize a new instance of the PersistenceManager class.</summary>
            </overloads>
             <summary>
             Initialize a new instance of the PersistenceManager class and connect to the backend PersistenceServer.
             </summary>
             <remarks>
             Equivalent to <see cref="M:IdeaBlade.Persistence.PersistenceManager.#ctor(System.Boolean,System.String)">PersistenceManager(Boolean, String)</see>
             requesting that a connection to the PersistenceServer be made, and using an empty data source extension string.
             <para>
             Every PersistenceManager (and PersistenceServer) is associated with a data source extension.  By default, if an
             extension is not specified, then an "empty" extension is used.  See the "Data Source Keys, DataSourceKeyResolvers, and Data Source Extensions"
             topic in the Developers Guide for more information on data source extensions.
             </para>
             <para>
             No connection to data sources is made during PersistenceManager initialization.
             </para>
             <para>
             A <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceManagerCreated"/> event is fired upon creation.
             </para>
             </remarks>
             <example><code lang="C#">
private bool InitializePM() {
  string runTimeEnv;
#if TEST
  runTimeEnv = "Test";
#else
  runTimeEnv = "Prod";
#endif

  // Initialize a PM for the given data source extension, and set up an error handler.
  PersistenceManager pm = new PersistenceManager(false, runTimeEnv);
  pm.PersistenceServerError += PersistenceServerErrorHandler;

  // Explicitly connect to the PersistenceServer now.
  // Note that no data source connection is made until entities are accessed.
  try {
    pm.Connect();
  } catch (PersistenceServerException pse) {
    MessageBox.Show(pse.Message, "PersistenceServerException");
  } catch (Exception e) {
    MessageBox.Show(e.Message, "Exception");
  }

  return pm.IsConnected;
}
private void PersistenceServerErrorHandler(object pSender, PersistenceServerErrorEventArgs e) {
  // Always a good idea to log all exception info.
  Exception ex = e.Exception;
  while (ex != null) {
    TraceFns.WriteLine(ex.ToString());
    ex = ex.InnerException;
  }

  MessageBox.Show("Trying to handle error");
  // Leave e.Handled = false if the PersistenceServerError should be thrown back to the calling code
  e.Handled = true;         // exception will not be thrown
}
</code></example><example><code lang="VB">
Private Function InitializePM() As Boolean
   Dim runTimeEnv As String
#If Test Then
   runTimeEnv = "Test"
#Else
   runTimeEnv = "Prod"
#End If

   ' Initialize a PM for the given data source extension, and set up an error handler.
   Dim pm As New PersistenceManager(False, runTimeEnv)
   AddHandler pm.PersistenceServerError, AddressOf PersistenceServerErrorHandler

   ' Explicitly connect to the PersistenceServer now.
   ' Note that no data source connection is made until entities are accessed.
   Try
      pm.Connect()
   Catch pse As PersistenceServerException
      MessageBox.Show(pse.Message, "PersistenceServerException")
   Catch e As Exception
      MessageBox.Show(e.Message, "Exception")
   End Try

   Return pm.IsConnected
End Function

Private Sub PersistenceServerErrorHandler(ByVal pSender As Object, ByVal e As PersistenceServerErrorEventArgs)
  ' Always a good idea to log all exception info.
  Dim ex As Exception = e.Exception
  While Not (ex Is Nothing)
    TraceFns.WriteLine(ex.ToString())
    ex = ex.InnerException
  End While

  MessageBox.Show("Trying to handle error")
  ' Leave e.Handled = false if the PersistenceServerError should be thrown back to the calling code
  e.Handled = True ' exception will not be thrown
End Sub
	</code></example>
             <exception cref="T:IdeaBlade.Util.IdeaBladeException">Thrown for miscellaneous initialization failures</exception>
             <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for connection failures</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.#ctor(System.Boolean)">
            <summary>
            Initialize a new instance of the PersistenceManager class and optionally connect to the PersistenceServer.
            </summary>
            <param name="pShouldConnect">True if a connection to the PersistenceServer should be made.</param>
            <remarks>
            Equivalent to <see cref="M:IdeaBlade.Persistence.PersistenceManager.#ctor(System.Boolean,System.String)">PersistenceManager(Boolean, String)</see>
            using the connection parameter specified and an empty data source extension string.
            <para>
            Every PersistenceManager (and PersistenceServer) is associated with a data source extension.  By default, if an
            extension is not specified, then an "empty" extension is used.  See the "Data Source Keys, DataSourceKeyResolvers, and Data Source Extensions"
            topic in the Developers Guide for more information on data source extensions.
            </para>
            <para>
            No connection to data sources is made during PersistenceManager initialization.
            </para>
            <para>
            A <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceManagerCreated"/> event is fired upon creation.
            </para>
            </remarks>
            <example><code lang="C#">
private bool InitializePM() {
  string runTimeEnv;
#if TEST
  runTimeEnv = "Test";
#else
  runTimeEnv = "Prod";
#endif

  // Initialize a PM for the given data source extension, and set up an error handler.
  PersistenceManager pm = new PersistenceManager(false, runTimeEnv);
  pm.PersistenceServerError += PersistenceServerErrorHandler;

  // Explicitly connect to the PersistenceServer now.
  // Note that no data source connection is made until entities are accessed.
  try {
    pm.Connect();
  } catch (PersistenceServerException pse) {
    MessageBox.Show(pse.Message, "PersistenceServerException");
  } catch (Exception e) {
    MessageBox.Show(e.Message, "Exception");
  }

  return pm.IsConnected;
}
private void PersistenceServerErrorHandler(object pSender, PersistenceServerErrorEventArgs e) {
  // Always a good idea to log all exception info.
  Exception ex = e.Exception;
  while (ex != null) {
    TraceFns.WriteLine(ex.ToString());
    ex = ex.InnerException;
  }

  MessageBox.Show("Trying to handle error");
  // Leave e.Handled = false if the PersistenceServerError should be thrown back to the calling code
  e.Handled = true;         // exception will not be thrown
}
</code></example><example><code lang="VB">
Private Function InitializePM() As Boolean
   Dim runTimeEnv As String
#If Test Then
   runTimeEnv = "Test"
#Else
   runTimeEnv = "Prod"
#End If

   ' Initialize a PM for the given data source extension, and set up an error handler.
   Dim pm As New PersistenceManager(False, runTimeEnv)
   AddHandler pm.PersistenceServerError, AddressOf PersistenceServerErrorHandler

   ' Explicitly connect to the PersistenceServer now.
   ' Note that no data source connection is made until entities are accessed.
   Try
      pm.Connect()
   Catch pse As PersistenceServerException
      MessageBox.Show(pse.Message, "PersistenceServerException")
   Catch e As Exception
      MessageBox.Show(e.Message, "Exception")
   End Try

   Return pm.IsConnected
End Function

Private Sub PersistenceServerErrorHandler(ByVal pSender As Object, ByVal e As PersistenceServerErrorEventArgs)
  ' Always a good idea to log all exception info.
  Dim ex As Exception = e.Exception
  While Not (ex Is Nothing)
    TraceFns.WriteLine(ex.ToString())
    ex = ex.InnerException
  End While

  MessageBox.Show("Trying to handle error")
  ' Leave e.Handled = false if the PersistenceServerError should be thrown back to the calling code
  e.Handled = True ' exception will not be thrown
End Sub
	</code></example>
            <exception cref="T:IdeaBlade.Util.IdeaBladeException">Thrown for miscellaneous initialization failures</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for connection failures</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.#ctor(System.Boolean,System.String)">
            <summary>
            Initialize a new instance of the PersistenceManager class for the specified data source key extension, and 
            optionally connect to the PersistenceServer.
            </summary>
            <param name="pShouldConnect">True if a connection to the PersistenceServer should be made.</param>
            <param name="pDataSourceExtension">The DataSourceKey extension to search for in IdeaBlade.ibconfig.</param>
            <remarks>
            You can use the <paramref name="pDataSourceExtension"/> to determine the run-time data source key(s) to be
            used.  Every PersistenceManager (and PersistenceServer) is associated with a data source extension.  By default, if an
            extension is not specified, then an "empty" extension is used.  See the "Data Source Keys, DataSourceKeyResolvers, and Data Source Extensions"
            topic in the Developers Guide for more information on data source extensions. 
            The use of different data source extensions can be especially beneficial as you move your application between
            development, test and production environments, and for other situations in which the data source to be accessed 
            will be determined at run time.  The resolved <b>DataSourceKey</b>(s) must either be specified in the
            <b>IdeaBlade.ibconfig</b> file or through a custom implementation of <see cref="T:IdeaBlade.Persistence.IDataSourceKeyResolver"/>.
            <para>
            You can also choose whether a connection to the <see cref="T:IdeaBlade.Persistence.Server.PersistenceServer"/>
            should be made now.  If <paramref name="pShouldConnect"/> is <c>true</c> you will not be able to catch
            any <see cref="T:IdeaBlade.Persistence.PersistenceServerException"/> thrown due to connection problems in a
            <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler, since the handler will not yet be set; you
            should instead wrap the call in a try/catch.  If <paramref name="pShouldConnect"/> is <c>false</c>
            then you will need to call the <see cref="M:IdeaBlade.Persistence.PersistenceManager.Connect"/> method when you are ready to begin communicating with the 
            PersistenceServer.
            </para>
            <para>
            No connection to data sources is made during PersistenceManager initialization.
            </para>
            <para>
            A <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceManagerCreated"/> event is fired upon creation.
            </para>
            </remarks>
            <example><code lang="C#">
private bool InitializePM() {
  string runTimeEnv;
#if TEST
  runTimeEnv = "Test";
#else
  runTimeEnv = "Prod";
#endif

  // Initialize a PM for the given data source extension, and set up an error handler.
  PersistenceManager pm = new PersistenceManager(false, runTimeEnv);
  pm.PersistenceServerError += PersistenceServerErrorHandler;

  // Explicitly connect to the PersistenceServer now.
  // Note that no data source connection is made until entities are accessed.
  try {
    pm.Connect();
  } catch (PersistenceServerException pse) {
    MessageBox.Show(pse.Message, "PersistenceServerException");
  } catch (Exception e) {
    MessageBox.Show(e.Message, "Exception");
  }

  return pm.IsConnected;
}
private void PersistenceServerErrorHandler(object pSender, PersistenceServerErrorEventArgs e) {
  // Always a good idea to log all exception info.
  Exception ex = e.Exception;
  while (ex != null) {
    TraceFns.WriteLine(ex.ToString());
    ex = ex.InnerException;
  }

  MessageBox.Show("Trying to handle error");
  // Leave e.Handled = false if the PersistenceServerError should be thrown back to the calling code
  e.Handled = true;         // exception will not be thrown
}
</code></example><example><code lang="VB">
Private Function InitializePM() As Boolean
   Dim runTimeEnv As String
#If Test Then
   runTimeEnv = "Test"
#Else
   runTimeEnv = "Prod"
#End If

   ' Initialize a PM for the given data source extension, and set up an error handler.
   Dim pm As New PersistenceManager(False, runTimeEnv)
   AddHandler pm.PersistenceServerError, AddressOf PersistenceServerErrorHandler

   ' Explicitly connect to the PersistenceServer now.
   ' Note that no data source connection is made until entities are accessed.
   Try
      pm.Connect()
   Catch pse As PersistenceServerException
      MessageBox.Show(pse.Message, "PersistenceServerException")
   Catch e As Exception
      MessageBox.Show(e.Message, "Exception")
   End Try

   Return pm.IsConnected
End Function

Private Sub PersistenceServerErrorHandler(ByVal pSender As Object, ByVal e As PersistenceServerErrorEventArgs)
  ' Always a good idea to log all exception info.
  Dim ex As Exception = e.Exception
  While Not (ex Is Nothing)
    TraceFns.WriteLine(ex.ToString())
    ex = ex.InnerException
  End While

  MessageBox.Show("Trying to handle error")
  ' Leave e.Handled = false if the PersistenceServerError should be thrown back to the calling code
  e.Handled = True ' exception will not be thrown
End Sub
	</code></example>
            <exception cref="T:IdeaBlade.Util.IdeaBladeException">Thrown for miscellaneous initialization failures</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for connection failures</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.#ctor(System.Boolean,System.String,IdeaBlade.Persistence.PersistenceServiceOption)">
            <summary>
            Initialize a new instance of the PersistenceManager class for the specified data source key extension 
            and optionally connect to the PersistenceServer, with the option to use local or remote data sources.
            </summary>
            <param name="pShouldConnect">True if a connection to the PersistenceServer should be made.</param>
            <param name="pDataSourceExtension">The DataSourceKey extension to search for in IdeaBlade.ibconfig.</param>
            <param name="pPersistenceServiceOption">Determines whether to use local or remote data sources.</param>
            <remarks>
            You can use the <paramref name="pDataSourceExtension"/> to determine the run-time data source key(s) to be
            used.  Every PersistenceManager (and PersistenceServer) is associated with a data source extension.  By default, if an
            extension is not specified, then an "empty" extension is used.  See the "Data Source Keys, DataSourceKeyResolvers, and Data Source Extensions"
            topic in the Developers Guide for more information on data source extensions. 
            The use of different data source extensions can be especially beneficial as you move your application between
            development, test and production environments, and for other situations in which the data source to be accessed 
            will be determined at run time.  The resolved <b>DataSourceKey</b>(s) must either be specified in the
            <b>IdeaBlade.ibconfig</b> file or through a custom implementation of <see cref="T:IdeaBlade.Persistence.IDataSourceKeyResolver"/>.
            <para>
            You can also choose whether a connection to the <see cref="T:IdeaBlade.Persistence.Server.PersistenceServer"/>
            should be made now.  If <paramref name="pShouldConnect"/> is <c>true</c> you will not be able to catch
            any <see cref="T:IdeaBlade.Persistence.PersistenceServerException"/> thrown due to connection problems because a 
            <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler, since the handler will not yet be set; you
            should instead wrap the call in a try/catch. If <paramref name="pShouldConnect"/> is <c>false</c>
            then you will need to call the <see cref="M:IdeaBlade.Persistence.PersistenceManager.Connect"/> method when you are ready to begin communicating with the 
            PersistenceServer.
            </para>
            <para>
            Use the <paramref name="pPersistenceServiceOption"/> to explicitly specify whether you will be using local or
            remote data sources.  By default the <see cref="T:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo"/> in the IdeaBlade.ibconfig file 
            determines this, but if you need to use both local and remote data sources within the same application you'll use
            the PersistenceServiceOption to indicate what the PersistenceManager will use.  See the "Access Both Local and Remote Data Sources 
            In the Same N-tier Application" topic in the Developers Guide for more information.
            </para>
            <para>
            No connection to data sources is made during PersistenceManager initialization.
            </para>
            <para>
            A <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceManagerCreated"/> event is fired upon creation.
            </para>
            </remarks>
            <example><code lang="C#">
private bool InitializePM() {
  string runTimeEnv;
#if TEST
  runTimeEnv = "Test";
#else
  runTimeEnv = "Prod";
#endif

  // Initialize a PM for the given data source extension, and set up an error handler.
  PersistenceManager pm = new PersistenceManager(false, runTimeEnv);
  pm.PersistenceServerError += PersistenceServerErrorHandler;

  // Explicitly connect to the PersistenceServer now.
  // Note that no data source connection is made until entities are accessed.
  try {
    pm.Connect();
  } catch (PersistenceServerException pse) {
    MessageBox.Show(pse.Message, "PersistenceServerException");
  } catch (Exception e) {
    MessageBox.Show(e.Message, "Exception");
  }

  return pm.IsConnected;
}
private void PersistenceServerErrorHandler(object pSender, PersistenceServerErrorEventArgs e) {
  // Always a good idea to log all exception info.
  Exception ex = e.Exception;
  while (ex != null) {
    TraceFns.WriteLine(ex.ToString());
    ex = ex.InnerException;
  }

  MessageBox.Show("Trying to handle error");
  // Leave e.Handled = false if the PersistenceServerError should be thrown back to the calling code
  e.Handled = true;         // exception will not be thrown
}
</code></example><example><code lang="VB">
Private Function InitializePM() As Boolean
   Dim runTimeEnv As String
#If Test Then
   runTimeEnv = "Test"
#Else
   runTimeEnv = "Prod"
#End If

   ' Initialize a PM for the given data source extension, and set up an error handler.
   Dim pm As New PersistenceManager(False, runTimeEnv)
   AddHandler pm.PersistenceServerError, AddressOf PersistenceServerErrorHandler

   ' Explicitly connect to the PersistenceServer now.
   ' Note that no data source connection is made until entities are accessed.
   Try
      pm.Connect()
   Catch pse As PersistenceServerException
      MessageBox.Show(pse.Message, "PersistenceServerException")
   Catch e As Exception
      MessageBox.Show(e.Message, "Exception")
   End Try

   Return pm.IsConnected
End Function

Private Sub PersistenceServerErrorHandler(ByVal pSender As Object, ByVal e As PersistenceServerErrorEventArgs)
  ' Always a good idea to log all exception info.
  Dim ex As Exception = e.Exception
  While Not (ex Is Nothing)
    TraceFns.WriteLine(ex.ToString())
    ex = ex.InnerException
  End While

  MessageBox.Show("Trying to handle error")
  ' Leave e.Handled = false if the PersistenceServerError should be thrown back to the calling code
  e.Handled = True ' exception will not be thrown
End Sub
	</code></example>
            <exception cref="T:IdeaBlade.Util.IdeaBladeException">Thrown for miscellaneous initialization failures</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for connection failures</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.#ctor(IdeaBlade.Persistence.PersistenceManager)">
             <summary>
             Initialize a new instance of the PersistenceManager class using the credentials and settings from another PersistenceManager.
             </summary>
             <param name="pPersistenceManager">PersistenceManager to copy settings from</param>
             <remarks>
             This copy constructor will create a new "empty" (no data) PersistenceManager with the same settings, 
             defaults and connection status as the specified PersistenceManager.  The new PersistenceManager will be "logged in" to
             the PersistenceServer with the credentials already provided in the passed PersistenceManager.
             See the "Logging In a Second PersistenceManager Based on the Credentials of Another PersistenceManager" topic
             in the Developers Guide for more information on when and how to use this constructor.
             <para>Other than the login credentials and connection state, the settings copied from the source PersistenceManager are
             <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultQueryStrategy"/>, <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultSaveOptions"/>, <see cref="P:IdeaBlade.Persistence.PersistenceManager.DataSourceExtension"/>
             <see cref="P:PersistenceServiceOption"/>, <see cref="T:IdeaBlade.Persistence.SessionBundle"/> and <see cref="P:IdeaBlade.Persistence.PersistenceManager.VerifierEngine"/>.
             </para>
             <para>
             A <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceManagerCreated"/> event is fired upon creation.
             </para>
            </remarks>
             <exception cref="T:System.ArgumentException"><paramref name="pPersistenceManager"/> is null</exception>
             <exception cref="T:IdeaBlade.Util.IdeaBladeException">Thrown for miscellaneous initialization failures</exception>
             <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for connection failures</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.#ctor(IdeaBlade.Persistence.PersistenceManager,System.Boolean,System.String,IdeaBlade.Persistence.PersistenceServiceOption)">
             <summary>
             Initialize a new instance of the PersistenceManager class using the credentials and settings from another PersistenceManager,
             but with the connection state, data source extension and options specified.
             </summary>
             <param name="pPersistenceManager">PersistenceManager to copy settings from</param>
             <param name="pShouldConnect">True if a connection to the PersistenceServer should be made.</param>
             <param name="pDataSourceExtension">The DataSourceKey extension to search for in IdeaBlade.ibconfig.</param>
             <param name="pPersistenceServiceOption">Determines whether to use local or remote data sources.</param>
             <remarks>
             This copy constructor will create a new "empty" (no data) PersistenceManager with the same settings and 
             defaults as the specified PersistenceManager.  The connection state, data source extension, and option for
             remote or local data sources specified here will override the values from the source PersistenceManager.
             The new PersistenceManager will be "logged in" to
             the PersistenceServer with the credentials already provided in the passed PersistenceManager.
             See the "Logging In a Second PersistenceManager Based on the Credentials of Another PersistenceManager" topic
             in the Developers Guide for more information on when and how to use this constructor.
             <para>Other than the login credentials, the settings copied from the source PersistenceManager are
             <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultQueryStrategy"/>, <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultSaveOptions"/>, <see cref="T:IdeaBlade.Persistence.SessionBundle"/> and <see cref="P:IdeaBlade.Persistence.PersistenceManager.VerifierEngine"/>.</para>
             <para>
             A <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceManagerCreated"/> event is fired upon creation.
             </para>
            </remarks>
             <exception cref="T:System.ArgumentException"><paramref name="pPersistenceManager"/> is null</exception>
             <exception cref="T:IdeaBlade.Util.IdeaBladeException">Thrown for miscellaneous initialization failures</exception>
             <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for connection failures</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.#ctor(IdeaBlade.Persistence.IPersistenceServer,IdeaBlade.Persistence.SessionBundle,IdeaBlade.Persistence.DataSourceResolver,System.Data.DataSet)">
            <summary>
            For internal use only. Called from within a PersistenceServer to create a server-local PersistenceManager. 
            </summary>
            <param name="pServer"></param>
            <param name="pSessionBundle"></param>
            <param name="pDataSourceResolver"></param>
            <param name="pEntityDataSet"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntitySet">
            <summary>
            Returns an <see cref="T:IdeaBlade.Persistence.EntitySet"/> that can be serialized to a stream or file
            to store the current state of this PersistenceManager. 
            This feature is only available in certain editions of DevForce. 
            </summary>
            <remarks>
            You can work directly with an <b>EntitySet</b> using its <see cref="M:IdeaBlade.Persistence.EntitySet.Save(System.String)"/>,
            <see cref="M:IdeaBlade.Persistence.EntitySet.Load(System.String)"/> and <see cref="M:IdeaBlade.Persistence.EntitySet.Merge(IdeaBlade.Persistence.PersistenceManager,IdeaBlade.Persistence.RestoreStrategy)"/> features, or instead use the corresponding 
            <b>PersistenceManager</b> methods <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveEntitySet(System.String)"/> and <see cref="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(System.String)"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntitySet(System.Collections.IEnumerable)">
            <summary>
            Returns an <see cref="T:IdeaBlade.Persistence.EntitySet"/> that can be serialized to a stream or file
            to store the current state of this PersistenceManager and the specified entities. 
            This feature is only available in certain editions of DevForce.
            </summary>
            <remarks>
            You can work directly with an <b>EntitySet</b> using its <see cref="M:IdeaBlade.Persistence.EntitySet.Save(System.String)"/>,
            <see cref="M:IdeaBlade.Persistence.EntitySet.Load(System.String)"/> and <see cref="M:IdeaBlade.Persistence.EntitySet.Merge(IdeaBlade.Persistence.PersistenceManager,IdeaBlade.Persistence.RestoreStrategy)"/> features, or instead use the corresponding 
            <b>PersistenceManager</b> methods <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveEntitySet(System.String)"/> and <see cref="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(System.String)"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.SaveEntitySet(System.String)">
            <overloads>
            <summary>Stores the state of this PersistenceManager and cached entities to a stream or file.
            </summary>
            </overloads>
             <summary>
             Stores the state of this PersistenceManager and all cached entities to a file system file.
            <seealso cref="T:IdeaBlade.Persistence.EntitySet"/>
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(System.String)"/>
             </summary>
             <param name="pFileName">Name of file to use.  Will be overwritten if it exists.</param>
             <remarks>
             All entities in the PersistenceManager cache will be saved to the file specified.  The file will
             contain the cache and current state in a binary format.  The user must have write permissions to the
             folder, and if the file exists it will be overwritten.
             </remarks>
             <exception cref="T:System.UnauthorizedAccessException"/>
             <exception cref="T:System.Security.SecurityException"/>
             <exception cref="T:System.IO.IOException"/>
             <example><code lang="C#">
private void SampleEntitySetUsage() {
   PersistenceManager pm = PersistenceManager.DefaultManager;

   // Cache all products.
   pm.GetEntities&lt;Product&gt;();
   System.Diagnostics.Debug.WriteLine("cached product rows = " + pm.GetTable(typeof(Product)).Rows.Count.ToString());

   // Save the cache to local storage.
   pm.SaveEntitySet("c:\\temp\\entityset.bin");

   // Ocassionally-connected users will normally connect, cache all data required,
   // then disconnect and work from local cache and/or locally saved cache until they can reconnect.
   // In this example, we'll mimic a disconnected login for this user by clearing all cached data
   // and then re-loading the cache from local storage.
   pm.Disconnect();
   pm.Clear();
   System.Diagnostics.Debug.WriteLine("cached product rows after clear = " + pm.GetTable(typeof(Product)).Rows.Count.ToString());

   pm.RestoreEntitySet("c:\\temp\\entityset.bin");
   System.Diagnostics.Debug.WriteLine("cached product rows after restore = " + pm.GetTable(typeof(Product)).Rows.Count.ToString());

   // Let's reconnect and get more data now.
   pm.Connect();
   pm.GetEntities&lt;Customer&gt;();
   System.Diagnostics.Debug.WriteLine("cached customer rows = " + pm.GetTable(typeof(Customer)).Rows.Count.ToString());
}
</code></example><example><code lang="VB">
Private Sub SampleEntitySetUsage()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager

   ' Cache all products.
   pm.GetEntities(Of Product)()
   System.Diagnostics.Debug.WriteLine(("cached product rows = " + pm.GetTable(GetType(Product)).Rows.Count.ToString()))

   ' Save the cache to local storage.
   pm.SaveEntitySet("c:\temp\entityset.bin")

   ' Ocassionally-connected users will normally connect, cache all data required,
   ' then disconnect and work from local cache and/or locally saved cache until they can reconnect.
   ' In this example, we'll mimic a disconnected login for this user by clearing all cached data
   ' and then re-loading the cache from local storage.
   pm.Disconnect()
   pm.Clear()
   System.Diagnostics.Debug.WriteLine(("cached product rows after clear = " + pm.GetTable(GetType(Product)).Rows.Count.ToString()))

   pm.RestoreEntitySet("c:\temp\entityset.bin")
   System.Diagnostics.Debug.WriteLine(("cached product rows after restore = " + pm.GetTable(GetType(Product)).Rows.Count.ToString()))

   ' Let's reconnect and get more data now.
   pm.Connect()
   pm.GetEntities(Of Customer)()
   System.Diagnostics.Debug.WriteLine(("cached customer rows = " + pm.GetTable(GetType(Customer)).Rows.Count.ToString()))
End Sub
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.SaveEntitySet(System.Collections.IEnumerable,System.String)">
            <summary>
            Stores the state of this PersistenceManager and the specified entities to a file system file.
            </summary>
            <param name="pDataRows">List of entities</param>
            <param name="pFileName">Name of file to use.  Will be overwritten if it exists.</param>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.IOException"/>
            <remarks>
            The specified entities and the current state of the PersistenceManager will be saved to the
            specified file in binary format.  The user must have write permissions to the
            folder, and if the file exists it will be overwritten.
            </remarks>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.SaveEntitySet(System.IO.Stream,System.Boolean)">
             <summary>
             Stores the state of this PersistenceManager and all cached entities to a stream.
            <seealso cref="T:IdeaBlade.Persistence.EntitySet"/>
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(System.IO.Stream,IdeaBlade.Persistence.RestoreStrategy,System.Boolean)"/>
             </summary>
             <param name="pStream">Stream to be written to.</param>
             <param name="pCloseOnExit">Whether or not to close the stream on exiting this method.</param>
             <remarks>
             The current state of the PersistenceManager and all entities in its cache will be saved to the stream in binary format.
             <para>
             You can use a <see cref="T:System.Security.Cryptography.CryptoStream"/> with this method to create an encrypted output file.
             </para>
             </remarks>    
             <example><code lang="C#">
private void SampleEntitySetUsage() {
   PersistenceManager pm = PersistenceManager.DefaultManager;

   // Cache all products.
   pm.GetEntities&lt;Product&gt;();
   System.Diagnostics.Debug.WriteLine("cached product rows = " + pm.GetTable(typeof(Product)).Rows.Count.ToString());

   // Save the cache to local storage.
   pm.SaveEntitySet("c:\\temp\\entityset.bin");

   // Ocassionally-connected users will normally connect, cache all data required,
   // then disconnect and work from local cache and/or locally saved cache until they can reconnect.
   // In this example, we'll mimic a disconnected login for this user by clearing all cached data
   // and then re-loading the cache from local storage.
   pm.Disconnect();
   pm.Clear();
   System.Diagnostics.Debug.WriteLine("cached product rows after clear = " + pm.GetTable(typeof(Product)).Rows.Count.ToString());

   pm.RestoreEntitySet("c:\\temp\\entityset.bin");
   System.Diagnostics.Debug.WriteLine("cached product rows after restore = " + pm.GetTable(typeof(Product)).Rows.Count.ToString());

   // Let's reconnect and get more data now.
   pm.Connect();
   pm.GetEntities&lt;Customer&gt;();
   System.Diagnostics.Debug.WriteLine("cached customer rows = " + pm.GetTable(typeof(Customer)).Rows.Count.ToString());
}
</code></example><example><code lang="VB">
Private Sub SampleEntitySetUsage()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager

   ' Cache all products.
   pm.GetEntities(Of Product)()
   System.Diagnostics.Debug.WriteLine(("cached product rows = " + pm.GetTable(GetType(Product)).Rows.Count.ToString()))

   ' Save the cache to local storage.
   pm.SaveEntitySet("c:\temp\entityset.bin")

   ' Ocassionally-connected users will normally connect, cache all data required,
   ' then disconnect and work from local cache and/or locally saved cache until they can reconnect.
   ' In this example, we'll mimic a disconnected login for this user by clearing all cached data
   ' and then re-loading the cache from local storage.
   pm.Disconnect()
   pm.Clear()
   System.Diagnostics.Debug.WriteLine(("cached product rows after clear = " + pm.GetTable(GetType(Product)).Rows.Count.ToString()))

   pm.RestoreEntitySet("c:\temp\entityset.bin")
   System.Diagnostics.Debug.WriteLine(("cached product rows after restore = " + pm.GetTable(GetType(Product)).Rows.Count.ToString()))

   ' Let's reconnect and get more data now.
   pm.Connect()
   pm.GetEntities(Of Customer)()
   System.Diagnostics.Debug.WriteLine(("cached customer rows = " + pm.GetTable(GetType(Customer)).Rows.Count.ToString()))
End Sub
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.SaveEntitySet(System.Collections.IEnumerable,System.IO.Stream,System.Boolean)">
            <summary>
            Stores the state of this PersistenceManager and the specified entities to a stream.
            </summary>
            <param name="pDataRows">List of entities</param>
            <param name="pStream">Stream to be written to.</param>
            <param name="pCloseOnExit">Whether or not to close the stream on exiting this method.</param>
            <remarks>
            The current state of the PersistenceManager and the specified entities will be saved to the stream in binary format.
            <para>
            You can use a <see cref="T:System.Security.Cryptography.CryptoStream"/> with this method to create an encrypted output file.
            </para>
            </remarks>    
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(IdeaBlade.Persistence.EntitySet)">
            <overloads>
            <summary>Restores the PersistenceManager state and cache from either a stream or file.
            </summary>
            </overloads>
             <summary>
             Merges an EntitySet into this PersistenceManager using the <b>Normal</b> <see cref="T:IdeaBlade.Persistence.RestoreStrategy"/>.
             <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.SaveEntitySet(System.String)"/>
             <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(System.String)"/>
             </summary>
             <param name="pEntitySet">EntitySet to be merged</param>
             <remarks>
             The <paramref name="pEntitySet"/> provided can be an EntitySet deserialized using the
             <see cref="M:IdeaBlade.Persistence.EntitySet.Load(System.String)"/> method or an EntitySet created from another PersistenceManager.
             </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(IdeaBlade.Persistence.EntitySet,IdeaBlade.Persistence.RestoreStrategy)">
            <summary>
            Merges an EntitySet into this PersistenceManager using the <see cref="T:IdeaBlade.Persistence.RestoreStrategy"/> specified.
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.SaveEntitySet(System.String)"/>
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(System.String)"/>
            </summary>
            <param name="pEntitySet">EntitySet to be merged</param>
            <param name="pStrategy">The restore strategy to use</param>
            <remarks>
            The <paramref name="pEntitySet"/> provided can be an EntitySet deserialized using the
            <see cref="M:IdeaBlade.Persistence.EntitySet.Load(System.String)"/> method or an EntitySet created from another PersistenceManager.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(System.String)">
             <summary>
             Restores entities from a file system file into this PersistenceManager using the <b>Normal</b> <see cref="T:IdeaBlade.Persistence.RestoreStrategy"/>.
            <seealso cref="T:IdeaBlade.Persistence.EntitySet"/>
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.SaveEntitySet(System.String)"/>
             </summary>
             <param name="pFileName">Name of file to read.</param>
             <remarks>
             This loads an EntitySet from the file and then performs an <see cref="M:IdeaBlade.Persistence.EntitySet.Merge(IdeaBlade.Persistence.PersistenceManager,IdeaBlade.Persistence.RestoreStrategy)"/> into this PersistenceManager. 
             </remarks>
             <exception cref="T:System.UnauthorizedAccessException"/>
             <exception cref="T:System.Security.SecurityException"/>
             <exception cref="T:System.IO.IOException"/>
             <example><code lang="C#">
private void SampleEntitySetUsage() {
   PersistenceManager pm = PersistenceManager.DefaultManager;

   // Cache all products.
   pm.GetEntities&lt;Product&gt;();
   System.Diagnostics.Debug.WriteLine("cached product rows = " + pm.GetTable(typeof(Product)).Rows.Count.ToString());

   // Save the cache to local storage.
   pm.SaveEntitySet("c:\\temp\\entityset.bin");

   // Ocassionally-connected users will normally connect, cache all data required,
   // then disconnect and work from local cache and/or locally saved cache until they can reconnect.
   // In this example, we'll mimic a disconnected login for this user by clearing all cached data
   // and then re-loading the cache from local storage.
   pm.Disconnect();
   pm.Clear();
   System.Diagnostics.Debug.WriteLine("cached product rows after clear = " + pm.GetTable(typeof(Product)).Rows.Count.ToString());

   pm.RestoreEntitySet("c:\\temp\\entityset.bin");
   System.Diagnostics.Debug.WriteLine("cached product rows after restore = " + pm.GetTable(typeof(Product)).Rows.Count.ToString());

   // Let's reconnect and get more data now.
   pm.Connect();
   pm.GetEntities&lt;Customer&gt;();
   System.Diagnostics.Debug.WriteLine("cached customer rows = " + pm.GetTable(typeof(Customer)).Rows.Count.ToString());
}
</code></example><example><code lang="VB">
Private Sub SampleEntitySetUsage()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager

   ' Cache all products.
   pm.GetEntities(Of Product)()
   System.Diagnostics.Debug.WriteLine(("cached product rows = " + pm.GetTable(GetType(Product)).Rows.Count.ToString()))

   ' Save the cache to local storage.
   pm.SaveEntitySet("c:\temp\entityset.bin")

   ' Ocassionally-connected users will normally connect, cache all data required,
   ' then disconnect and work from local cache and/or locally saved cache until they can reconnect.
   ' In this example, we'll mimic a disconnected login for this user by clearing all cached data
   ' and then re-loading the cache from local storage.
   pm.Disconnect()
   pm.Clear()
   System.Diagnostics.Debug.WriteLine(("cached product rows after clear = " + pm.GetTable(GetType(Product)).Rows.Count.ToString()))

   pm.RestoreEntitySet("c:\temp\entityset.bin")
   System.Diagnostics.Debug.WriteLine(("cached product rows after restore = " + pm.GetTable(GetType(Product)).Rows.Count.ToString()))

   ' Let's reconnect and get more data now.
   pm.Connect()
   pm.GetEntities(Of Customer)()
   System.Diagnostics.Debug.WriteLine(("cached customer rows = " + pm.GetTable(GetType(Customer)).Rows.Count.ToString()))
End Sub
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(System.String,IdeaBlade.Persistence.RestoreStrategy)">
             <summary>
             Restores entities from a file system file into this PersistenceManager using the <see cref="T:IdeaBlade.Persistence.RestoreStrategy"/> specified.
            <seealso cref="T:IdeaBlade.Persistence.EntitySet"/>
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.SaveEntitySet(System.String)"/>
             </summary>
             <param name="pFileName">Name of file to read.</param>
             <param name="pStrategy">The restore strategy to use.</param>
             <remarks>
             This loads an EntitySet from the file and then performs an <see cref="M:IdeaBlade.Persistence.EntitySet.Merge(IdeaBlade.Persistence.PersistenceManager,IdeaBlade.Persistence.RestoreStrategy)"/> into this PersistenceManager. 
             </remarks>
             <exception cref="T:System.UnauthorizedAccessException"/>
             <exception cref="T:System.Security.SecurityException"/>
             <exception cref="T:System.IO.IOException"/>
             <example><code lang="C#">
private void SampleEntitySetUsage() {
   PersistenceManager pm = PersistenceManager.DefaultManager;

   // Cache all products.
   pm.GetEntities&lt;Product&gt;();
   System.Diagnostics.Debug.WriteLine("cached product rows = " + pm.GetTable(typeof(Product)).Rows.Count.ToString());

   // Save the cache to local storage.
   pm.SaveEntitySet("c:\\temp\\entityset.bin");

   // Ocassionally-connected users will normally connect, cache all data required,
   // then disconnect and work from local cache and/or locally saved cache until they can reconnect.
   // In this example, we'll mimic a disconnected login for this user by clearing all cached data
   // and then re-loading the cache from local storage.
   pm.Disconnect();
   pm.Clear();
   System.Diagnostics.Debug.WriteLine("cached product rows after clear = " + pm.GetTable(typeof(Product)).Rows.Count.ToString());

   pm.RestoreEntitySet("c:\\temp\\entityset.bin");
   System.Diagnostics.Debug.WriteLine("cached product rows after restore = " + pm.GetTable(typeof(Product)).Rows.Count.ToString());

   // Let's reconnect and get more data now.
   pm.Connect();
   pm.GetEntities&lt;Customer&gt;();
   System.Diagnostics.Debug.WriteLine("cached customer rows = " + pm.GetTable(typeof(Customer)).Rows.Count.ToString());
}
</code></example><example><code lang="VB">
Private Sub SampleEntitySetUsage()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager

   ' Cache all products.
   pm.GetEntities(Of Product)()
   System.Diagnostics.Debug.WriteLine(("cached product rows = " + pm.GetTable(GetType(Product)).Rows.Count.ToString()))

   ' Save the cache to local storage.
   pm.SaveEntitySet("c:\temp\entityset.bin")

   ' Ocassionally-connected users will normally connect, cache all data required,
   ' then disconnect and work from local cache and/or locally saved cache until they can reconnect.
   ' In this example, we'll mimic a disconnected login for this user by clearing all cached data
   ' and then re-loading the cache from local storage.
   pm.Disconnect()
   pm.Clear()
   System.Diagnostics.Debug.WriteLine(("cached product rows after clear = " + pm.GetTable(GetType(Product)).Rows.Count.ToString()))

   pm.RestoreEntitySet("c:\temp\entityset.bin")
   System.Diagnostics.Debug.WriteLine(("cached product rows after restore = " + pm.GetTable(GetType(Product)).Rows.Count.ToString()))

   ' Let's reconnect and get more data now.
   pm.Connect()
   pm.GetEntities(Of Customer)()
   System.Diagnostics.Debug.WriteLine(("cached customer rows = " + pm.GetTable(GetType(Customer)).Rows.Count.ToString()))
End Sub
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RestoreEntitySet(System.IO.Stream,IdeaBlade.Persistence.RestoreStrategy,System.Boolean)">
             <summary>
             Restores entities from a stream into this PeristenceManager using the <see cref="T:IdeaBlade.Persistence.RestoreStrategy"/> specified.
            <seealso cref="T:IdeaBlade.Persistence.EntitySet"/>
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.SaveEntitySet(System.IO.Stream,System.Boolean)"/>
             </summary>
             <param name="pStream">Stream to be read </param>
             <param name="pStrategy">The restore strategy to use</param>
             <param name="pCloseOnExit">Whether to close the stream when done</param>
             <remarks>
             This loads an EntitySet from the stream and then performs an <see cref="M:IdeaBlade.Persistence.EntitySet.Merge(IdeaBlade.Persistence.PersistenceManager,IdeaBlade.Persistence.RestoreStrategy)"/> into this PersistenceManager. 
             <para>Use a <see cref="T:System.Security.Cryptography.CryptoStream"/> to read an encrypted input file.</para>
             </remarks>
             <example><code lang="C#">
private void SampleEntitySetUsage() {
   PersistenceManager pm = PersistenceManager.DefaultManager;

   // Cache all products.
   pm.GetEntities&lt;Product&gt;();
   System.Diagnostics.Debug.WriteLine("cached product rows = " + pm.GetTable(typeof(Product)).Rows.Count.ToString());

   // Save the cache to local storage.
   pm.SaveEntitySet("c:\\temp\\entityset.bin");

   // Ocassionally-connected users will normally connect, cache all data required,
   // then disconnect and work from local cache and/or locally saved cache until they can reconnect.
   // In this example, we'll mimic a disconnected login for this user by clearing all cached data
   // and then re-loading the cache from local storage.
   pm.Disconnect();
   pm.Clear();
   System.Diagnostics.Debug.WriteLine("cached product rows after clear = " + pm.GetTable(typeof(Product)).Rows.Count.ToString());

   pm.RestoreEntitySet("c:\\temp\\entityset.bin");
   System.Diagnostics.Debug.WriteLine("cached product rows after restore = " + pm.GetTable(typeof(Product)).Rows.Count.ToString());

   // Let's reconnect and get more data now.
   pm.Connect();
   pm.GetEntities&lt;Customer&gt;();
   System.Diagnostics.Debug.WriteLine("cached customer rows = " + pm.GetTable(typeof(Customer)).Rows.Count.ToString());
}
</code></example><example><code lang="VB">
Private Sub SampleEntitySetUsage()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager

   ' Cache all products.
   pm.GetEntities(Of Product)()
   System.Diagnostics.Debug.WriteLine(("cached product rows = " + pm.GetTable(GetType(Product)).Rows.Count.ToString()))

   ' Save the cache to local storage.
   pm.SaveEntitySet("c:\temp\entityset.bin")

   ' Ocassionally-connected users will normally connect, cache all data required,
   ' then disconnect and work from local cache and/or locally saved cache until they can reconnect.
   ' In this example, we'll mimic a disconnected login for this user by clearing all cached data
   ' and then re-loading the cache from local storage.
   pm.Disconnect()
   pm.Clear()
   System.Diagnostics.Debug.WriteLine(("cached product rows after clear = " + pm.GetTable(GetType(Product)).Rows.Count.ToString()))

   pm.RestoreEntitySet("c:\temp\entityset.bin")
   System.Diagnostics.Debug.WriteLine(("cached product rows after restore = " + pm.GetTable(GetType(Product)).Rows.Count.ToString()))

   ' Let's reconnect and get more data now.
   pm.Connect()
   pm.GetEntities(Of Customer)()
   System.Diagnostics.Debug.WriteLine(("cached customer rows = " + pm.GetTable(GetType(Customer)).Rows.Count.ToString()))
End Sub
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.Login(IdeaBlade.Persistence.ILoginCredential)">
            <summary>
            Used to validate a user's credentials.
            <seealso cref="T:IdeaBlade.Persistence.Server.PersistenceServer"/>
            <seealso cref="T:IdeaBlade.Persistence.SessionBundle"/>
            <seealso cref="T:IdeaBlade.Persistence.IPersistenceLoginManager"/>
            </summary>
            <param name="pCredential">Login credentials</param>
            <returns>A SessionBundle identifying the user's session.</returns>
            <remarks>
            <b>Login</b> may be used to validate a user's credentials and provide more secure communications between
            client and server tiers.  To use this method you must also implement 
            the <see cref="T:IdeaBlade.Persistence.IPersistenceLoginManager"/> interface, which will be called by the <see cref="T:IdeaBlade.Persistence.Server.PersistenceServer"/>
            to perform validation.
            <para>
            The <see cref="T:IdeaBlade.Persistence.SessionBundle"/> returned contains an <see cref="T:System.Security.Principal.IPrincipal"/>
            and other identifying information, and will be used in all subsequent calls to the PersistenceServer.
            </para>
            <para>
            If implemented, you must call <b>Login</b> to validate the user after calling 
            <see cref="M:IdeaBlade.Persistence.PersistenceManager.Connect"/> and before calling any other PersistenceManager functions.
            This call does not cause a connection to any backend data source, nor does it
            maintain an open conversation with the PersistenceServer.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">PM.Connect() must be called before <b>Login</b></exception>
            <exception cref="T:IdeaBlade.Persistence.LoginException">Login failure</exception>
            <example><code lang="C#">
// Sample showing Login, and implementation of IPersistenceLoginManager

// Create a PM - this will also do an implicit Connect().
PersistenceManager pm = PersistenceManager.DefaultManager;

// create a LoginCredential
string userName = "demo";
string password = "demo";
string domain = "Earth";
LoginCredential credential = new LoginCredential(userName, password, domain);

MessageBox.Show("Current user: " + System.Threading.Thread.CurrentPrincipal.Identity.Name);

try {
   // "Login" to PersistenceServer 
   SessionBundle bundle = pm.Login(credential);

   // note change in current principal
   MessageBox.Show("Current user: " + System.Threading.Thread.CurrentPrincipal.Identity.Name);
} catch (LoginException le) {
   MessageBox.Show(le.Message);
} catch (PersistenceServerException pse) {
   MessageBox.Show("Login failed: " + pse.Message);
} catch (Exception ex) {
   MessageBox.Show(ex.Message);
}

//..... Retrieve data, etc.

// Now logout
pm.Logout();


// Sample LoginManager class
[Serializable]
public class LoginManager : IPersistenceLoginManager {
   public LoginManager() {}

   public IPrincipal Login(ILoginCredential pCredential, PersistenceManager pManager) {
      // note that Login runs on server-side -- this will return false
      bool isClient = pManager.IsClient;

      // You would normally validate the credentials, eg against a database, AD, etc, and then
      // build and return an object implementing IPrincipal.
      if (pCredential.Domain != "Earth") {
        throw new LoginException(LoginExceptionType.InvalidUserName, pCredential.Domain, pCredential.UserName);
      }

      // We'll just return a GenericPrincipal
      GenericIdentity identity  = new GenericIdentity(pCredential.UserName);
      return new GenericPrincipal(identity, new String[] { "user" });
   }
}
</code></example><example><code lang="VB">
' Sample showing Login, and implementation of IPersistenceLoginManager

' Create a PM - this will also do an implicit Connect().
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

' create a LoginCredential
Dim userName As String = "demo"
Dim password As String = "demo"
Dim domain As String = "Earth"
Dim credential As New LoginCredential(userName, password, domain)

MessageBox.Show(("Current user: " + System.Threading.Thread.CurrentPrincipal.Identity.Name))

Try
   ' "Login" to PersistenceServer 
   Dim bundle As SessionBundle = pm.Login(credential)
   
   ' note change in current principal
   MessageBox.Show(("Current user: " + System.Threading.Thread.CurrentPrincipal.Identity.Name))
Catch le As LoginException
   MessageBox.Show(le.Message)
Catch pse As PersistenceServerException
   MessageBox.Show("Login failed: " + pse.Message)
Catch ex As Exception 
   MessageBox.Show(ex.Message)
End Try

'..... Retrieve data, etc.

' Now logout
pm.Logout()

&lt;Serializable()&gt; _
Public Class LoginManager : Implements IPersistenceLoginManager 

    Public Sub New()
    End Sub 

    Public Function Login(ByVal pCredential As ILoginCredential, ByVal pManager As PersistenceManager) As IPrincipal _
    Implements IPersistenceLoginManager.Login
        ' note that Login runs on server-side -- this will return false
        Dim isClient As Boolean = pManager.IsClient

        ' You would normally validate the credentials, eg against a database, and then
        ' build and return an object implementing IPrincipal.
        If pCredential.Domain &lt;&gt; "Earth" Then
            Throw New LoginException(LoginExceptionType.InvalidUserName, pCredential.Domain, pCredential.UserName)
        End If

        ' We'll just return a GenericPrincipal
        Dim identity As New GenericIdentity(pCredential.UserName)
        Return New GenericPrincipal(identity, New [String]() {"user"})
    End Function 
End Class 
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.Logout">
            <summary>
            Logs the user off, discarding the current <see cref="T:IdeaBlade.Persistence.SessionBundle"/>.
            <seealso cref="P:IdeaBlade.Persistence.PersistenceManager.PersistenceServer"/>
            <seealso cref="T:IdeaBlade.Persistence.SessionBundle"/>
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.Login(IdeaBlade.Persistence.ILoginCredential)"/>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges">
             <summary>Persists all changed <see cref="T:IdeaBlade.Persistence.Entity"/> objects within the PersistenceManager cache to the 
             backend data source using the <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultSaveOptions"/>.
            </summary>
             <seealso cref="T:IdeaBlade.Persistence.SaveOptions"/>
             <seealso cref="T:IdeaBlade.Persistence.SaveResult"/>
             <returns>A <see cref="T:IdeaBlade.Persistence.SaveResult"/> object that contains a boolean indicating the result of the save 
             as well as any errors encountered during the save.      
             </returns>
             <remarks>The length of the list of errors 
             returned in the <see cref="T:IdeaBlade.Persistence.SaveResult"/> will be determined by the transactional nature of the save
             being attempted. In a transactional save, the first failure causes a rollback of the
             entire operation and only this first error will be returned in the SaveResult.  In
             a non-transactional save all of the errors encountered during the save will be returned.
             <para>Upon success <see cref="T:System.Data.DataSet.AcceptChanges"/>, or 
             <see cref="T:System.Data.DataRow.AcceptChanges"/> for a non-transactional save
             in which errors occurred, will have been called. </para>
             <para>
             A <see cref="T:IdeaBlade.Persistence.SaveResult"/> is always returned if no errors occurred during save processing, if processing 
             was cancelled, or if the error was handled by the <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> event handler.
             If an unhandled error occurred the value of the <see cref="P:IdeaBlade.Persistence.SaveOptions.ThrowExceptionOnSaveFailure"/> setting 
             determines if a SaveResult is returned:  if <see cref="F:IdeaBlade.Persistence.ThrowExceptionRule.Never"/> is used, a SaveResult will be
             returned with the <see cref="P:IdeaBlade.Persistence.SaveResult.Exception"/> set; if <see cref="F:IdeaBlade.Persistence.ThrowExceptionRule.Always"/> is used, a
             <see cref="T:IdeaBlade.Persistence.PersistenceManagerSaveException"/> is thrown.  
             </para>
             </remarks>
             <exception cref="T:IdeaBlade.Persistence.PersistenceManagerSaveException">Thrown depending on <see cref="P:IdeaBlade.Persistence.SaveOptions.ThrowExceptionOnSaveFailure"/> setting.</exception>
             <example><code lang="C#">
private void SaveSample() {
  PersistenceManager pm = PersistenceManager.DefaultManager;

  // Retrieve a single Order and its Customer
  Order order = pm.GetEntity&lt;Order&gt;(new PrimaryKey(typeof(Order), 10275));
  Customer cust = order.Customer;

  // Change the address in both Order and Customer
  order.ShipAddress = "100 Broadway";
  cust.Address = "100 Broadway";

  // Now save -- using a save list and SaveOptions.
  EntityList&lt;Entity&gt; changedEntities = new EntityList&lt;Entity&gt;();
  changedEntities.Add(order);
  changedEntities.Add(cust);
  SaveOptions options = new SaveOptions();
  options.IsTransactional = true;
  options.ThrowExceptionOnSaveFailure = ThrowExceptionRule.Never;

  SaveResult sr = pm.SaveChanges(changedEntities, options);
  if (sr.Ok) {
    MessageBox.Show("Changes saved to database.");
  } else {
    StringBuilder errMsg = new System.Text.StringBuilder();
    if (sr.Exception != null) errMsg.AppendFormat("{0}\n", sr.Exception.Message);
    foreach (Entity anEntity in sr.EntitiesWithErrors) {
      errMsg.AppendFormat("{0}: {1}\n", anEntity.GetType().Name, anEntity.RowError);
    }
    MessageBox.Show(errMsg.ToString());
    // let's reject the failed changes now too to reset the RowState
    pm.RejectChanges();
  }
}
</code></example><example><code lang="VB">
Private Sub SaveSample()
  Dim pm As PersistenceManager = PersistenceManager.DefaultManager

  ' Retrieve a single Order and its Customer
  Dim order As Order = pm.GetEntity(Of Order)(New PrimaryKey(GetType(Order), 10275))
  Dim cust As Customer = order.Customer

  ' Change the address in both Order and Customer
  order.ShipAddress = "100 Broadway"
  cust.Address = "100 Broadway"

  ' Now save -- using a save list and SaveOptions.
  Dim changedEntities As New EntityList(Of Entity)
  changedEntities.Add(order)
  changedEntities.Add(cust)
  Dim options As New SaveOptions()
  options.IsTransactional = True
  options.ThrowExceptionOnSaveFailure = ThrowExceptionRule.Never

  Dim sr As SaveResult = pm.SaveChanges(changedEntities, options)
  If sr.Ok Then
     MessageBox.Show("Changes saved to database.")
  Else
     Dim errMsg = New System.Text.StringBuilder()
     If Not (sr.Exception Is Nothing) Then
        errMsg.AppendFormat("{0}" + ControlChars.Lf, sr.Exception.Message)
     End If
     For Each anEntity as Entity In sr.EntitiesWithErrors
        errMsg.AppendFormat("{0}: {1}" + ControlChars.Lf, anEntity.GetType().Name, anEntity.RowError)
     Next anEntity
     MessageBox.Show(errMsg.ToString())
     ' Let's reject the failed changes now too to reset the RowState
     pm.RejectChanges()
  End If
End Sub

	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges(IdeaBlade.Persistence.SaveOptions)">
            <summary>Persists all changed <see cref="T:IdeaBlade.Persistence.Entity"/> objects within the PersistenceManager cache to the 
            backend data source using the <see cref="T:IdeaBlade.Persistence.SaveOptions"/> specified.
            <seealso cref="T:IdeaBlade.Persistence.SaveOptions"/>
            <seealso cref="T:IdeaBlade.Persistence.SaveResult"/>
            </summary>
            <param name="pSaveOptions">Options controlling save processing</param> 
            <returns>A <see cref="T:IdeaBlade.Persistence.SaveResult"/> object that contains a boolean indicating the result of the save 
            as well as any errors encountered during the save.      
            </returns>
            <remarks>
            Persists all additions, modifications and deletions within the PersistenceManager cache to the 
            backend data source. 
            <para>
            The length of the list of errors 
            returned in the <see cref="T:IdeaBlade.Persistence.SaveResult"/> will be determined by the transactional nature of the save
            being attempted. In a transactional save, the first failure causes a rollback of the
            entire operation and only this first error will be returned in the SaveResult.  In
            a non-transactional save all of the errors encountered during the save will be returned.
            </para>
            <para>Upon success <see cref="T:System.Data.DataSet.AcceptChanges"/>, or 
            <see cref="T:System.Data.DataRow.AcceptChanges"/> for a non-transactional save
            in which errors occurred, will have been called. </para>
            <para>
            A <see cref="T:IdeaBlade.Persistence.SaveResult"/> is always returned if no errors occurred during save processing, if processing 
            was cancelled, or if the error was handled by the <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> event handler.
            If an unhandled error occurred the value of the <see cref="P:IdeaBlade.Persistence.SaveOptions.ThrowExceptionOnSaveFailure"/> setting 
            determines if a SaveResult is returned:  if <see cref="F:IdeaBlade.Persistence.ThrowExceptionRule.Never"/> is used, a SaveResult will be
            returned with the <see cref="P:IdeaBlade.Persistence.SaveResult.Exception"/> set; if <see cref="F:IdeaBlade.Persistence.ThrowExceptionRule.Always"/> is used, a
            <see cref="T:IdeaBlade.Persistence.PersistenceManagerSaveException"/> is thrown.  
            </para>
            </remarks>
            <exception cref="T:IdeaBlade.Persistence.PersistenceManagerSaveException">Thrown depending on <see cref="P:IdeaBlade.Persistence.SaveOptions.ThrowExceptionOnSaveFailure"/> setting.</exception>
            <example><code lang="C#">
private void SaveSample() {
  PersistenceManager pm = PersistenceManager.DefaultManager;

  // Retrieve a single Order and its Customer
  Order order = pm.GetEntity&lt;Order&gt;(new PrimaryKey(typeof(Order), 10275));
  Customer cust = order.Customer;

  // Change the address in both Order and Customer
  order.ShipAddress = "100 Broadway";
  cust.Address = "100 Broadway";

  // Now save -- using a save list and SaveOptions.
  EntityList&lt;Entity&gt; changedEntities = new EntityList&lt;Entity&gt;();
  changedEntities.Add(order);
  changedEntities.Add(cust);
  SaveOptions options = new SaveOptions();
  options.IsTransactional = true;
  options.ThrowExceptionOnSaveFailure = ThrowExceptionRule.Never;

  SaveResult sr = pm.SaveChanges(changedEntities, options);
  if (sr.Ok) {
    MessageBox.Show("Changes saved to database.");
  } else {
    StringBuilder errMsg = new System.Text.StringBuilder();
    if (sr.Exception != null) errMsg.AppendFormat("{0}\n", sr.Exception.Message);
    foreach (Entity anEntity in sr.EntitiesWithErrors) {
      errMsg.AppendFormat("{0}: {1}\n", anEntity.GetType().Name, anEntity.RowError);
    }
    MessageBox.Show(errMsg.ToString());
    // let's reject the failed changes now too to reset the RowState
    pm.RejectChanges();
  }
}
</code></example><example><code lang="VB">
Private Sub SaveSample()
  Dim pm As PersistenceManager = PersistenceManager.DefaultManager

  ' Retrieve a single Order and its Customer
  Dim order As Order = pm.GetEntity(Of Order)(New PrimaryKey(GetType(Order), 10275))
  Dim cust As Customer = order.Customer

  ' Change the address in both Order and Customer
  order.ShipAddress = "100 Broadway"
  cust.Address = "100 Broadway"

  ' Now save -- using a save list and SaveOptions.
  Dim changedEntities As New EntityList(Of Entity)
  changedEntities.Add(order)
  changedEntities.Add(cust)
  Dim options As New SaveOptions()
  options.IsTransactional = True
  options.ThrowExceptionOnSaveFailure = ThrowExceptionRule.Never

  Dim sr As SaveResult = pm.SaveChanges(changedEntities, options)
  If sr.Ok Then
     MessageBox.Show("Changes saved to database.")
  Else
     Dim errMsg = New System.Text.StringBuilder()
     If Not (sr.Exception Is Nothing) Then
        errMsg.AppendFormat("{0}" + ControlChars.Lf, sr.Exception.Message)
     End If
     For Each anEntity as Entity In sr.EntitiesWithErrors
        errMsg.AppendFormat("{0}: {1}" + ControlChars.Lf, anEntity.GetType().Name, anEntity.RowError)
     Next anEntity
     MessageBox.Show(errMsg.ToString())
     ' Let's reject the failed changes now too to reset the RowState
     pm.RejectChanges()
  End If
End Sub

	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges(System.Collections.IEnumerable)">
            <summary>
            Persists one or more selected Entities within the PersistenceManager cache to the 
            backend data source using the <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultSaveOptions"/>.
            <seealso cref="T:IdeaBlade.Persistence.SaveOptions"/>
            <seealso cref="T:IdeaBlade.Persistence.SaveResult"/>
            </summary>
            <param name="pDataRows">List of <see cref="T:IdeaBlade.Persistence.Entity"/> objects to be persisted</param>
            <returns>A SaveResult object that contains a boolean indicating the result of the save 
            as well as any errors encountered during the save.   
            </returns>
            <remarks>
            The length of the list of errors 
            returned in the <see cref="T:IdeaBlade.Persistence.SaveResult"/> will be determined by the transactional nature of the save
            being attempted. In a transactional save, the first failure causes a rollback of the
            entire operation and only this first error will be returned in the SaveResult.  In
            a non-transactional save all of the errors encountered during the save will be returned.
            <para>Upon success <see cref="T:System.Data.DataSet.AcceptChanges">DataSet.AcceptChanges</see>, or 
            <see cref="T:System.Data.DataRow.AcceptChanges">DataRow.AcceptChanges</see> for a non-transactional save
            in which errors occurred, will have been called. </para>
            <para>
            A <see cref="T:IdeaBlade.Persistence.SaveResult"/> is always returned if no errors occurred during save processing, if processing 
            was cancelled, or if the error was handled by the <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> event handler.
            If an unhandled error occurred the value of the <see cref="P:IdeaBlade.Persistence.SaveOptions.ThrowExceptionOnSaveFailure"/> setting 
            determines if a SaveResult is returned:  if <see cref="F:IdeaBlade.Persistence.ThrowExceptionRule.Never"/> is used, a SaveResult will be
            returned with the <see cref="P:IdeaBlade.Persistence.SaveResult.Exception"/> set; if <see cref="F:IdeaBlade.Persistence.ThrowExceptionRule.Always"/> is used, a
            <see cref="T:IdeaBlade.Persistence.PersistenceManagerSaveException"/> is thrown.  
            </para>
            <para>
            If you are saving only a single entity, an easy way of calling this method 
            is to create a new one-item array, similar to the following example:
            <example><code>C#:  pm.SaveChanges(new Employee[] { myEmployee });
            VB:  pm.SaveChanges(New Employee() {myEmployee})</code>
            </example>
            </para>
            </remarks>
            <exception cref="T:IdeaBlade.Persistence.PersistenceManagerSaveException">Thrown depending on <see cref="P:IdeaBlade.Persistence.SaveOptions.ThrowExceptionOnSaveFailure"/> setting.</exception>
            <example><code lang="C#">
private void SaveSample() {
  PersistenceManager pm = PersistenceManager.DefaultManager;

  // Retrieve a single Order and its Customer
  Order order = pm.GetEntity&lt;Order&gt;(new PrimaryKey(typeof(Order), 10275));
  Customer cust = order.Customer;

  // Change the address in both Order and Customer
  order.ShipAddress = "100 Broadway";
  cust.Address = "100 Broadway";

  // Now save -- using a save list and SaveOptions.
  EntityList&lt;Entity&gt; changedEntities = new EntityList&lt;Entity&gt;();
  changedEntities.Add(order);
  changedEntities.Add(cust);
  SaveOptions options = new SaveOptions();
  options.IsTransactional = true;
  options.ThrowExceptionOnSaveFailure = ThrowExceptionRule.Never;

  SaveResult sr = pm.SaveChanges(changedEntities, options);
  if (sr.Ok) {
    MessageBox.Show("Changes saved to database.");
  } else {
    StringBuilder errMsg = new System.Text.StringBuilder();
    if (sr.Exception != null) errMsg.AppendFormat("{0}\n", sr.Exception.Message);
    foreach (Entity anEntity in sr.EntitiesWithErrors) {
      errMsg.AppendFormat("{0}: {1}\n", anEntity.GetType().Name, anEntity.RowError);
    }
    MessageBox.Show(errMsg.ToString());
    // let's reject the failed changes now too to reset the RowState
    pm.RejectChanges();
  }
}
</code></example><example><code lang="VB">
Private Sub SaveSample()
  Dim pm As PersistenceManager = PersistenceManager.DefaultManager

  ' Retrieve a single Order and its Customer
  Dim order As Order = pm.GetEntity(Of Order)(New PrimaryKey(GetType(Order), 10275))
  Dim cust As Customer = order.Customer

  ' Change the address in both Order and Customer
  order.ShipAddress = "100 Broadway"
  cust.Address = "100 Broadway"

  ' Now save -- using a save list and SaveOptions.
  Dim changedEntities As New EntityList(Of Entity)
  changedEntities.Add(order)
  changedEntities.Add(cust)
  Dim options As New SaveOptions()
  options.IsTransactional = True
  options.ThrowExceptionOnSaveFailure = ThrowExceptionRule.Never

  Dim sr As SaveResult = pm.SaveChanges(changedEntities, options)
  If sr.Ok Then
     MessageBox.Show("Changes saved to database.")
  Else
     Dim errMsg = New System.Text.StringBuilder()
     If Not (sr.Exception Is Nothing) Then
        errMsg.AppendFormat("{0}" + ControlChars.Lf, sr.Exception.Message)
     End If
     For Each anEntity as Entity In sr.EntitiesWithErrors
        errMsg.AppendFormat("{0}: {1}" + ControlChars.Lf, anEntity.GetType().Name, anEntity.RowError)
     Next anEntity
     MessageBox.Show(errMsg.ToString())
     ' Let's reject the failed changes now too to reset the RowState
     pm.RejectChanges()
  End If
End Sub

	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges(System.Collections.IEnumerable,IdeaBlade.Persistence.SaveOptions)">
            <summary>
            Persists one or more selected Entities within the PersistenceManager cache to the 
            backend data source using the <see cref="T:IdeaBlade.Persistence.SaveOptions"/> specified.
            <seealso cref="T:IdeaBlade.Persistence.SaveOptions"/>
            <seealso cref="T:IdeaBlade.Persistence.SaveResult"/>
            </summary>
            <param name="pDataRows">List of <see cref="T:IdeaBlade.Persistence.Entity"/> objects to be persisted</param>
            <param name="pSaveOptions">Options controlling save processing</param>
            <returns>A SaveResult object that contains a boolean indicating the result of the save 
            as well as any errors encountered during the save.   
            </returns>
            <remarks>The length of the list of errors 
            returned in the <see cref="T:IdeaBlade.Persistence.SaveResult"/> will be determined by the transactional nature of the save
            being attempted. In a transactional save, the first failure causes a rollback of the
            entire operation and only this first error will be returned in the SaveResult.  In
            a non-transactional save all of the errors encountered during the save will be returned.
            <para>Upon success <see cref="T:System.Data.DataSet.AcceptChanges">DataSet.AcceptChanges</see>, or 
            <see cref="T:System.Data.DataRow.AcceptChanges">DataRow.AcceptChanges</see> for a non-transactional save
            in which errors occurred, will have been called. </para>
            <para>
            A <see cref="T:IdeaBlade.Persistence.SaveResult"/> is always returned if no errors occurred during save processing, if processing 
            was cancelled, or if the error was handled by the <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> event handler.
            If an unhandled error occurred the value of the <see cref="P:IdeaBlade.Persistence.SaveOptions.ThrowExceptionOnSaveFailure"/> setting 
            determines if a SaveResult is returned:  if <see cref="F:IdeaBlade.Persistence.ThrowExceptionRule.Never"/> is used, a SaveResult will be
            returned with the <see cref="P:IdeaBlade.Persistence.SaveResult.Exception"/> set; if <see cref="F:IdeaBlade.Persistence.ThrowExceptionRule.Always"/> is used, a
            <see cref="T:IdeaBlade.Persistence.PersistenceManagerSaveException"/> is thrown.  
            </para>
            <para>
            If you are saving only a single entity, an easy way of calling this method 
            is to create a new one-item array, similar to the following example:
            <example><code>C#:  pm.SaveChanges(new Employee[] { myEmployee });
            VB:  pm.SaveChanges(New Employee() {myEmployee})</code>
            </example>
            </para>
            </remarks>
            <exception cref="T:IdeaBlade.Persistence.PersistenceManagerSaveException">Thrown depending on <see cref="P:IdeaBlade.Persistence.SaveOptions.ThrowExceptionOnSaveFailure"/> setting.</exception>
            <example><code lang="C#">
private void SaveSample() {
  PersistenceManager pm = PersistenceManager.DefaultManager;

  // Retrieve a single Order and its Customer
  Order order = pm.GetEntity&lt;Order&gt;(new PrimaryKey(typeof(Order), 10275));
  Customer cust = order.Customer;

  // Change the address in both Order and Customer
  order.ShipAddress = "100 Broadway";
  cust.Address = "100 Broadway";

  // Now save -- using a save list and SaveOptions.
  EntityList&lt;Entity&gt; changedEntities = new EntityList&lt;Entity&gt;();
  changedEntities.Add(order);
  changedEntities.Add(cust);
  SaveOptions options = new SaveOptions();
  options.IsTransactional = true;
  options.ThrowExceptionOnSaveFailure = ThrowExceptionRule.Never;

  SaveResult sr = pm.SaveChanges(changedEntities, options);
  if (sr.Ok) {
    MessageBox.Show("Changes saved to database.");
  } else {
    StringBuilder errMsg = new System.Text.StringBuilder();
    if (sr.Exception != null) errMsg.AppendFormat("{0}\n", sr.Exception.Message);
    foreach (Entity anEntity in sr.EntitiesWithErrors) {
      errMsg.AppendFormat("{0}: {1}\n", anEntity.GetType().Name, anEntity.RowError);
    }
    MessageBox.Show(errMsg.ToString());
    // let's reject the failed changes now too to reset the RowState
    pm.RejectChanges();
  }
}
</code></example><example><code lang="VB">
Private Sub SaveSample()
  Dim pm As PersistenceManager = PersistenceManager.DefaultManager

  ' Retrieve a single Order and its Customer
  Dim order As Order = pm.GetEntity(Of Order)(New PrimaryKey(GetType(Order), 10275))
  Dim cust As Customer = order.Customer

  ' Change the address in both Order and Customer
  order.ShipAddress = "100 Broadway"
  cust.Address = "100 Broadway"

  ' Now save -- using a save list and SaveOptions.
  Dim changedEntities As New EntityList(Of Entity)
  changedEntities.Add(order)
  changedEntities.Add(cust)
  Dim options As New SaveOptions()
  options.IsTransactional = True
  options.ThrowExceptionOnSaveFailure = ThrowExceptionRule.Never

  Dim sr As SaveResult = pm.SaveChanges(changedEntities, options)
  If sr.Ok Then
     MessageBox.Show("Changes saved to database.")
  Else
     Dim errMsg = New System.Text.StringBuilder()
     If Not (sr.Exception Is Nothing) Then
        errMsg.AppendFormat("{0}" + ControlChars.Lf, sr.Exception.Message)
     End If
     For Each anEntity as Entity In sr.EntitiesWithErrors
        errMsg.AppendFormat("{0}: {1}" + ControlChars.Lf, anEntity.GetType().Name, anEntity.RowError)
     Next anEntity
     MessageBox.Show(errMsg.ToString())
     ' Let's reject the failed changes now too to reset the RowState
     pm.RejectChanges()
  End If
End Sub

	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RejectChanges">
            <summary>
            Rolls back all Entity changes since the cache was created or the last 
            <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/> call was made.
            </summary>
            <remarks>This is functionally equivalent to <see cref="M:System.Data.DataSet.RejectChanges"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.HasChanges">
            <summary>
            Determines whether the PersistenceManager cache has any changes that have not
            yet been persisted to the backend data source.
            </summary>
            <returns>Whether the PersistenceManager has any pending changes.</returns>
            <remarks>Use <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/> to save changes in cached data to the backend data source.
            <para>This is functionally equivalent to <see cref="P:System.Data.DataSet.HasChanges"/>.</para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.Clear">
            <summary>
            Resets the PersistenceManager to its initial "newed" state.
            </summary>
            <remarks>This will clear all cached data and queries, reset IdGenerators, and clear
            checkpoints.  Any pending changes will be lost.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntity(IdeaBlade.Persistence.PrimaryKey)">
            <overloads>
             <summary>Retrieve a single <see cref="T:IdeaBlade.Persistence.Entity"/>.  If the query retrieves more than one entity, 
             only the first is returned.
             <para>There are two main ways of retrieving an entity: 
             1) using an <see cref="T:IdeaBlade.Persistence.EntityQuery"/>, or 2) using a <see cref="T:IdeaBlade.Persistence.PrimaryKey"/>.
             Each of these also allows for a <see cref="T:IdeaBlade.Persistence.QueryStrategy"/> 
             to be specified or to default.  Each also has generic and non-generic versions.
             </para>
             <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.GetEntities(IdeaBlade.Persistence.IEntityQuery)"/>
             <seealso cref="T:IdeaBlade.Persistence.EntityQuery"/>
             </summary>
            </overloads>
             <summary>
             Retrieve a single Entity based on its primary key.
             </summary>
             <param name="pPrimaryKey">PrimaryKey of the Entity to retrieve</param>
             <returns>The requested <see cref="T:IdeaBlade.Persistence.Entity"/> or a <see cref="P:IdeaBlade.Persistence.Entity.NullEntity"/> of the appropriate type.</returns>
             <remarks>
             The <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultQueryStrategy"/> is used. 
             </remarks>
             <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
             <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
             <example><code lang="C#">
// Sample GetEntity calls
PersistenceManager pm = PersistenceManager.DefaultManager;

Order order1, order2;
Customer cust1, cust2;

// (1) Retrieve a business object using a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.IdEntityColumn, EntityQueryOp.EQ, 10248);
// Use the DefaultQueryStrategy
order1 = pm.GetEntity&lt;Order&gt;(qry);
// Specify the QueryStrategy
order2 = pm.GetEntity&lt;Order&gt;(qry, QueryStrategy.DataSourceOnly);

// (2) Retrieve a business object based on its primary key.
PrimaryKey pk = new PrimaryKey(typeof(Customer), 1);
// Use the DefaultQueryStrategy
cust1 = pm.GetEntity&lt;Customer&gt;(pk);
// Specify the QueryStrategy
cust2 = pm.GetEntity&lt;Customer&gt;(pk, QueryStrategy.CacheOnly);
</code></example><example><code lang="VB">
' Sample GetEntity calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim order1, order2 As Order
Dim cust1, cust2 As Customer

' (1) Retrieve a business object using a query.
Dim qry As New RdbQuery(GetType(Order), Order.IdEntityColumn, EntityQueryOp.EQ, 10248)
' Use the DefaultQueryStrategy
order1 = pm.GetEntity(Of Order)(qry)
' Specify the QueryStrategy
order2 = pm.GetEntity(Of Order)(qry, QueryStrategy.DataSourceOnly)

' (2) Retrieve a business object based on its primary key
Dim pk As New PrimaryKey(GetType(Customer), 1)
' Use the DefaultQueryStrategy
cust1 = pm.GetEntity(Of Customer)(pk)
'Specify the QueryStrategy
cust2 = pm.GetEntity(Of Customer)(pk, QueryStrategy.CacheOnly)
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntity``1(IdeaBlade.Persistence.PrimaryKey)">
            <summary>
            Retrieve a single Entity based on its primary key.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="pPrimaryKey">PrimaryKey of the Entity to retrieve</param>
            <returns>The requested <see cref="T:IdeaBlade.Persistence.Entity"/> or a <see cref="P:IdeaBlade.Persistence.Entity.NullEntity"/> of the appropriate type.</returns>
            <remarks>
            The <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultQueryStrategy"/> is used. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntity calls
PersistenceManager pm = PersistenceManager.DefaultManager;

Order order1, order2;
Customer cust1, cust2;

// (1) Retrieve a business object using a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.IdEntityColumn, EntityQueryOp.EQ, 10248);
// Use the DefaultQueryStrategy
order1 = pm.GetEntity&lt;Order&gt;(qry);
// Specify the QueryStrategy
order2 = pm.GetEntity&lt;Order&gt;(qry, QueryStrategy.DataSourceOnly);

// (2) Retrieve a business object based on its primary key.
PrimaryKey pk = new PrimaryKey(typeof(Customer), 1);
// Use the DefaultQueryStrategy
cust1 = pm.GetEntity&lt;Customer&gt;(pk);
// Specify the QueryStrategy
cust2 = pm.GetEntity&lt;Customer&gt;(pk, QueryStrategy.CacheOnly);
</code></example><example><code lang="VB">
' Sample GetEntity calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim order1, order2 As Order
Dim cust1, cust2 As Customer

' (1) Retrieve a business object using a query.
Dim qry As New RdbQuery(GetType(Order), Order.IdEntityColumn, EntityQueryOp.EQ, 10248)
' Use the DefaultQueryStrategy
order1 = pm.GetEntity(Of Order)(qry)
' Specify the QueryStrategy
order2 = pm.GetEntity(Of Order)(qry, QueryStrategy.DataSourceOnly)

' (2) Retrieve a business object based on its primary key
Dim pk As New PrimaryKey(GetType(Customer), 1)
' Use the DefaultQueryStrategy
cust1 = pm.GetEntity(Of Customer)(pk)
'Specify the QueryStrategy
cust2 = pm.GetEntity(Of Customer)(pk, QueryStrategy.CacheOnly)
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntity(IdeaBlade.Persistence.PrimaryKey,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Retrieve a single Entity based on its primary key and QueryStrategy.
            </summary>
            <param name="pPrimaryKey">PrimaryKey of the Entity to retrieve</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entity</param>
            <returns>The requested <see cref="T:IdeaBlade.Persistence.Entity"/> or a <see cref="P:IdeaBlade.Persistence.Entity.NullEntity"/> of the appropriate type.</returns>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntity calls
PersistenceManager pm = PersistenceManager.DefaultManager;

Order order1, order2;
Customer cust1, cust2;

// (1) Retrieve a business object using a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.IdEntityColumn, EntityQueryOp.EQ, 10248);
// Use the DefaultQueryStrategy
order1 = pm.GetEntity&lt;Order&gt;(qry);
// Specify the QueryStrategy
order2 = pm.GetEntity&lt;Order&gt;(qry, QueryStrategy.DataSourceOnly);

// (2) Retrieve a business object based on its primary key.
PrimaryKey pk = new PrimaryKey(typeof(Customer), 1);
// Use the DefaultQueryStrategy
cust1 = pm.GetEntity&lt;Customer&gt;(pk);
// Specify the QueryStrategy
cust2 = pm.GetEntity&lt;Customer&gt;(pk, QueryStrategy.CacheOnly);
</code></example><example><code lang="VB">
' Sample GetEntity calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim order1, order2 As Order
Dim cust1, cust2 As Customer

' (1) Retrieve a business object using a query.
Dim qry As New RdbQuery(GetType(Order), Order.IdEntityColumn, EntityQueryOp.EQ, 10248)
' Use the DefaultQueryStrategy
order1 = pm.GetEntity(Of Order)(qry)
' Specify the QueryStrategy
order2 = pm.GetEntity(Of Order)(qry, QueryStrategy.DataSourceOnly)

' (2) Retrieve a business object based on its primary key
Dim pk As New PrimaryKey(GetType(Customer), 1)
' Use the DefaultQueryStrategy
cust1 = pm.GetEntity(Of Customer)(pk)
'Specify the QueryStrategy
cust2 = pm.GetEntity(Of Customer)(pk, QueryStrategy.CacheOnly)
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntity``1(IdeaBlade.Persistence.PrimaryKey,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Retrieve a single Entity based on its primary key and QueryStrategy.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="pPrimaryKey">PrimaryKey of the Entity to retrieve</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entity</param>
            <returns>The requested <see cref="T:IdeaBlade.Persistence.Entity"/> or a <see cref="P:IdeaBlade.Persistence.Entity.NullEntity"/> of the appropriate type.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> and <see cref="P:IdeaBlade.Persistence.PrimaryKey.EntityType"/> mismatch</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntity calls
PersistenceManager pm = PersistenceManager.DefaultManager;

Order order1, order2;
Customer cust1, cust2;

// (1) Retrieve a business object using a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.IdEntityColumn, EntityQueryOp.EQ, 10248);
// Use the DefaultQueryStrategy
order1 = pm.GetEntity&lt;Order&gt;(qry);
// Specify the QueryStrategy
order2 = pm.GetEntity&lt;Order&gt;(qry, QueryStrategy.DataSourceOnly);

// (2) Retrieve a business object based on its primary key.
PrimaryKey pk = new PrimaryKey(typeof(Customer), 1);
// Use the DefaultQueryStrategy
cust1 = pm.GetEntity&lt;Customer&gt;(pk);
// Specify the QueryStrategy
cust2 = pm.GetEntity&lt;Customer&gt;(pk, QueryStrategy.CacheOnly);
</code></example><example><code lang="VB">
' Sample GetEntity calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim order1, order2 As Order
Dim cust1, cust2 As Customer

' (1) Retrieve a business object using a query.
Dim qry As New RdbQuery(GetType(Order), Order.IdEntityColumn, EntityQueryOp.EQ, 10248)
' Use the DefaultQueryStrategy
order1 = pm.GetEntity(Of Order)(qry)
' Specify the QueryStrategy
order2 = pm.GetEntity(Of Order)(qry, QueryStrategy.DataSourceOnly)

' (2) Retrieve a business object based on its primary key
Dim pk As New PrimaryKey(GetType(Customer), 1)
' Use the DefaultQueryStrategy
cust1 = pm.GetEntity(Of Customer)(pk)
'Specify the QueryStrategy
cust2 = pm.GetEntity(Of Customer)(pk, QueryStrategy.CacheOnly)
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntity(IdeaBlade.Persistence.IEntityQuery)">
            <summary>
            Retrieve a single Entity based on an EntityQuery. 
            </summary>
            <param name="pEntityQuery">An <see cref="T:IdeaBlade.Persistence.EntityQuery"/></param>
            <returns>The requested <see cref="T:IdeaBlade.Persistence.Entity"/> or a <see cref="P:IdeaBlade.Persistence.Entity.NullEntity"/> of the appropriate type.</returns>
            <remarks>
            If the <paramref name="pEntityQuery"/> has a <see cref="T:IdeaBlade.Persistence.QueryStrategy"/> then it will be used,
            otherwise the <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultQueryStrategy"/> will be used.
            </remarks>
            <exception cref="T:System.ArgumentException">GetEntity does not support querying for abstract types</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntity calls
PersistenceManager pm = PersistenceManager.DefaultManager;

Order order1, order2;
Customer cust1, cust2;

// (1) Retrieve a business object using a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.IdEntityColumn, EntityQueryOp.EQ, 10248);
// Use the DefaultQueryStrategy
order1 = pm.GetEntity&lt;Order&gt;(qry);
// Specify the QueryStrategy
order2 = pm.GetEntity&lt;Order&gt;(qry, QueryStrategy.DataSourceOnly);

// (2) Retrieve a business object based on its primary key.
PrimaryKey pk = new PrimaryKey(typeof(Customer), 1);
// Use the DefaultQueryStrategy
cust1 = pm.GetEntity&lt;Customer&gt;(pk);
// Specify the QueryStrategy
cust2 = pm.GetEntity&lt;Customer&gt;(pk, QueryStrategy.CacheOnly);
</code></example><example><code lang="VB">
' Sample GetEntity calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim order1, order2 As Order
Dim cust1, cust2 As Customer

' (1) Retrieve a business object using a query.
Dim qry As New RdbQuery(GetType(Order), Order.IdEntityColumn, EntityQueryOp.EQ, 10248)
' Use the DefaultQueryStrategy
order1 = pm.GetEntity(Of Order)(qry)
' Specify the QueryStrategy
order2 = pm.GetEntity(Of Order)(qry, QueryStrategy.DataSourceOnly)

' (2) Retrieve a business object based on its primary key
Dim pk As New PrimaryKey(GetType(Customer), 1)
' Use the DefaultQueryStrategy
cust1 = pm.GetEntity(Of Customer)(pk)
'Specify the QueryStrategy
cust2 = pm.GetEntity(Of Customer)(pk, QueryStrategy.CacheOnly)
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntity``1(IdeaBlade.Persistence.IEntityQuery)">
            <summary>
            Retrieve a single Entity based on an EntityQuery. 
            </summary>
            <typeparam name="T">The type of Entity to retrieve</typeparam>
            <param name="pEntityQuery">An <see cref="T:IdeaBlade.Persistence.EntityQuery"/></param>
            <returns>The requested <see cref="T:IdeaBlade.Persistence.Entity"/> or a <see cref="P:IdeaBlade.Persistence.Entity.NullEntity"/> of the appropriate type.</returns>
            <remarks>
            If the <paramref name="pEntityQuery"/> has a <see cref="T:IdeaBlade.Persistence.QueryStrategy"/> then it will be used,
            otherwise the <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultQueryStrategy"/> will be used.
            </remarks>
            <exception cref="T:System.ArgumentException">GetEntity does not support querying for abstract types</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntity calls
PersistenceManager pm = PersistenceManager.DefaultManager;

Order order1, order2;
Customer cust1, cust2;

// (1) Retrieve a business object using a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.IdEntityColumn, EntityQueryOp.EQ, 10248);
// Use the DefaultQueryStrategy
order1 = pm.GetEntity&lt;Order&gt;(qry);
// Specify the QueryStrategy
order2 = pm.GetEntity&lt;Order&gt;(qry, QueryStrategy.DataSourceOnly);

// (2) Retrieve a business object based on its primary key.
PrimaryKey pk = new PrimaryKey(typeof(Customer), 1);
// Use the DefaultQueryStrategy
cust1 = pm.GetEntity&lt;Customer&gt;(pk);
// Specify the QueryStrategy
cust2 = pm.GetEntity&lt;Customer&gt;(pk, QueryStrategy.CacheOnly);
</code></example><example><code lang="VB">
' Sample GetEntity calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim order1, order2 As Order
Dim cust1, cust2 As Customer

' (1) Retrieve a business object using a query.
Dim qry As New RdbQuery(GetType(Order), Order.IdEntityColumn, EntityQueryOp.EQ, 10248)
' Use the DefaultQueryStrategy
order1 = pm.GetEntity(Of Order)(qry)
' Specify the QueryStrategy
order2 = pm.GetEntity(Of Order)(qry, QueryStrategy.DataSourceOnly)

' (2) Retrieve a business object based on its primary key
Dim pk As New PrimaryKey(GetType(Customer), 1)
' Use the DefaultQueryStrategy
cust1 = pm.GetEntity(Of Customer)(pk)
'Specify the QueryStrategy
cust2 = pm.GetEntity(Of Customer)(pk, QueryStrategy.CacheOnly)
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntity(IdeaBlade.Persistence.IEntityQuery,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Retrieve a single Entity based on an EntityQuery and QueryStrategy.
            </summary>
            <param name="pEntityQuery">An <see cref="T:IdeaBlade.Persistence.EntityQuery"/></param>
            <param name="pQueryStrategy">QueryStrategy for locating the entity</param>
            <returns>The requested <see cref="T:IdeaBlade.Persistence.Entity"/> or a <see cref="P:IdeaBlade.Persistence.Entity.NullEntity"/> of the appropriate type.</returns>
            <exception cref="T:System.ArgumentException">GetEntity does not support querying for abstract types</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntity calls
PersistenceManager pm = PersistenceManager.DefaultManager;

Order order1, order2;
Customer cust1, cust2;

// (1) Retrieve a business object using a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.IdEntityColumn, EntityQueryOp.EQ, 10248);
// Use the DefaultQueryStrategy
order1 = pm.GetEntity&lt;Order&gt;(qry);
// Specify the QueryStrategy
order2 = pm.GetEntity&lt;Order&gt;(qry, QueryStrategy.DataSourceOnly);

// (2) Retrieve a business object based on its primary key.
PrimaryKey pk = new PrimaryKey(typeof(Customer), 1);
// Use the DefaultQueryStrategy
cust1 = pm.GetEntity&lt;Customer&gt;(pk);
// Specify the QueryStrategy
cust2 = pm.GetEntity&lt;Customer&gt;(pk, QueryStrategy.CacheOnly);
</code></example><example><code lang="VB">
' Sample GetEntity calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim order1, order2 As Order
Dim cust1, cust2 As Customer

' (1) Retrieve a business object using a query.
Dim qry As New RdbQuery(GetType(Order), Order.IdEntityColumn, EntityQueryOp.EQ, 10248)
' Use the DefaultQueryStrategy
order1 = pm.GetEntity(Of Order)(qry)
' Specify the QueryStrategy
order2 = pm.GetEntity(Of Order)(qry, QueryStrategy.DataSourceOnly)

' (2) Retrieve a business object based on its primary key
Dim pk As New PrimaryKey(GetType(Customer), 1)
' Use the DefaultQueryStrategy
cust1 = pm.GetEntity(Of Customer)(pk)
'Specify the QueryStrategy
cust2 = pm.GetEntity(Of Customer)(pk, QueryStrategy.CacheOnly)
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntity``1(IdeaBlade.Persistence.IEntityQuery,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Retrieve a single Entity based on an EntityQuery and QueryStrategy.
            </summary>
            <typeparam name="T">The type of Entity to retrieve</typeparam>
            <param name="pEntityQuery">An <see cref="T:IdeaBlade.Persistence.EntityQuery"/></param>
            <param name="pQueryStrategy">QueryStrategy for locating the entity</param>
            <returns>The requested <see cref="T:IdeaBlade.Persistence.Entity"/> or a <see cref="P:IdeaBlade.Persistence.Entity.NullEntity"/> of the appropriate type.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> and <see cref="P:IdeaBlade.Persistence.IEntityQuery.EntityType"/> mismatch</exception>
            <exception cref="T:System.ArgumentException">GetEntity does not support querying for abstract types</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntity calls
PersistenceManager pm = PersistenceManager.DefaultManager;

Order order1, order2;
Customer cust1, cust2;

// (1) Retrieve a business object using a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.IdEntityColumn, EntityQueryOp.EQ, 10248);
// Use the DefaultQueryStrategy
order1 = pm.GetEntity&lt;Order&gt;(qry);
// Specify the QueryStrategy
order2 = pm.GetEntity&lt;Order&gt;(qry, QueryStrategy.DataSourceOnly);

// (2) Retrieve a business object based on its primary key.
PrimaryKey pk = new PrimaryKey(typeof(Customer), 1);
// Use the DefaultQueryStrategy
cust1 = pm.GetEntity&lt;Customer&gt;(pk);
// Specify the QueryStrategy
cust2 = pm.GetEntity&lt;Customer&gt;(pk, QueryStrategy.CacheOnly);
</code></example><example><code lang="VB">
' Sample GetEntity calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim order1, order2 As Order
Dim cust1, cust2 As Customer

' (1) Retrieve a business object using a query.
Dim qry As New RdbQuery(GetType(Order), Order.IdEntityColumn, EntityQueryOp.EQ, 10248)
' Use the DefaultQueryStrategy
order1 = pm.GetEntity(Of Order)(qry)
' Specify the QueryStrategy
order2 = pm.GetEntity(Of Order)(qry, QueryStrategy.DataSourceOnly)

' (2) Retrieve a business object based on its primary key
Dim pk As New PrimaryKey(GetType(Customer), 1)
' Use the DefaultQueryStrategy
cust1 = pm.GetEntity(Of Customer)(pk)
'Specify the QueryStrategy
cust2 = pm.GetEntity(Of Customer)(pk, QueryStrategy.CacheOnly)
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntities(IdeaBlade.Persistence.PrimaryKey[])">
            <overloads>
             <summary>Retrieves one or more <see cref="T:IdeaBlade.Persistence.Entity"/> objects.  If the query retrieves no rows then
             an empty array or list is returned.
             <para>There are three main ways of retrieving entities: 
             <list type="number">
             <item>Using an <see cref="T:IdeaBlade.Persistence.EntityQuery"/></item>
             <item>Using a list of <see cref="T:IdeaBlade.Persistence.PrimaryKey"/>s</item>
             <item>Using the entity type to retrieve all objects of that type</item>
             </list>
             Each of these also allows for a <see cref="T:IdeaBlade.Persistence.QueryStrategy"/> 
             to be specified or to default.  Each also has generic and non-generic versions.
             </para>
             <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.GetEntity(IdeaBlade.Persistence.IEntityQuery)"/>
             <seealso cref="T:IdeaBlade.Persistence.EntityQuery"/>
             </summary>
            </overloads>
             <summary>
             Retrieves an array of Entities based on an array of PrimaryKeys. 
             </summary>
             <param name="pPrimaryKeys">Primary Keys of Entities to return</param>
             <returns>Array of entities corresponding to the primary keys passed in</returns>
             <remarks>The Entities returned are not 
             guaranteed to be in any specific order nor is there any assurance that the number of 
             entities returned will equal the number of primary keys passed in.  It is possible
             for any given PrimaryKey to not have a corresponding Entity in the database.
             <para>Note: The primary keys passed to this method must all be for the same entity type.</para>
             <para>The <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultQueryStrategy"/> is used. </para>
             </remarks>
             <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
             <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
             <example><code lang="C#">
// Sample GetEntities calls
PersistenceManager pm = PersistenceManager.DefaultManager;

EntityList&lt;Order&gt; orders1, orders2;
EntityList&lt;Customer&gt; customers1, customers2, customers3;
EntityList&lt;Product&gt; products1, products2;

// (1) Retrieve entities based on a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998");

// Use the DefaultQueryStrategy
orders1 = pm.GetEntities&lt;Order&gt;(qry);
// Specify the query strategy
orders2 = pm.GetEntities&lt;Order&gt;(qry, QueryStrategy.DataSourceThenCache);

// (2) Retrieve business objects by entity type.
// Use the DefaultQueryStrategy
customers1 = pm.GetEntities&lt;Customer&gt;();
// change some entities
customers1[0].Phone = "1-800-555-5555";
customers1[1].PostalCode = "55555";
// Retrieve entities by rowstate
customers2 = pm.GetEntities&lt;Customer&gt;(DataRowState.Modified);
// Use a QueryStrategy
customers3 = pm.GetEntities&lt;Customer&gt;(QueryStrategy.CacheOnly);

// (3) Retrieve business objects by primary key.
PrimaryKey pk1 = new PrimaryKey(typeof(Product), 1);
PrimaryKey pk2 = new PrimaryKey(typeof(Product), 2);
PrimaryKey pk3 = new PrimaryKey(typeof(Product), 3);
PrimaryKeyList keyList1 = new PrimaryKeyList(typeof(Product));
keyList1.Add(pk1);
keyList1.Add(pk2);
PrimaryKeyList keyList2 = new PrimaryKeyList(typeof(Product));
keyList2.Add(pk2);
keyList2.Add(pk3);

// Use the DefaultQueryStrategy
products1 = pm.GetEntities&lt;Product&gt;(keyList1);
// Specify the QueryStrategy
products2 = pm.GetEntities&lt;Product&gt;(keyList2, QueryStrategy.DataSourceOnly);
</code></example><example><code lang="VB">
' Sample GetEntities calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim orders1, orders2 As EntityList(Of Order)
Dim customers1, customers2, customers3 As EntityList(Of Customer)
Dim products1, products2 As EntityList(Of Product)

' (1) Retrieve entities based on a query.
Dim qry As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998")

' Use the DefaultQueryStrategy
orders1 = pm.GetEntities(Of Order)(qry)
' Specify the query strategy
orders2 = pm.GetEntities(Of Order)(qry)

' (2) Retrieve business objects by entity type.
' Use the DefaultQueryStrategy
customers1 = pm.GetEntities(Of Customer)()
' change some entities
customers1(0).Phone = "1-800-555-5555"
customers1(1).PostalCode = "55555"
' Retrieve entities by rowstate
customers2 = pm.GetEntities(Of Customer)(DataRowState.Modified)
' Use a QueryStrategy
customers3 = pm.GetEntities(Of Customer)(QueryStrategy.CacheOnly)

' (3) Retrieve business objects by primary key.
Dim pk1 As New PrimaryKey(GetType(Product), 1)
Dim pk2 As New PrimaryKey(GetType(Product), 2)
Dim pk3 As New PrimaryKey(GetType(Product), 3)
Dim keyList1 As New PrimaryKeyList(GetType(Product))
keyList1.Add(pk1)
keyList1.Add(pk2)
Dim keyList2 As New PrimaryKeyList(GetType(Product))
keyList2.Add(pk2)
keyList2.Add(pk3)

' Use the DefaultQueryStrategy
products1 = pm.GetEntities(Of Product)(keyList1)
' Specify the QueryStrategy
products2 = pm.GetEntities(Of Product)(keyList2)	
     </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntities``1(IdeaBlade.Persistence.PrimaryKeyList)">
            <summary>
            Retrieves an EntityList of Entities based on a PrimaryKeyList.
            </summary>
            <param name="pPkList">Primary Keys of Entities to return</param>
            <returns>EntityList of entities corresponding to the primary keys passed in</returns>
            <remarks>The Entities returned are not 
            guaranteed to be in any specific order nor is there any assurance that the number of 
            entities returned will equal the number of primary keys passed in.  It is possible
            for any given PrimaryKey to not have a corresponding Entity in the database.
            <para>Note: The primary keys passed to this method must all be for the same entity type.</para>
            <para>The <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultQueryStrategy"/> is used. </para>
            </remarks>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> and <see cref="P:IdeaBlade.Persistence.PrimaryKeyList.EntityType"/> mismatch</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntities calls
PersistenceManager pm = PersistenceManager.DefaultManager;

EntityList&lt;Order&gt; orders1, orders2;
EntityList&lt;Customer&gt; customers1, customers2, customers3;
EntityList&lt;Product&gt; products1, products2;

// (1) Retrieve entities based on a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998");

// Use the DefaultQueryStrategy
orders1 = pm.GetEntities&lt;Order&gt;(qry);
// Specify the query strategy
orders2 = pm.GetEntities&lt;Order&gt;(qry, QueryStrategy.DataSourceThenCache);

// (2) Retrieve business objects by entity type.
// Use the DefaultQueryStrategy
customers1 = pm.GetEntities&lt;Customer&gt;();
// change some entities
customers1[0].Phone = "1-800-555-5555";
customers1[1].PostalCode = "55555";
// Retrieve entities by rowstate
customers2 = pm.GetEntities&lt;Customer&gt;(DataRowState.Modified);
// Use a QueryStrategy
customers3 = pm.GetEntities&lt;Customer&gt;(QueryStrategy.CacheOnly);

// (3) Retrieve business objects by primary key.
PrimaryKey pk1 = new PrimaryKey(typeof(Product), 1);
PrimaryKey pk2 = new PrimaryKey(typeof(Product), 2);
PrimaryKey pk3 = new PrimaryKey(typeof(Product), 3);
PrimaryKeyList keyList1 = new PrimaryKeyList(typeof(Product));
keyList1.Add(pk1);
keyList1.Add(pk2);
PrimaryKeyList keyList2 = new PrimaryKeyList(typeof(Product));
keyList2.Add(pk2);
keyList2.Add(pk3);

// Use the DefaultQueryStrategy
products1 = pm.GetEntities&lt;Product&gt;(keyList1);
// Specify the QueryStrategy
products2 = pm.GetEntities&lt;Product&gt;(keyList2, QueryStrategy.DataSourceOnly);
</code></example><example><code lang="VB">
' Sample GetEntities calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim orders1, orders2 As EntityList(Of Order)
Dim customers1, customers2, customers3 As EntityList(Of Customer)
Dim products1, products2 As EntityList(Of Product)

' (1) Retrieve entities based on a query.
Dim qry As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998")

' Use the DefaultQueryStrategy
orders1 = pm.GetEntities(Of Order)(qry)
' Specify the query strategy
orders2 = pm.GetEntities(Of Order)(qry)

' (2) Retrieve business objects by entity type.
' Use the DefaultQueryStrategy
customers1 = pm.GetEntities(Of Customer)()
' change some entities
customers1(0).Phone = "1-800-555-5555"
customers1(1).PostalCode = "55555"
' Retrieve entities by rowstate
customers2 = pm.GetEntities(Of Customer)(DataRowState.Modified)
' Use a QueryStrategy
customers3 = pm.GetEntities(Of Customer)(QueryStrategy.CacheOnly)

' (3) Retrieve business objects by primary key.
Dim pk1 As New PrimaryKey(GetType(Product), 1)
Dim pk2 As New PrimaryKey(GetType(Product), 2)
Dim pk3 As New PrimaryKey(GetType(Product), 3)
Dim keyList1 As New PrimaryKeyList(GetType(Product))
keyList1.Add(pk1)
keyList1.Add(pk2)
Dim keyList2 As New PrimaryKeyList(GetType(Product))
keyList2.Add(pk2)
keyList2.Add(pk3)

' Use the DefaultQueryStrategy
products1 = pm.GetEntities(Of Product)(keyList1)
' Specify the QueryStrategy
products2 = pm.GetEntities(Of Product)(keyList2)	
     </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntities(IdeaBlade.Persistence.PrimaryKey[],IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Retrieves an array of Entities based on an array of PrimaryKeys and the specified QueryStrategy.
            </summary>
            <param name="pPrimaryKeys">Primary Keys of Entities to return</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entities</param>
            <returns>Array of entities corresponding to the primary keys passed in</returns>
            <remarks>The Entities returned are not 
            guaranteed to be in any specific order nor is there any assurance that the number of 
            entities returned will equal the number of primary keys passed in.  It is possible
            for any given PrimaryKey to not have a corresponding Entity in the database.
            <para>Note: The primary keys passed to this method must all be for the same entity type.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntities calls
PersistenceManager pm = PersistenceManager.DefaultManager;

EntityList&lt;Order&gt; orders1, orders2;
EntityList&lt;Customer&gt; customers1, customers2, customers3;
EntityList&lt;Product&gt; products1, products2;

// (1) Retrieve entities based on a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998");

// Use the DefaultQueryStrategy
orders1 = pm.GetEntities&lt;Order&gt;(qry);
// Specify the query strategy
orders2 = pm.GetEntities&lt;Order&gt;(qry, QueryStrategy.DataSourceThenCache);

// (2) Retrieve business objects by entity type.
// Use the DefaultQueryStrategy
customers1 = pm.GetEntities&lt;Customer&gt;();
// change some entities
customers1[0].Phone = "1-800-555-5555";
customers1[1].PostalCode = "55555";
// Retrieve entities by rowstate
customers2 = pm.GetEntities&lt;Customer&gt;(DataRowState.Modified);
// Use a QueryStrategy
customers3 = pm.GetEntities&lt;Customer&gt;(QueryStrategy.CacheOnly);

// (3) Retrieve business objects by primary key.
PrimaryKey pk1 = new PrimaryKey(typeof(Product), 1);
PrimaryKey pk2 = new PrimaryKey(typeof(Product), 2);
PrimaryKey pk3 = new PrimaryKey(typeof(Product), 3);
PrimaryKeyList keyList1 = new PrimaryKeyList(typeof(Product));
keyList1.Add(pk1);
keyList1.Add(pk2);
PrimaryKeyList keyList2 = new PrimaryKeyList(typeof(Product));
keyList2.Add(pk2);
keyList2.Add(pk3);

// Use the DefaultQueryStrategy
products1 = pm.GetEntities&lt;Product&gt;(keyList1);
// Specify the QueryStrategy
products2 = pm.GetEntities&lt;Product&gt;(keyList2, QueryStrategy.DataSourceOnly);
</code></example><example><code lang="VB">
' Sample GetEntities calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim orders1, orders2 As EntityList(Of Order)
Dim customers1, customers2, customers3 As EntityList(Of Customer)
Dim products1, products2 As EntityList(Of Product)

' (1) Retrieve entities based on a query.
Dim qry As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998")

' Use the DefaultQueryStrategy
orders1 = pm.GetEntities(Of Order)(qry)
' Specify the query strategy
orders2 = pm.GetEntities(Of Order)(qry)

' (2) Retrieve business objects by entity type.
' Use the DefaultQueryStrategy
customers1 = pm.GetEntities(Of Customer)()
' change some entities
customers1(0).Phone = "1-800-555-5555"
customers1(1).PostalCode = "55555"
' Retrieve entities by rowstate
customers2 = pm.GetEntities(Of Customer)(DataRowState.Modified)
' Use a QueryStrategy
customers3 = pm.GetEntities(Of Customer)(QueryStrategy.CacheOnly)

' (3) Retrieve business objects by primary key.
Dim pk1 As New PrimaryKey(GetType(Product), 1)
Dim pk2 As New PrimaryKey(GetType(Product), 2)
Dim pk3 As New PrimaryKey(GetType(Product), 3)
Dim keyList1 As New PrimaryKeyList(GetType(Product))
keyList1.Add(pk1)
keyList1.Add(pk2)
Dim keyList2 As New PrimaryKeyList(GetType(Product))
keyList2.Add(pk2)
keyList2.Add(pk3)

' Use the DefaultQueryStrategy
products1 = pm.GetEntities(Of Product)(keyList1)
' Specify the QueryStrategy
products2 = pm.GetEntities(Of Product)(keyList2)	
     </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntities``1(IdeaBlade.Persistence.PrimaryKeyList,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Retrieves an EntityList of Entities based on a list of PrimaryKeys and the specified QueryStrategy.
            </summary>
            <typeparam name="T">The type of Entity to retrieve</typeparam>
            <param name="pPkList">Primary Keys of Entities to return</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entities</param>
            <returns>List of entities corresponding to the primary keys passed in</returns>
            <remarks>The Entities returned are not 
            guaranteed to be in any specific order nor is there any assurance that the number of 
            entities returned will equal the number of primary keys passed in.  It is possible
            for any given PrimaryKey to not have a corresponding Entity in the database.
            <para>Note: The primary keys passed to this method must all be for the same entity type.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> and <see cref="P:IdeaBlade.Persistence.PrimaryKeyList.EntityType"/> mismatch</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntities calls
PersistenceManager pm = PersistenceManager.DefaultManager;

EntityList&lt;Order&gt; orders1, orders2;
EntityList&lt;Customer&gt; customers1, customers2, customers3;
EntityList&lt;Product&gt; products1, products2;

// (1) Retrieve entities based on a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998");

// Use the DefaultQueryStrategy
orders1 = pm.GetEntities&lt;Order&gt;(qry);
// Specify the query strategy
orders2 = pm.GetEntities&lt;Order&gt;(qry, QueryStrategy.DataSourceThenCache);

// (2) Retrieve business objects by entity type.
// Use the DefaultQueryStrategy
customers1 = pm.GetEntities&lt;Customer&gt;();
// change some entities
customers1[0].Phone = "1-800-555-5555";
customers1[1].PostalCode = "55555";
// Retrieve entities by rowstate
customers2 = pm.GetEntities&lt;Customer&gt;(DataRowState.Modified);
// Use a QueryStrategy
customers3 = pm.GetEntities&lt;Customer&gt;(QueryStrategy.CacheOnly);

// (3) Retrieve business objects by primary key.
PrimaryKey pk1 = new PrimaryKey(typeof(Product), 1);
PrimaryKey pk2 = new PrimaryKey(typeof(Product), 2);
PrimaryKey pk3 = new PrimaryKey(typeof(Product), 3);
PrimaryKeyList keyList1 = new PrimaryKeyList(typeof(Product));
keyList1.Add(pk1);
keyList1.Add(pk2);
PrimaryKeyList keyList2 = new PrimaryKeyList(typeof(Product));
keyList2.Add(pk2);
keyList2.Add(pk3);

// Use the DefaultQueryStrategy
products1 = pm.GetEntities&lt;Product&gt;(keyList1);
// Specify the QueryStrategy
products2 = pm.GetEntities&lt;Product&gt;(keyList2, QueryStrategy.DataSourceOnly);
</code></example><example><code lang="VB">
' Sample GetEntities calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim orders1, orders2 As EntityList(Of Order)
Dim customers1, customers2, customers3 As EntityList(Of Customer)
Dim products1, products2 As EntityList(Of Product)

' (1) Retrieve entities based on a query.
Dim qry As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998")

' Use the DefaultQueryStrategy
orders1 = pm.GetEntities(Of Order)(qry)
' Specify the query strategy
orders2 = pm.GetEntities(Of Order)(qry)

' (2) Retrieve business objects by entity type.
' Use the DefaultQueryStrategy
customers1 = pm.GetEntities(Of Customer)()
' change some entities
customers1(0).Phone = "1-800-555-5555"
customers1(1).PostalCode = "55555"
' Retrieve entities by rowstate
customers2 = pm.GetEntities(Of Customer)(DataRowState.Modified)
' Use a QueryStrategy
customers3 = pm.GetEntities(Of Customer)(QueryStrategy.CacheOnly)

' (3) Retrieve business objects by primary key.
Dim pk1 As New PrimaryKey(GetType(Product), 1)
Dim pk2 As New PrimaryKey(GetType(Product), 2)
Dim pk3 As New PrimaryKey(GetType(Product), 3)
Dim keyList1 As New PrimaryKeyList(GetType(Product))
keyList1.Add(pk1)
keyList1.Add(pk2)
Dim keyList2 As New PrimaryKeyList(GetType(Product))
keyList2.Add(pk2)
keyList2.Add(pk3)

' Use the DefaultQueryStrategy
products1 = pm.GetEntities(Of Product)(keyList1)
' Specify the QueryStrategy
products2 = pm.GetEntities(Of Product)(keyList2)	
     </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntities(System.Type)">
            <summary>
            Retrieves an array of Entities based on an Entity type.
            </summary>
            <param name="pEntityType">The type of Entity to retrieve</param>
            <returns>An array of Entities</returns>
            <remarks>All entities of the requested entity type will be returned.
            <para>
            The <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultQueryStrategy"/> is used. 
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">GetEntities does not support querying for abstract types</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntities calls
PersistenceManager pm = PersistenceManager.DefaultManager;

EntityList&lt;Order&gt; orders1, orders2;
EntityList&lt;Customer&gt; customers1, customers2, customers3;
EntityList&lt;Product&gt; products1, products2;

// (1) Retrieve entities based on a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998");

// Use the DefaultQueryStrategy
orders1 = pm.GetEntities&lt;Order&gt;(qry);
// Specify the query strategy
orders2 = pm.GetEntities&lt;Order&gt;(qry, QueryStrategy.DataSourceThenCache);

// (2) Retrieve business objects by entity type.
// Use the DefaultQueryStrategy
customers1 = pm.GetEntities&lt;Customer&gt;();
// change some entities
customers1[0].Phone = "1-800-555-5555";
customers1[1].PostalCode = "55555";
// Retrieve entities by rowstate
customers2 = pm.GetEntities&lt;Customer&gt;(DataRowState.Modified);
// Use a QueryStrategy
customers3 = pm.GetEntities&lt;Customer&gt;(QueryStrategy.CacheOnly);

// (3) Retrieve business objects by primary key.
PrimaryKey pk1 = new PrimaryKey(typeof(Product), 1);
PrimaryKey pk2 = new PrimaryKey(typeof(Product), 2);
PrimaryKey pk3 = new PrimaryKey(typeof(Product), 3);
PrimaryKeyList keyList1 = new PrimaryKeyList(typeof(Product));
keyList1.Add(pk1);
keyList1.Add(pk2);
PrimaryKeyList keyList2 = new PrimaryKeyList(typeof(Product));
keyList2.Add(pk2);
keyList2.Add(pk3);

// Use the DefaultQueryStrategy
products1 = pm.GetEntities&lt;Product&gt;(keyList1);
// Specify the QueryStrategy
products2 = pm.GetEntities&lt;Product&gt;(keyList2, QueryStrategy.DataSourceOnly);
</code></example><example><code lang="VB">
' Sample GetEntities calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim orders1, orders2 As EntityList(Of Order)
Dim customers1, customers2, customers3 As EntityList(Of Customer)
Dim products1, products2 As EntityList(Of Product)

' (1) Retrieve entities based on a query.
Dim qry As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998")

' Use the DefaultQueryStrategy
orders1 = pm.GetEntities(Of Order)(qry)
' Specify the query strategy
orders2 = pm.GetEntities(Of Order)(qry)

' (2) Retrieve business objects by entity type.
' Use the DefaultQueryStrategy
customers1 = pm.GetEntities(Of Customer)()
' change some entities
customers1(0).Phone = "1-800-555-5555"
customers1(1).PostalCode = "55555"
' Retrieve entities by rowstate
customers2 = pm.GetEntities(Of Customer)(DataRowState.Modified)
' Use a QueryStrategy
customers3 = pm.GetEntities(Of Customer)(QueryStrategy.CacheOnly)

' (3) Retrieve business objects by primary key.
Dim pk1 As New PrimaryKey(GetType(Product), 1)
Dim pk2 As New PrimaryKey(GetType(Product), 2)
Dim pk3 As New PrimaryKey(GetType(Product), 3)
Dim keyList1 As New PrimaryKeyList(GetType(Product))
keyList1.Add(pk1)
keyList1.Add(pk2)
Dim keyList2 As New PrimaryKeyList(GetType(Product))
keyList2.Add(pk2)
keyList2.Add(pk3)

' Use the DefaultQueryStrategy
products1 = pm.GetEntities(Of Product)(keyList1)
' Specify the QueryStrategy
products2 = pm.GetEntities(Of Product)(keyList2)	
     </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntities``1">
            <summary>
            Retrieves an EntityList of Entities based on an Entity type.
            </summary>
            <typeparam name="T">The type of Entity to retrieve</typeparam>
            <returns>An EntityList of Entities</returns>
            <remarks>All entities of the requested entity type will be returned.
            <para>
            The <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultQueryStrategy"/> is used. 
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">GetEntities does not support querying for abstract types</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntities calls
PersistenceManager pm = PersistenceManager.DefaultManager;

EntityList&lt;Order&gt; orders1, orders2;
EntityList&lt;Customer&gt; customers1, customers2, customers3;
EntityList&lt;Product&gt; products1, products2;

// (1) Retrieve entities based on a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998");

// Use the DefaultQueryStrategy
orders1 = pm.GetEntities&lt;Order&gt;(qry);
// Specify the query strategy
orders2 = pm.GetEntities&lt;Order&gt;(qry, QueryStrategy.DataSourceThenCache);

// (2) Retrieve business objects by entity type.
// Use the DefaultQueryStrategy
customers1 = pm.GetEntities&lt;Customer&gt;();
// change some entities
customers1[0].Phone = "1-800-555-5555";
customers1[1].PostalCode = "55555";
// Retrieve entities by rowstate
customers2 = pm.GetEntities&lt;Customer&gt;(DataRowState.Modified);
// Use a QueryStrategy
customers3 = pm.GetEntities&lt;Customer&gt;(QueryStrategy.CacheOnly);

// (3) Retrieve business objects by primary key.
PrimaryKey pk1 = new PrimaryKey(typeof(Product), 1);
PrimaryKey pk2 = new PrimaryKey(typeof(Product), 2);
PrimaryKey pk3 = new PrimaryKey(typeof(Product), 3);
PrimaryKeyList keyList1 = new PrimaryKeyList(typeof(Product));
keyList1.Add(pk1);
keyList1.Add(pk2);
PrimaryKeyList keyList2 = new PrimaryKeyList(typeof(Product));
keyList2.Add(pk2);
keyList2.Add(pk3);

// Use the DefaultQueryStrategy
products1 = pm.GetEntities&lt;Product&gt;(keyList1);
// Specify the QueryStrategy
products2 = pm.GetEntities&lt;Product&gt;(keyList2, QueryStrategy.DataSourceOnly);
</code></example><example><code lang="VB">
' Sample GetEntities calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim orders1, orders2 As EntityList(Of Order)
Dim customers1, customers2, customers3 As EntityList(Of Customer)
Dim products1, products2 As EntityList(Of Product)

' (1) Retrieve entities based on a query.
Dim qry As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998")

' Use the DefaultQueryStrategy
orders1 = pm.GetEntities(Of Order)(qry)
' Specify the query strategy
orders2 = pm.GetEntities(Of Order)(qry)

' (2) Retrieve business objects by entity type.
' Use the DefaultQueryStrategy
customers1 = pm.GetEntities(Of Customer)()
' change some entities
customers1(0).Phone = "1-800-555-5555"
customers1(1).PostalCode = "55555"
' Retrieve entities by rowstate
customers2 = pm.GetEntities(Of Customer)(DataRowState.Modified)
' Use a QueryStrategy
customers3 = pm.GetEntities(Of Customer)(QueryStrategy.CacheOnly)

' (3) Retrieve business objects by primary key.
Dim pk1 As New PrimaryKey(GetType(Product), 1)
Dim pk2 As New PrimaryKey(GetType(Product), 2)
Dim pk3 As New PrimaryKey(GetType(Product), 3)
Dim keyList1 As New PrimaryKeyList(GetType(Product))
keyList1.Add(pk1)
keyList1.Add(pk2)
Dim keyList2 As New PrimaryKeyList(GetType(Product))
keyList2.Add(pk2)
keyList2.Add(pk3)

' Use the DefaultQueryStrategy
products1 = pm.GetEntities(Of Product)(keyList1)
' Specify the QueryStrategy
products2 = pm.GetEntities(Of Product)(keyList2)	
     </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntities(System.Type,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Retrieves an array of Entities based on an Entity type and QueryStrategy.
            </summary>
            <param name="pEntityType">The type of Entity to retrieve</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entity</param>
            <returns>An array of Entities</returns>
            <remarks>All entities of the requested entity type will be returned.
            </remarks>
            <exception cref="T:System.ArgumentException">GetEntities does not support querying for abstract types</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntities calls
PersistenceManager pm = PersistenceManager.DefaultManager;

EntityList&lt;Order&gt; orders1, orders2;
EntityList&lt;Customer&gt; customers1, customers2, customers3;
EntityList&lt;Product&gt; products1, products2;

// (1) Retrieve entities based on a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998");

// Use the DefaultQueryStrategy
orders1 = pm.GetEntities&lt;Order&gt;(qry);
// Specify the query strategy
orders2 = pm.GetEntities&lt;Order&gt;(qry, QueryStrategy.DataSourceThenCache);

// (2) Retrieve business objects by entity type.
// Use the DefaultQueryStrategy
customers1 = pm.GetEntities&lt;Customer&gt;();
// change some entities
customers1[0].Phone = "1-800-555-5555";
customers1[1].PostalCode = "55555";
// Retrieve entities by rowstate
customers2 = pm.GetEntities&lt;Customer&gt;(DataRowState.Modified);
// Use a QueryStrategy
customers3 = pm.GetEntities&lt;Customer&gt;(QueryStrategy.CacheOnly);

// (3) Retrieve business objects by primary key.
PrimaryKey pk1 = new PrimaryKey(typeof(Product), 1);
PrimaryKey pk2 = new PrimaryKey(typeof(Product), 2);
PrimaryKey pk3 = new PrimaryKey(typeof(Product), 3);
PrimaryKeyList keyList1 = new PrimaryKeyList(typeof(Product));
keyList1.Add(pk1);
keyList1.Add(pk2);
PrimaryKeyList keyList2 = new PrimaryKeyList(typeof(Product));
keyList2.Add(pk2);
keyList2.Add(pk3);

// Use the DefaultQueryStrategy
products1 = pm.GetEntities&lt;Product&gt;(keyList1);
// Specify the QueryStrategy
products2 = pm.GetEntities&lt;Product&gt;(keyList2, QueryStrategy.DataSourceOnly);
</code></example><example><code lang="VB">
' Sample GetEntities calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim orders1, orders2 As EntityList(Of Order)
Dim customers1, customers2, customers3 As EntityList(Of Customer)
Dim products1, products2 As EntityList(Of Product)

' (1) Retrieve entities based on a query.
Dim qry As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998")

' Use the DefaultQueryStrategy
orders1 = pm.GetEntities(Of Order)(qry)
' Specify the query strategy
orders2 = pm.GetEntities(Of Order)(qry)

' (2) Retrieve business objects by entity type.
' Use the DefaultQueryStrategy
customers1 = pm.GetEntities(Of Customer)()
' change some entities
customers1(0).Phone = "1-800-555-5555"
customers1(1).PostalCode = "55555"
' Retrieve entities by rowstate
customers2 = pm.GetEntities(Of Customer)(DataRowState.Modified)
' Use a QueryStrategy
customers3 = pm.GetEntities(Of Customer)(QueryStrategy.CacheOnly)

' (3) Retrieve business objects by primary key.
Dim pk1 As New PrimaryKey(GetType(Product), 1)
Dim pk2 As New PrimaryKey(GetType(Product), 2)
Dim pk3 As New PrimaryKey(GetType(Product), 3)
Dim keyList1 As New PrimaryKeyList(GetType(Product))
keyList1.Add(pk1)
keyList1.Add(pk2)
Dim keyList2 As New PrimaryKeyList(GetType(Product))
keyList2.Add(pk2)
keyList2.Add(pk3)

' Use the DefaultQueryStrategy
products1 = pm.GetEntities(Of Product)(keyList1)
' Specify the QueryStrategy
products2 = pm.GetEntities(Of Product)(keyList2)	
     </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntities``1(IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Retrieves an EntityList of Entities based on an Entity type and QueryStrategy.
            </summary>
            <typeparam name="T">The type of Entity to retrieve</typeparam>
            <param name="pQueryStrategy">QueryStrategy for locating the entity</param>
            <returns>An EntityList of Entities</returns>
            <remarks>All entities of the requested entity type will be returned.
            </remarks>
            <exception cref="T:System.ArgumentException">GetEntities does not support querying for abstract types</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntities calls
PersistenceManager pm = PersistenceManager.DefaultManager;

EntityList&lt;Order&gt; orders1, orders2;
EntityList&lt;Customer&gt; customers1, customers2, customers3;
EntityList&lt;Product&gt; products1, products2;

// (1) Retrieve entities based on a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998");

// Use the DefaultQueryStrategy
orders1 = pm.GetEntities&lt;Order&gt;(qry);
// Specify the query strategy
orders2 = pm.GetEntities&lt;Order&gt;(qry, QueryStrategy.DataSourceThenCache);

// (2) Retrieve business objects by entity type.
// Use the DefaultQueryStrategy
customers1 = pm.GetEntities&lt;Customer&gt;();
// change some entities
customers1[0].Phone = "1-800-555-5555";
customers1[1].PostalCode = "55555";
// Retrieve entities by rowstate
customers2 = pm.GetEntities&lt;Customer&gt;(DataRowState.Modified);
// Use a QueryStrategy
customers3 = pm.GetEntities&lt;Customer&gt;(QueryStrategy.CacheOnly);

// (3) Retrieve business objects by primary key.
PrimaryKey pk1 = new PrimaryKey(typeof(Product), 1);
PrimaryKey pk2 = new PrimaryKey(typeof(Product), 2);
PrimaryKey pk3 = new PrimaryKey(typeof(Product), 3);
PrimaryKeyList keyList1 = new PrimaryKeyList(typeof(Product));
keyList1.Add(pk1);
keyList1.Add(pk2);
PrimaryKeyList keyList2 = new PrimaryKeyList(typeof(Product));
keyList2.Add(pk2);
keyList2.Add(pk3);

// Use the DefaultQueryStrategy
products1 = pm.GetEntities&lt;Product&gt;(keyList1);
// Specify the QueryStrategy
products2 = pm.GetEntities&lt;Product&gt;(keyList2, QueryStrategy.DataSourceOnly);
</code></example><example><code lang="VB">
' Sample GetEntities calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim orders1, orders2 As EntityList(Of Order)
Dim customers1, customers2, customers3 As EntityList(Of Customer)
Dim products1, products2 As EntityList(Of Product)

' (1) Retrieve entities based on a query.
Dim qry As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998")

' Use the DefaultQueryStrategy
orders1 = pm.GetEntities(Of Order)(qry)
' Specify the query strategy
orders2 = pm.GetEntities(Of Order)(qry)

' (2) Retrieve business objects by entity type.
' Use the DefaultQueryStrategy
customers1 = pm.GetEntities(Of Customer)()
' change some entities
customers1(0).Phone = "1-800-555-5555"
customers1(1).PostalCode = "55555"
' Retrieve entities by rowstate
customers2 = pm.GetEntities(Of Customer)(DataRowState.Modified)
' Use a QueryStrategy
customers3 = pm.GetEntities(Of Customer)(QueryStrategy.CacheOnly)

' (3) Retrieve business objects by primary key.
Dim pk1 As New PrimaryKey(GetType(Product), 1)
Dim pk2 As New PrimaryKey(GetType(Product), 2)
Dim pk3 As New PrimaryKey(GetType(Product), 3)
Dim keyList1 As New PrimaryKeyList(GetType(Product))
keyList1.Add(pk1)
keyList1.Add(pk2)
Dim keyList2 As New PrimaryKeyList(GetType(Product))
keyList2.Add(pk2)
keyList2.Add(pk3)

' Use the DefaultQueryStrategy
products1 = pm.GetEntities(Of Product)(keyList1)
' Specify the QueryStrategy
products2 = pm.GetEntities(Of Product)(keyList2)	
     </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntities(IdeaBlade.Persistence.IEntityQuery)">
            <summary>
            Retrieves an array of Entities based on an EntityQuery. 
            </summary>
            <param name="pEntityQuery">The <see cref="T:IdeaBlade.Persistence.EntityQuery"/> to execute</param>
            <returns>An array of Entities of the requested Entity type</returns>
            <remarks>
            If the <paramref name="pEntityQuery"/> contains a <see cref="P:IEntityQuery.QueryStrategy"/>
            then it will be used, otherwise the <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultQueryStrategy"/> is used.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="pEntityQuery"/> is null</exception>
            <exception cref="T:System.ArgumentException">GetEntities does not support querying for abstract types</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntities calls
PersistenceManager pm = PersistenceManager.DefaultManager;

EntityList&lt;Order&gt; orders1, orders2;
EntityList&lt;Customer&gt; customers1, customers2, customers3;
EntityList&lt;Product&gt; products1, products2;

// (1) Retrieve entities based on a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998");

// Use the DefaultQueryStrategy
orders1 = pm.GetEntities&lt;Order&gt;(qry);
// Specify the query strategy
orders2 = pm.GetEntities&lt;Order&gt;(qry, QueryStrategy.DataSourceThenCache);

// (2) Retrieve business objects by entity type.
// Use the DefaultQueryStrategy
customers1 = pm.GetEntities&lt;Customer&gt;();
// change some entities
customers1[0].Phone = "1-800-555-5555";
customers1[1].PostalCode = "55555";
// Retrieve entities by rowstate
customers2 = pm.GetEntities&lt;Customer&gt;(DataRowState.Modified);
// Use a QueryStrategy
customers3 = pm.GetEntities&lt;Customer&gt;(QueryStrategy.CacheOnly);

// (3) Retrieve business objects by primary key.
PrimaryKey pk1 = new PrimaryKey(typeof(Product), 1);
PrimaryKey pk2 = new PrimaryKey(typeof(Product), 2);
PrimaryKey pk3 = new PrimaryKey(typeof(Product), 3);
PrimaryKeyList keyList1 = new PrimaryKeyList(typeof(Product));
keyList1.Add(pk1);
keyList1.Add(pk2);
PrimaryKeyList keyList2 = new PrimaryKeyList(typeof(Product));
keyList2.Add(pk2);
keyList2.Add(pk3);

// Use the DefaultQueryStrategy
products1 = pm.GetEntities&lt;Product&gt;(keyList1);
// Specify the QueryStrategy
products2 = pm.GetEntities&lt;Product&gt;(keyList2, QueryStrategy.DataSourceOnly);
</code></example><example><code lang="VB">
' Sample GetEntities calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim orders1, orders2 As EntityList(Of Order)
Dim customers1, customers2, customers3 As EntityList(Of Customer)
Dim products1, products2 As EntityList(Of Product)

' (1) Retrieve entities based on a query.
Dim qry As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998")

' Use the DefaultQueryStrategy
orders1 = pm.GetEntities(Of Order)(qry)
' Specify the query strategy
orders2 = pm.GetEntities(Of Order)(qry)

' (2) Retrieve business objects by entity type.
' Use the DefaultQueryStrategy
customers1 = pm.GetEntities(Of Customer)()
' change some entities
customers1(0).Phone = "1-800-555-5555"
customers1(1).PostalCode = "55555"
' Retrieve entities by rowstate
customers2 = pm.GetEntities(Of Customer)(DataRowState.Modified)
' Use a QueryStrategy
customers3 = pm.GetEntities(Of Customer)(QueryStrategy.CacheOnly)

' (3) Retrieve business objects by primary key.
Dim pk1 As New PrimaryKey(GetType(Product), 1)
Dim pk2 As New PrimaryKey(GetType(Product), 2)
Dim pk3 As New PrimaryKey(GetType(Product), 3)
Dim keyList1 As New PrimaryKeyList(GetType(Product))
keyList1.Add(pk1)
keyList1.Add(pk2)
Dim keyList2 As New PrimaryKeyList(GetType(Product))
keyList2.Add(pk2)
keyList2.Add(pk3)

' Use the DefaultQueryStrategy
products1 = pm.GetEntities(Of Product)(keyList1)
' Specify the QueryStrategy
products2 = pm.GetEntities(Of Product)(keyList2)	
     </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntities``1(IdeaBlade.Persistence.IEntityQuery)">
            <summary>
            Retrieves an EntityList of Entities based on an EntityQuery. 
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="pEntityQuery">The <see cref="T:IdeaBlade.Persistence.EntityQuery"/> to execute</param>
            <returns>An EntityList of Entities</returns>
            <remarks>
            If the <paramref name="pEntityQuery"/> contains a <see cref="P:IEntityQuery.QueryStrategy"/>
            then it will be used, otherwise the <see cref="P:IdeaBlade.Persistence.PersistenceManager.DefaultQueryStrategy"/> is used.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="pEntityQuery"/> is null</exception>
            <exception cref="T:System.ArgumentException">GetEntities does not support querying for abstract types</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntities calls
PersistenceManager pm = PersistenceManager.DefaultManager;

EntityList&lt;Order&gt; orders1, orders2;
EntityList&lt;Customer&gt; customers1, customers2, customers3;
EntityList&lt;Product&gt; products1, products2;

// (1) Retrieve entities based on a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998");

// Use the DefaultQueryStrategy
orders1 = pm.GetEntities&lt;Order&gt;(qry);
// Specify the query strategy
orders2 = pm.GetEntities&lt;Order&gt;(qry, QueryStrategy.DataSourceThenCache);

// (2) Retrieve business objects by entity type.
// Use the DefaultQueryStrategy
customers1 = pm.GetEntities&lt;Customer&gt;();
// change some entities
customers1[0].Phone = "1-800-555-5555";
customers1[1].PostalCode = "55555";
// Retrieve entities by rowstate
customers2 = pm.GetEntities&lt;Customer&gt;(DataRowState.Modified);
// Use a QueryStrategy
customers3 = pm.GetEntities&lt;Customer&gt;(QueryStrategy.CacheOnly);

// (3) Retrieve business objects by primary key.
PrimaryKey pk1 = new PrimaryKey(typeof(Product), 1);
PrimaryKey pk2 = new PrimaryKey(typeof(Product), 2);
PrimaryKey pk3 = new PrimaryKey(typeof(Product), 3);
PrimaryKeyList keyList1 = new PrimaryKeyList(typeof(Product));
keyList1.Add(pk1);
keyList1.Add(pk2);
PrimaryKeyList keyList2 = new PrimaryKeyList(typeof(Product));
keyList2.Add(pk2);
keyList2.Add(pk3);

// Use the DefaultQueryStrategy
products1 = pm.GetEntities&lt;Product&gt;(keyList1);
// Specify the QueryStrategy
products2 = pm.GetEntities&lt;Product&gt;(keyList2, QueryStrategy.DataSourceOnly);
</code></example><example><code lang="VB">
' Sample GetEntities calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim orders1, orders2 As EntityList(Of Order)
Dim customers1, customers2, customers3 As EntityList(Of Customer)
Dim products1, products2 As EntityList(Of Product)

' (1) Retrieve entities based on a query.
Dim qry As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998")

' Use the DefaultQueryStrategy
orders1 = pm.GetEntities(Of Order)(qry)
' Specify the query strategy
orders2 = pm.GetEntities(Of Order)(qry)

' (2) Retrieve business objects by entity type.
' Use the DefaultQueryStrategy
customers1 = pm.GetEntities(Of Customer)()
' change some entities
customers1(0).Phone = "1-800-555-5555"
customers1(1).PostalCode = "55555"
' Retrieve entities by rowstate
customers2 = pm.GetEntities(Of Customer)(DataRowState.Modified)
' Use a QueryStrategy
customers3 = pm.GetEntities(Of Customer)(QueryStrategy.CacheOnly)

' (3) Retrieve business objects by primary key.
Dim pk1 As New PrimaryKey(GetType(Product), 1)
Dim pk2 As New PrimaryKey(GetType(Product), 2)
Dim pk3 As New PrimaryKey(GetType(Product), 3)
Dim keyList1 As New PrimaryKeyList(GetType(Product))
keyList1.Add(pk1)
keyList1.Add(pk2)
Dim keyList2 As New PrimaryKeyList(GetType(Product))
keyList2.Add(pk2)
keyList2.Add(pk3)

' Use the DefaultQueryStrategy
products1 = pm.GetEntities(Of Product)(keyList1)
' Specify the QueryStrategy
products2 = pm.GetEntities(Of Product)(keyList2)	
     </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntities(IdeaBlade.Persistence.IEntityQuery,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Retrieves an array of Entities based on an EntityQuery and QueryStrategy.
            </summary>
            <param name="pEntityQuery">The <see cref="T:IdeaBlade.Persistence.EntityQuery"/> to execute</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entities</param>
            <returns>An array of Entities of the requested Entity type</returns>
            <exception cref="T:System.ArgumentException"><paramref name="pEntityQuery"/> is null</exception>
            <exception cref="T:System.ArgumentException">GetEntities does not support querying for abstract types</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntities calls
PersistenceManager pm = PersistenceManager.DefaultManager;

EntityList&lt;Order&gt; orders1, orders2;
EntityList&lt;Customer&gt; customers1, customers2, customers3;
EntityList&lt;Product&gt; products1, products2;

// (1) Retrieve entities based on a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998");

// Use the DefaultQueryStrategy
orders1 = pm.GetEntities&lt;Order&gt;(qry);
// Specify the query strategy
orders2 = pm.GetEntities&lt;Order&gt;(qry, QueryStrategy.DataSourceThenCache);

// (2) Retrieve business objects by entity type.
// Use the DefaultQueryStrategy
customers1 = pm.GetEntities&lt;Customer&gt;();
// change some entities
customers1[0].Phone = "1-800-555-5555";
customers1[1].PostalCode = "55555";
// Retrieve entities by rowstate
customers2 = pm.GetEntities&lt;Customer&gt;(DataRowState.Modified);
// Use a QueryStrategy
customers3 = pm.GetEntities&lt;Customer&gt;(QueryStrategy.CacheOnly);

// (3) Retrieve business objects by primary key.
PrimaryKey pk1 = new PrimaryKey(typeof(Product), 1);
PrimaryKey pk2 = new PrimaryKey(typeof(Product), 2);
PrimaryKey pk3 = new PrimaryKey(typeof(Product), 3);
PrimaryKeyList keyList1 = new PrimaryKeyList(typeof(Product));
keyList1.Add(pk1);
keyList1.Add(pk2);
PrimaryKeyList keyList2 = new PrimaryKeyList(typeof(Product));
keyList2.Add(pk2);
keyList2.Add(pk3);

// Use the DefaultQueryStrategy
products1 = pm.GetEntities&lt;Product&gt;(keyList1);
// Specify the QueryStrategy
products2 = pm.GetEntities&lt;Product&gt;(keyList2, QueryStrategy.DataSourceOnly);
</code></example><example><code lang="VB">
' Sample GetEntities calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim orders1, orders2 As EntityList(Of Order)
Dim customers1, customers2, customers3 As EntityList(Of Customer)
Dim products1, products2 As EntityList(Of Product)

' (1) Retrieve entities based on a query.
Dim qry As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998")

' Use the DefaultQueryStrategy
orders1 = pm.GetEntities(Of Order)(qry)
' Specify the query strategy
orders2 = pm.GetEntities(Of Order)(qry)

' (2) Retrieve business objects by entity type.
' Use the DefaultQueryStrategy
customers1 = pm.GetEntities(Of Customer)()
' change some entities
customers1(0).Phone = "1-800-555-5555"
customers1(1).PostalCode = "55555"
' Retrieve entities by rowstate
customers2 = pm.GetEntities(Of Customer)(DataRowState.Modified)
' Use a QueryStrategy
customers3 = pm.GetEntities(Of Customer)(QueryStrategy.CacheOnly)

' (3) Retrieve business objects by primary key.
Dim pk1 As New PrimaryKey(GetType(Product), 1)
Dim pk2 As New PrimaryKey(GetType(Product), 2)
Dim pk3 As New PrimaryKey(GetType(Product), 3)
Dim keyList1 As New PrimaryKeyList(GetType(Product))
keyList1.Add(pk1)
keyList1.Add(pk2)
Dim keyList2 As New PrimaryKeyList(GetType(Product))
keyList2.Add(pk2)
keyList2.Add(pk3)

' Use the DefaultQueryStrategy
products1 = pm.GetEntities(Of Product)(keyList1)
' Specify the QueryStrategy
products2 = pm.GetEntities(Of Product)(keyList2)	
     </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntities``1(IdeaBlade.Persistence.IEntityQuery,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Retrieves an EntityList of Entities based on an EntityQuery and QueryStrategy. 
            </summary>
            <typeparam name="T">The type of Entity to retrieve</typeparam>
            <param name="pEntityQuery">The <see cref="T:IdeaBlade.Persistence.EntityQuery"/> to execute</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entities</param>
            <returns>An EntityList of Entities</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> and <see cref="P:IdeaBlade.Persistence.IEntityQuery.EntityType"/> mismatch</exception>
            <exception cref="T:System.ArgumentException">GetEntities does not support querying for abstract types</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
            <example><code lang="C#">
// Sample GetEntities calls
PersistenceManager pm = PersistenceManager.DefaultManager;

EntityList&lt;Order&gt; orders1, orders2;
EntityList&lt;Customer&gt; customers1, customers2, customers3;
EntityList&lt;Product&gt; products1, products2;

// (1) Retrieve entities based on a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998");

// Use the DefaultQueryStrategy
orders1 = pm.GetEntities&lt;Order&gt;(qry);
// Specify the query strategy
orders2 = pm.GetEntities&lt;Order&gt;(qry, QueryStrategy.DataSourceThenCache);

// (2) Retrieve business objects by entity type.
// Use the DefaultQueryStrategy
customers1 = pm.GetEntities&lt;Customer&gt;();
// change some entities
customers1[0].Phone = "1-800-555-5555";
customers1[1].PostalCode = "55555";
// Retrieve entities by rowstate
customers2 = pm.GetEntities&lt;Customer&gt;(DataRowState.Modified);
// Use a QueryStrategy
customers3 = pm.GetEntities&lt;Customer&gt;(QueryStrategy.CacheOnly);

// (3) Retrieve business objects by primary key.
PrimaryKey pk1 = new PrimaryKey(typeof(Product), 1);
PrimaryKey pk2 = new PrimaryKey(typeof(Product), 2);
PrimaryKey pk3 = new PrimaryKey(typeof(Product), 3);
PrimaryKeyList keyList1 = new PrimaryKeyList(typeof(Product));
keyList1.Add(pk1);
keyList1.Add(pk2);
PrimaryKeyList keyList2 = new PrimaryKeyList(typeof(Product));
keyList2.Add(pk2);
keyList2.Add(pk3);

// Use the DefaultQueryStrategy
products1 = pm.GetEntities&lt;Product&gt;(keyList1);
// Specify the QueryStrategy
products2 = pm.GetEntities&lt;Product&gt;(keyList2, QueryStrategy.DataSourceOnly);
</code></example><example><code lang="VB">
' Sample GetEntities calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim orders1, orders2 As EntityList(Of Order)
Dim customers1, customers2, customers3 As EntityList(Of Customer)
Dim products1, products2 As EntityList(Of Product)

' (1) Retrieve entities based on a query.
Dim qry As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998")

' Use the DefaultQueryStrategy
orders1 = pm.GetEntities(Of Order)(qry)
' Specify the query strategy
orders2 = pm.GetEntities(Of Order)(qry)

' (2) Retrieve business objects by entity type.
' Use the DefaultQueryStrategy
customers1 = pm.GetEntities(Of Customer)()
' change some entities
customers1(0).Phone = "1-800-555-5555"
customers1(1).PostalCode = "55555"
' Retrieve entities by rowstate
customers2 = pm.GetEntities(Of Customer)(DataRowState.Modified)
' Use a QueryStrategy
customers3 = pm.GetEntities(Of Customer)(QueryStrategy.CacheOnly)

' (3) Retrieve business objects by primary key.
Dim pk1 As New PrimaryKey(GetType(Product), 1)
Dim pk2 As New PrimaryKey(GetType(Product), 2)
Dim pk3 As New PrimaryKey(GetType(Product), 3)
Dim keyList1 As New PrimaryKeyList(GetType(Product))
keyList1.Add(pk1)
keyList1.Add(pk2)
Dim keyList2 As New PrimaryKeyList(GetType(Product))
keyList2.Add(pk2)
keyList2.Add(pk3)

' Use the DefaultQueryStrategy
products1 = pm.GetEntities(Of Product)(keyList1)
' Specify the QueryStrategy
products2 = pm.GetEntities(Of Product)(keyList2)	
     </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntities(System.Type,System.Data.DataRowState)">
            <summary>
            Retrieves all of the entities of a specified type with a specified DataRowState.
            </summary>
            <param name="pEntityType">The type of Entity to retrieve</param>
            <param name="pDataRowState">RowState of entities to return</param>
            <returns>An array of Entities of the requested Entity type</returns>
            <remarks>Entities are retrieved from cache only.
            </remarks>
            <exception cref="T:System.ArgumentException">GetEntities does not support querying for abstract types</exception>
            <example><code lang="C#">
// Sample GetEntities calls
PersistenceManager pm = PersistenceManager.DefaultManager;

EntityList&lt;Order&gt; orders1, orders2;
EntityList&lt;Customer&gt; customers1, customers2, customers3;
EntityList&lt;Product&gt; products1, products2;

// (1) Retrieve entities based on a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998");

// Use the DefaultQueryStrategy
orders1 = pm.GetEntities&lt;Order&gt;(qry);
// Specify the query strategy
orders2 = pm.GetEntities&lt;Order&gt;(qry, QueryStrategy.DataSourceThenCache);

// (2) Retrieve business objects by entity type.
// Use the DefaultQueryStrategy
customers1 = pm.GetEntities&lt;Customer&gt;();
// change some entities
customers1[0].Phone = "1-800-555-5555";
customers1[1].PostalCode = "55555";
// Retrieve entities by rowstate
customers2 = pm.GetEntities&lt;Customer&gt;(DataRowState.Modified);
// Use a QueryStrategy
customers3 = pm.GetEntities&lt;Customer&gt;(QueryStrategy.CacheOnly);

// (3) Retrieve business objects by primary key.
PrimaryKey pk1 = new PrimaryKey(typeof(Product), 1);
PrimaryKey pk2 = new PrimaryKey(typeof(Product), 2);
PrimaryKey pk3 = new PrimaryKey(typeof(Product), 3);
PrimaryKeyList keyList1 = new PrimaryKeyList(typeof(Product));
keyList1.Add(pk1);
keyList1.Add(pk2);
PrimaryKeyList keyList2 = new PrimaryKeyList(typeof(Product));
keyList2.Add(pk2);
keyList2.Add(pk3);

// Use the DefaultQueryStrategy
products1 = pm.GetEntities&lt;Product&gt;(keyList1);
// Specify the QueryStrategy
products2 = pm.GetEntities&lt;Product&gt;(keyList2, QueryStrategy.DataSourceOnly);
</code></example><example><code lang="VB">
' Sample GetEntities calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim orders1, orders2 As EntityList(Of Order)
Dim customers1, customers2, customers3 As EntityList(Of Customer)
Dim products1, products2 As EntityList(Of Product)

' (1) Retrieve entities based on a query.
Dim qry As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998")

' Use the DefaultQueryStrategy
orders1 = pm.GetEntities(Of Order)(qry)
' Specify the query strategy
orders2 = pm.GetEntities(Of Order)(qry)

' (2) Retrieve business objects by entity type.
' Use the DefaultQueryStrategy
customers1 = pm.GetEntities(Of Customer)()
' change some entities
customers1(0).Phone = "1-800-555-5555"
customers1(1).PostalCode = "55555"
' Retrieve entities by rowstate
customers2 = pm.GetEntities(Of Customer)(DataRowState.Modified)
' Use a QueryStrategy
customers3 = pm.GetEntities(Of Customer)(QueryStrategy.CacheOnly)

' (3) Retrieve business objects by primary key.
Dim pk1 As New PrimaryKey(GetType(Product), 1)
Dim pk2 As New PrimaryKey(GetType(Product), 2)
Dim pk3 As New PrimaryKey(GetType(Product), 3)
Dim keyList1 As New PrimaryKeyList(GetType(Product))
keyList1.Add(pk1)
keyList1.Add(pk2)
Dim keyList2 As New PrimaryKeyList(GetType(Product))
keyList2.Add(pk2)
keyList2.Add(pk3)

' Use the DefaultQueryStrategy
products1 = pm.GetEntities(Of Product)(keyList1)
' Specify the QueryStrategy
products2 = pm.GetEntities(Of Product)(keyList2)	
     </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntities``1(System.Data.DataRowState)">
            <summary>
            Retrieves all of the entities of a specified type with a specified DataRowState.
            </summary>
            <typeparam name="T">The type of Entity to retrieve</typeparam>
            <param name="pDataRowState">RowState of entities to return</param>
            <returns>An EntityList of Entities</returns>
            <remarks>Entities are retrieved from cache only.
            </remarks>
            <exception cref="T:System.ArgumentException">GetEntities does not support querying for abstract types</exception>
            <example><code lang="C#">
// Sample GetEntities calls
PersistenceManager pm = PersistenceManager.DefaultManager;

EntityList&lt;Order&gt; orders1, orders2;
EntityList&lt;Customer&gt; customers1, customers2, customers3;
EntityList&lt;Product&gt; products1, products2;

// (1) Retrieve entities based on a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998");

// Use the DefaultQueryStrategy
orders1 = pm.GetEntities&lt;Order&gt;(qry);
// Specify the query strategy
orders2 = pm.GetEntities&lt;Order&gt;(qry, QueryStrategy.DataSourceThenCache);

// (2) Retrieve business objects by entity type.
// Use the DefaultQueryStrategy
customers1 = pm.GetEntities&lt;Customer&gt;();
// change some entities
customers1[0].Phone = "1-800-555-5555";
customers1[1].PostalCode = "55555";
// Retrieve entities by rowstate
customers2 = pm.GetEntities&lt;Customer&gt;(DataRowState.Modified);
// Use a QueryStrategy
customers3 = pm.GetEntities&lt;Customer&gt;(QueryStrategy.CacheOnly);

// (3) Retrieve business objects by primary key.
PrimaryKey pk1 = new PrimaryKey(typeof(Product), 1);
PrimaryKey pk2 = new PrimaryKey(typeof(Product), 2);
PrimaryKey pk3 = new PrimaryKey(typeof(Product), 3);
PrimaryKeyList keyList1 = new PrimaryKeyList(typeof(Product));
keyList1.Add(pk1);
keyList1.Add(pk2);
PrimaryKeyList keyList2 = new PrimaryKeyList(typeof(Product));
keyList2.Add(pk2);
keyList2.Add(pk3);

// Use the DefaultQueryStrategy
products1 = pm.GetEntities&lt;Product&gt;(keyList1);
// Specify the QueryStrategy
products2 = pm.GetEntities&lt;Product&gt;(keyList2, QueryStrategy.DataSourceOnly);
</code></example><example><code lang="VB">
' Sample GetEntities calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim orders1, orders2 As EntityList(Of Order)
Dim customers1, customers2, customers3 As EntityList(Of Customer)
Dim products1, products2 As EntityList(Of Product)

' (1) Retrieve entities based on a query.
Dim qry As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998")

' Use the DefaultQueryStrategy
orders1 = pm.GetEntities(Of Order)(qry)
' Specify the query strategy
orders2 = pm.GetEntities(Of Order)(qry)

' (2) Retrieve business objects by entity type.
' Use the DefaultQueryStrategy
customers1 = pm.GetEntities(Of Customer)()
' change some entities
customers1(0).Phone = "1-800-555-5555"
customers1(1).PostalCode = "55555"
' Retrieve entities by rowstate
customers2 = pm.GetEntities(Of Customer)(DataRowState.Modified)
' Use a QueryStrategy
customers3 = pm.GetEntities(Of Customer)(QueryStrategy.CacheOnly)

' (3) Retrieve business objects by primary key.
Dim pk1 As New PrimaryKey(GetType(Product), 1)
Dim pk2 As New PrimaryKey(GetType(Product), 2)
Dim pk3 As New PrimaryKey(GetType(Product), 3)
Dim keyList1 As New PrimaryKeyList(GetType(Product))
keyList1.Add(pk1)
keyList1.Add(pk2)
Dim keyList2 As New PrimaryKeyList(GetType(Product))
keyList2.Add(pk2)
keyList2.Add(pk3)

' Use the DefaultQueryStrategy
products1 = pm.GetEntities(Of Product)(keyList1)
' Specify the QueryStrategy
products2 = pm.GetEntities(Of Product)(keyList2)	
     </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntities(System.Data.DataRowState)">
            <summary>
            Retrieves all entities with the specified DataRowState across all entity types.
            </summary>
            <param name="pDataRowState">RowState of entities to return</param>
            <returns>An array of entities of differing Entity types</returns>
            <remarks>Entities are retrieved from cache only.
            </remarks>
            <example><code lang="C#">
// Sample GetEntities calls
PersistenceManager pm = PersistenceManager.DefaultManager;

EntityList&lt;Order&gt; orders1, orders2;
EntityList&lt;Customer&gt; customers1, customers2, customers3;
EntityList&lt;Product&gt; products1, products2;

// (1) Retrieve entities based on a query.
RdbQuery qry = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998");

// Use the DefaultQueryStrategy
orders1 = pm.GetEntities&lt;Order&gt;(qry);
// Specify the query strategy
orders2 = pm.GetEntities&lt;Order&gt;(qry, QueryStrategy.DataSourceThenCache);

// (2) Retrieve business objects by entity type.
// Use the DefaultQueryStrategy
customers1 = pm.GetEntities&lt;Customer&gt;();
// change some entities
customers1[0].Phone = "1-800-555-5555";
customers1[1].PostalCode = "55555";
// Retrieve entities by rowstate
customers2 = pm.GetEntities&lt;Customer&gt;(DataRowState.Modified);
// Use a QueryStrategy
customers3 = pm.GetEntities&lt;Customer&gt;(QueryStrategy.CacheOnly);

// (3) Retrieve business objects by primary key.
PrimaryKey pk1 = new PrimaryKey(typeof(Product), 1);
PrimaryKey pk2 = new PrimaryKey(typeof(Product), 2);
PrimaryKey pk3 = new PrimaryKey(typeof(Product), 3);
PrimaryKeyList keyList1 = new PrimaryKeyList(typeof(Product));
keyList1.Add(pk1);
keyList1.Add(pk2);
PrimaryKeyList keyList2 = new PrimaryKeyList(typeof(Product));
keyList2.Add(pk2);
keyList2.Add(pk3);

// Use the DefaultQueryStrategy
products1 = pm.GetEntities&lt;Product&gt;(keyList1);
// Specify the QueryStrategy
products2 = pm.GetEntities&lt;Product&gt;(keyList2, QueryStrategy.DataSourceOnly);
</code></example><example><code lang="VB">
' Sample GetEntities calls
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

Dim orders1, orders2 As EntityList(Of Order)
Dim customers1, customers2, customers3 As EntityList(Of Customer)
Dim products1, products2 As EntityList(Of Product)

' (1) Retrieve entities based on a query.
Dim qry As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GE, "1/1/1998")

' Use the DefaultQueryStrategy
orders1 = pm.GetEntities(Of Order)(qry)
' Specify the query strategy
orders2 = pm.GetEntities(Of Order)(qry)

' (2) Retrieve business objects by entity type.
' Use the DefaultQueryStrategy
customers1 = pm.GetEntities(Of Customer)()
' change some entities
customers1(0).Phone = "1-800-555-5555"
customers1(1).PostalCode = "55555"
' Retrieve entities by rowstate
customers2 = pm.GetEntities(Of Customer)(DataRowState.Modified)
' Use a QueryStrategy
customers3 = pm.GetEntities(Of Customer)(QueryStrategy.CacheOnly)

' (3) Retrieve business objects by primary key.
Dim pk1 As New PrimaryKey(GetType(Product), 1)
Dim pk2 As New PrimaryKey(GetType(Product), 2)
Dim pk3 As New PrimaryKey(GetType(Product), 3)
Dim keyList1 As New PrimaryKeyList(GetType(Product))
keyList1.Add(pk1)
keyList1.Add(pk2)
Dim keyList2 As New PrimaryKeyList(GetType(Product))
keyList2.Add(pk2)
keyList2.Add(pk3)

' Use the DefaultQueryStrategy
products1 = pm.GetEntities(Of Product)(keyList1)
' Specify the QueryStrategy
products2 = pm.GetEntities(Of Product)(keyList2)	
     </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntityGraph(System.Collections.Generic.IEnumerable{IdeaBlade.Persistence.Entity},System.Collections.Generic.IEnumerable{IdeaBlade.Persistence.EntitySpan},System.Data.DataRowState)">
            <summary>
            Given any entity or entities in a graph, collects and retrieves all 
            related entities in the graph. This is a cache-only operation.
            Note: As of DevForce v3.4.0, this signature is in beta and may be subject to change.
            </summary>
            <param name="pEntityRoots">A list of entities used as the starting point for retrieving all other related entities</param>
            <param name="pEntitySpans">One or more <see cref="T:IdeaBlade.Persistence.EntitySpan"/>s</param>
            <param name="pRowState">RowState of entities to return</param>
            <returns>A list of related Entities</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if pEntityRoots and/or pEntitySpans is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the type in a span does not have a matching type in one of the roots.</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntitiesAsync(IdeaBlade.Persistence.IEntityQuery,IdeaBlade.Persistence.QueryStrategy,System.Object)">
            <summary>
            Asynchronously retrieves Entities into cache based on an EntityQuery and QueryStrategy.
            </summary>
            <param name="pEntityQuery">The <see cref="T:IdeaBlade.Persistence.EntityQuery"/> to execute</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entities</param>
            <param name="pUserState">Query token to identify the query upon completion</param>
            <remarks>
            You can register a handler for the <see cref="E:IdeaBlade.Persistence.PersistenceManager.GetEntitiesCompleted"/> event to receive notification
            of when the query completes.  
            </remarks>
            <exception cref="T:System.ArgumentException">GetEntities does not support querying for abstract types</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <example><code lang="C#">
// Set a variable to use as a query token. You can use anything, this uses an increasing integer.
private static int msQueryId = 0;

private void SampleAsynchQuery() {
  PersistenceManager pm = PersistenceManager.DefaultManager;

  // Set up an event handler
  pm.GetEntitiesCompleted += pm_GetEntitiesCompleted;

  // Build a query and ask PM to run it asynchronously.
  RdbQuery query = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GT, new DateTime(1997, 1, 1));
  pm.GetEntitiesAsync&lt;Order&gt;(query, QueryStrategy.DataSourceOnly, ++msQueryId);
}

void pm_GetEntitiesCompleted(object sender, GetEntitiesCompletedEventArgs e) {
  // Handle completion of asynchronous queries.

  if (e.Error != null) {
    System.Diagnostics.Debug.WriteLine(e.Error.Message);
  }
  System.Diagnostics.Debug.WriteLine("queryid = " + e.UserState.ToString());
  System.Diagnostics.Debug.WriteLine("entities retrieved = " + e.Entities.Count.ToString());
}	
</code></example><example><code lang="VB">
' Set a variable to use as a query token. You can use anything, this uses an increasing integer.
Private Shared msQueryId As Integer = 0

Private Sub SampleAsynchQuery()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager

   ' Set up an event handler
   AddHandler pm.GetEntitiesCompleted, AddressOf pm_GetEntitiesCompleted

   ' Build a query and ask PM to run it asynchronously.
   Dim query As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GT, New DateTime(1997, 1, 1))
   msQueryId += 1
   pm.GetEntitiesAsync(Of Order)(query, QueryStrategy.DataSourceOnly, msQueryId)
End Sub

Sub pm_GetEntitiesCompleted(ByVal sender As Object, ByVal e As GetEntitiesCompletedEventArgs)
   ' Handle completion of asynchronous queries.
   If Not (e.Error Is Nothing) Then
      System.Diagnostics.Debug.WriteLine(e.Error.Message)
   End If
   System.Diagnostics.Debug.WriteLine(("queryid = " + e.UserState.ToString()))
   System.Diagnostics.Debug.WriteLine(("entities retrieved = " + e.Entities.Count.ToString()))
End Sub
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntitiesAsync(IdeaBlade.Persistence.IEntityQuery,IdeaBlade.Persistence.QueryStrategy,System.Object,System.Int32)">
            <summary>
            Asynchronously retrieves Entities into cache based on an EntityQuery and QueryStrategy, repeating 
            query execution at the interval specified. This feature is only available in certain editions of DevForce.
            </summary>
            <param name="pEntityQuery">The <see cref="T:IdeaBlade.Persistence.EntityQuery"/> to execute</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entities</param>
            <param name="pUserState">Query token to identify the query upon completion</param>
            <param name="pTimerInterval">Interval in milliseconds to re-execute the query</param>
            <remarks>
            You can register a handler for the <see cref="E:IdeaBlade.Persistence.PersistenceManager.GetEntitiesCompleted"/> event to receive notification
            of when the query completes.  To turn off re-execution of the query set the <see cref="P:IdeaBlade.Persistence.GetEntitiesCompletedEventArgs.TimerInterval"/> to 0.
            </remarks>
            <exception cref="T:System.ArgumentException">GetEntities does not support querying for abstract types</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <example><code lang="C#">
// Set a variable to use as a query token. You can use anything, this uses an increasing integer.
private static int msQueryId = 0;

private void SampleAsynchQuery() {
  PersistenceManager pm = PersistenceManager.DefaultManager;

  // Set up an event handler
  pm.GetEntitiesCompleted += pm_GetEntitiesCompleted;

  // Build a query and ask PM to run it asynchronously.
  RdbQuery query = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GT, new DateTime(1997, 1, 1));
  pm.GetEntitiesAsync&lt;Order&gt;(query, QueryStrategy.DataSourceOnly, ++msQueryId);
}

void pm_GetEntitiesCompleted(object sender, GetEntitiesCompletedEventArgs e) {
  // Handle completion of asynchronous queries.

  if (e.Error != null) {
    System.Diagnostics.Debug.WriteLine(e.Error.Message);
  }
  System.Diagnostics.Debug.WriteLine("queryid = " + e.UserState.ToString());
  System.Diagnostics.Debug.WriteLine("entities retrieved = " + e.Entities.Count.ToString());
}	
</code></example><example><code lang="VB">
' Set a variable to use as a query token. You can use anything, this uses an increasing integer.
Private Shared msQueryId As Integer = 0

Private Sub SampleAsynchQuery()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager

   ' Set up an event handler
   AddHandler pm.GetEntitiesCompleted, AddressOf pm_GetEntitiesCompleted

   ' Build a query and ask PM to run it asynchronously.
   Dim query As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GT, New DateTime(1997, 1, 1))
   msQueryId += 1
   pm.GetEntitiesAsync(Of Order)(query, QueryStrategy.DataSourceOnly, msQueryId)
End Sub

Sub pm_GetEntitiesCompleted(ByVal sender As Object, ByVal e As GetEntitiesCompletedEventArgs)
   ' Handle completion of asynchronous queries.
   If Not (e.Error Is Nothing) Then
      System.Diagnostics.Debug.WriteLine(e.Error.Message)
   End If
   System.Diagnostics.Debug.WriteLine(("queryid = " + e.UserState.ToString()))
   System.Diagnostics.Debug.WriteLine(("entities retrieved = " + e.Entities.Count.ToString()))
End Sub
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntitiesAsync``1(IdeaBlade.Persistence.IEntityQuery,IdeaBlade.Persistence.QueryStrategy,System.Object)">
            <summary>
            Asynchronously retrieves Entities into cache based on an EntityQuery and QueryStrategy.
            </summary>
            <typeparam name="T">The type of Entity to retrieve</typeparam>
            <param name="pEntityQuery">The <see cref="T:IdeaBlade.Persistence.EntityQuery"/> to execute</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entities</param>
            <param name="pUserState">Query token to identify the query upon completion</param>
            <remarks>
            You can register a handler for the <see cref="E:IdeaBlade.Persistence.PersistenceManager.GetEntitiesCompleted"/> event to receive notification
            of when the query completes.  
            </remarks>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> and <see cref="P:IdeaBlade.Persistence.IEntityQuery.EntityType"/> mismatch</exception>
            <exception cref="T:System.ArgumentException">GetEntities does not support querying for abstract types</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <example><code lang="C#">
// Set a variable to use as a query token. You can use anything, this uses an increasing integer.
private static int msQueryId = 0;

private void SampleAsynchQuery() {
  PersistenceManager pm = PersistenceManager.DefaultManager;

  // Set up an event handler
  pm.GetEntitiesCompleted += pm_GetEntitiesCompleted;

  // Build a query and ask PM to run it asynchronously.
  RdbQuery query = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GT, new DateTime(1997, 1, 1));
  pm.GetEntitiesAsync&lt;Order&gt;(query, QueryStrategy.DataSourceOnly, ++msQueryId);
}

void pm_GetEntitiesCompleted(object sender, GetEntitiesCompletedEventArgs e) {
  // Handle completion of asynchronous queries.

  if (e.Error != null) {
    System.Diagnostics.Debug.WriteLine(e.Error.Message);
  }
  System.Diagnostics.Debug.WriteLine("queryid = " + e.UserState.ToString());
  System.Diagnostics.Debug.WriteLine("entities retrieved = " + e.Entities.Count.ToString());
}	
</code></example><example><code lang="VB">
' Set a variable to use as a query token. You can use anything, this uses an increasing integer.
Private Shared msQueryId As Integer = 0

Private Sub SampleAsynchQuery()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager

   ' Set up an event handler
   AddHandler pm.GetEntitiesCompleted, AddressOf pm_GetEntitiesCompleted

   ' Build a query and ask PM to run it asynchronously.
   Dim query As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GT, New DateTime(1997, 1, 1))
   msQueryId += 1
   pm.GetEntitiesAsync(Of Order)(query, QueryStrategy.DataSourceOnly, msQueryId)
End Sub

Sub pm_GetEntitiesCompleted(ByVal sender As Object, ByVal e As GetEntitiesCompletedEventArgs)
   ' Handle completion of asynchronous queries.
   If Not (e.Error Is Nothing) Then
      System.Diagnostics.Debug.WriteLine(e.Error.Message)
   End If
   System.Diagnostics.Debug.WriteLine(("queryid = " + e.UserState.ToString()))
   System.Diagnostics.Debug.WriteLine(("entities retrieved = " + e.Entities.Count.ToString()))
End Sub
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntitiesAsync``1(IdeaBlade.Persistence.IEntityQuery,IdeaBlade.Persistence.QueryStrategy,System.Object,System.Int32)">
            <summary>
            Asynchronously retrieves Entities into cache based on an EntityQuery and QueryStrategy, repeating 
            query execution at the interval specified. This feature is only available in certain editions of DevForce.
            </summary>
            <typeparam name="T">The type of Entity to retrieve</typeparam>
            <param name="pEntityQuery">The <see cref="T:IdeaBlade.Persistence.EntityQuery"/> to execute</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entities</param>
            <param name="pUserState">Query token to identify the query upon completion</param>
            <param name="pTimerInterval">Interval in milliseconds to re-execute the query</param>
            <remarks>
            You can register a handler for the <see cref="E:IdeaBlade.Persistence.PersistenceManager.GetEntitiesCompleted"/> event to receive notification
            of when the query completes.  To turn off re-execution of the query set the <see cref="P:IdeaBlade.Persistence.GetEntitiesCompletedEventArgs.TimerInterval"/> to 0.
            </remarks>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> and <see cref="P:IdeaBlade.Persistence.IEntityQuery.EntityType"/> mismatch</exception>
            <exception cref="T:System.ArgumentException">GetEntities does not support querying for abstract types</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <example><code lang="C#">
// Set a variable to use as a query token. You can use anything, this uses an increasing integer.
private static int msQueryId = 0;

private void SampleAsynchQuery() {
  PersistenceManager pm = PersistenceManager.DefaultManager;

  // Set up an event handler
  pm.GetEntitiesCompleted += pm_GetEntitiesCompleted;

  // Build a query and ask PM to run it asynchronously.
  RdbQuery query = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.GT, new DateTime(1997, 1, 1));
  pm.GetEntitiesAsync&lt;Order&gt;(query, QueryStrategy.DataSourceOnly, ++msQueryId);
}

void pm_GetEntitiesCompleted(object sender, GetEntitiesCompletedEventArgs e) {
  // Handle completion of asynchronous queries.

  if (e.Error != null) {
    System.Diagnostics.Debug.WriteLine(e.Error.Message);
  }
  System.Diagnostics.Debug.WriteLine("queryid = " + e.UserState.ToString());
  System.Diagnostics.Debug.WriteLine("entities retrieved = " + e.Entities.Count.ToString());
}	
</code></example><example><code lang="VB">
' Set a variable to use as a query token. You can use anything, this uses an increasing integer.
Private Shared msQueryId As Integer = 0

Private Sub SampleAsynchQuery()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager

   ' Set up an event handler
   AddHandler pm.GetEntitiesCompleted, AddressOf pm_GetEntitiesCompleted

   ' Build a query and ask PM to run it asynchronously.
   Dim query As New RdbQuery(GetType(Order), Order.OrderDateEntityColumn, EntityQueryOp.GT, New DateTime(1997, 1, 1))
   msQueryId += 1
   pm.GetEntitiesAsync(Of Order)(query, QueryStrategy.DataSourceOnly, msQueryId)
End Sub

Sub pm_GetEntitiesCompleted(ByVal sender As Object, ByVal e As GetEntitiesCompletedEventArgs)
   ' Handle completion of asynchronous queries.
   If Not (e.Error Is Nothing) Then
      System.Diagnostics.Debug.WriteLine(e.Error.Message)
   End If
   System.Diagnostics.Debug.WriteLine(("queryid = " + e.UserState.ToString()))
   System.Diagnostics.Debug.WriteLine(("entities retrieved = " + e.Entities.Count.ToString()))
End Sub
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.CancelAsync(System.Object)">
            <summary>
            This method cancels a pending <b>GetEntitiesAsync</b> or <b>InvokeServerMethodAsync</b> request.
            </summary>
            <param name="pUserState">The token representing the asynchronous request to be canceled</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetChild(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation)">
            <summary>
            Returns a single child Entity given a parent Entity and EntityRelation
            using the DefaultQueryStrategy.
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.GetChildren(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)"/>
            </summary>
            <param name="pEntity">The parent Entity whose child entity will be retrieved</param>
            <param name="pEntityRelation">The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> to be used to retrieve the child</param>
            <returns>A child entity</returns>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> defining the relationship between the parent and child objects
            is usually set up using the <b>IdeaBlade DevForce Object Mapping Tool</b>.  The Mapping tool will also automatically generate
            parent and child relation properties for all relationships defined.
            </remarks>
            <exception cref="T:System.ArgumentException">EntityRelation is not valid for the Entity type</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetChild(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Returns a single child Entity given the specified parent Entity, EntityRelation and QueryStrategy.
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.GetChildren(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)"/>
            </summary>
            <param name="pEntity">The parent Entity whose child entity will be retrieved</param>
            <param name="pEntityRelation">The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> to be used to retrieve the child</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entity</param>
            <returns>A child entity</returns>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> defining the relationship between the parent and child objects
            is usually set up using the <b>IdeaBlade DevForce Object Mapping Tool</b>.  The Mapping tool will also automatically generate
            parent and child relation properties for all relationships defined.
            </remarks>
            <exception cref="T:System.ArgumentException">EntityRelation is not valid for the Entity type</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetChild``1(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation)">
            <summary>
            Returns a single child Entity given a parent Entity and EntityRelation
            using the DefaultQueryStrategy.
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.GetChildren(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)"/>
            </summary>
            <typeparam name="T">Type of child Entity</typeparam>
            <param name="pEntity">The parent Entity whose child entity will be retrieved</param>
            <param name="pEntityRelation">The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> to be used to retrieve the child</param>
            <returns>A child entity</returns>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> defining the relationship between the parent and child objects
            is usually set up using the <b>IdeaBlade DevForce Object Mapping Tool</b>.  The Mapping tool will also automatically generate
            parent and child relation properties for all relationships defined.
            </remarks>
            <exception cref="T:System.ArgumentException">EntityRelation.ChildType does not match return type</exception>
            <exception cref="T:System.ArgumentException">EntityRelation is not valid for the Entity type</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetChild``1(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Returns a single child Entity given the specified parent Entity, EntityRelation and QueryStrategy.
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.GetChildren(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)"/>
            </summary>
            <typeparam name="T">Type of child Entity</typeparam>
            <param name="pEntity">The parent Entity whose child entity will be retrieved</param>
            <param name="pEntityRelation">The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> to be used to retrieve the child</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entity</param>
            <returns>A child entity</returns>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> defining the relationship between the parent and child objects
            is usually set up using the <b>IdeaBlade DevForce Object Mapping Tool</b>.  The Mapping tool will also automatically generate
            parent and child relation properties for all relationships defined.
            </remarks>
            <exception cref="T:System.ArgumentException">EntityRelation.ChildType does not match return type</exception>
            <exception cref="T:System.ArgumentException">EntityRelation is not valid for the Entity type</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetParent(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation)">
            <summary>
            Returns a single parent Entity given a child Entity and EntityRelation
            using the DefaultQueryStrategy.
            </summary>
            <param name="pEntity">The child Entity whose parent entity will be retrieved</param>
            <param name="pEntityRelation">The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> to be used to retrieve the parent</param>
            <returns>A parent Entity</returns>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> defining the relationship between the parent and child objects
            is usually set up using the <b>IdeaBlade DevForce Object Mapping Tool</b>.  The Mapping tool will also automatically generate
            parent and child relation properties for all relationships defined.
            </remarks>
            <exception cref="T:System.ArgumentException">EntityRelation is not valid for the Entity type</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetParent(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Returns a single parent Entity given the specified child Entity, EntityRelation and QueryStrategy.
            </summary>
            <param name="pEntity">The child Entity whose parent entity will be retrieved</param>
            <param name="pEntityRelation">The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> to be used to retrieve the parent</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entity</param>
            <returns>A parent Entity</returns>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> defining the relationship between the parent and child objects
            is usually set up using the <b>IdeaBlade DevForce Object Mapping Tool</b>.  The Mapping tool will also automatically generate
            parent and child relation properties for all relationships defined.
            </remarks>
            <exception cref="T:System.ArgumentException">EntityRelation is not valid for the Entity type</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetParent``1(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation)">
            <summary>
            Returns a single parent Entity given a child Entity and EntityRelation
            using the DefaultQueryStrategy.
            </summary>
            <typeparam name="T">Type of parent Entity</typeparam>
            <param name="pEntity">The child Entity whose parent entity will be retrieved</param>
            <param name="pEntityRelation">The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> to be used to retrieve the parent</param>
            <returns>A parent Entity</returns>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> defining the relationship between the parent and child objects
            is usually set up using the <b>IdeaBlade DevForce Object Mapping Tool</b>.  The Mapping tool will also automatically generate
            parent and child relation properties for all relationships defined.
            </remarks>
            <exception cref="T:System.ArgumentException">EntityRelation.ParentType does not match return type</exception>
            <exception cref="T:System.ArgumentException">EntityRelation is not valid for the Entity type</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetParent``1(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Returns a single parent Entity given the specified child Entity, EntityRelation and QueryStrategy.
            </summary>
            <typeparam name="T">Type of parent Entity</typeparam>
            <param name="pEntity">The child Entity whose parent entity will be retrieved</param>
            <param name="pEntityRelation">The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> to be used to retrieve the parent</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entity</param>
            <returns>A parent Entity</returns>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> defining the relationship between the parent and child objects
            is usually set up using the <b>IdeaBlade DevForce Object Mapping Tool</b>.  The Mapping tool will also automatically generate
            parent and child relation properties for all relationships defined.
            </remarks>
            <exception cref="T:System.ArgumentException">EntityRelation.ParentType does not match return type</exception>
            <exception cref="T:System.ArgumentException">EntityRelation is not valid for the Entity type</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetChildren(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation)">
            <summary>
            Returns an array of child Entities given a parent Entity and EntityRelation using the DefaultQueryStrategy.
            </summary>
            <param name="pEntity">A parent entity whose related child entities are to be retrieved </param>
            <param name="pEntityRelation">The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> to be used to retrieve the children</param>
            <returns>An array of child entities</returns>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> defining the relationship between the parent and child objects
            is usually set up using the <b>IdeaBlade DevForce Object Mapping Tool</b>.  The Mapping tool will also automatically generate
            parent and child relation properties for all relationships defined.
            </remarks>
            <exception cref="T:System.ArgumentException">EntityRelation is not valid for the Entity type</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetChildren(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Returns an array of child Entities given the specified parent entity, EntityRelation and QueryStrategy.
            </summary>
            <param name="pEntity">A parent entity whose related child entities are to be retrieved </param>
            <param name="pEntityRelation">The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> to be used to retrieve the children</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entity</param>
            <returns>An array of child entities</returns>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> defining the relationship between the parent and child objects
            is usually set up using the <b>IdeaBlade DevForce Object Mapping Tool</b>.  The Mapping tool will also automatically generate
            parent and child relation properties for all relationships defined.
            </remarks>
            <exception cref="T:System.ArgumentException">EntityRelation is not valid for the Entity type</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetChildren``1(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,System.Boolean)">
            <summary>
            Returns an EntityList of child Entities given a parent entity and EntityRelation using the DefaultQueryStrategy. 
            </summary>
            <typeparam name="T">Type of child Entities</typeparam>
            <param name="pEntity">A parent entity whose related child entities are to be retrieved </param>
            <param name="pEntityRelation">The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> to be used to retrieve the children</param>
            <param name="pReturnsManagedList">If <c>true</c> the EntityList will have an <see cref="T:EntityListManager"/>
            attached</param>
            <returns>An EntityList of child entities</returns>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> defining the relationship between the parent and child objects
            is usually set up using the <b>IdeaBlade DevForce Object Mapping Tool</b>.  The Mapping tool will also automatically generate
            parent and child relation properties for all relationships defined.
            </remarks>
            <exception cref="T:System.ArgumentException">EntityRelation is not valid for the Entity type</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetChildren``1(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy,System.Boolean)">
            <summary>
            Returns an EntityList of child Entities given the specified parent entity, EntityRelation and QueryStrategy.
            </summary>
            <typeparam name="T">Type of child Entities</typeparam>
            <param name="pEntity">A parent entity whose related child entities are to be retrieved </param>
            <param name="pEntityRelation">The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> to be used to retrieve the children</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entity</param>
            <param name="pReturnsManagedList">If <c>true</c> the EntityList will have an <see cref="T:EntityListManager"/>
            attached</param>
            <returns>An EntityList of child entities</returns>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> defining the relationship between the parent and child objects
            is usually set up using the <b>IdeaBlade DevForce Object Mapping Tool</b>.  The Mapping tool will also automatically generate
            parent and child relation properties for all relationships defined.
            </remarks>
            <exception cref="T:System.ArgumentException">EntityRelation is not valid for the Entity type</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetChildren(System.Collections.ICollection,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Returns an array of child Entities given a list of parent Entities and the specified EntityRelation and QueryStrategy.
            </summary>
            <param name="pEntities">A collection of parent entities whose related child entities are to be retrieved </param>
            <param name="pEntityRelation">The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> to be used to retrieve the children</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entities</param>
            <returns>An array of child entities</returns>
            <remarks>
            All entities in <paramref name="pEntities"/> must be of the <see cref="P:IdeaBlade.Persistence.EntityRelation.ParentType"/> of <paramref name="pEntityRelation"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">All Entities must be of the EntityRelation.ParentType</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetChildren``1(System.Collections.ICollection,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Returns an <see cref="T:IdeaBlade.Persistence.EntityList"/> of child Entities given a list of parent Entities and the 
            specified EntityRelation and QueryStrategy.
            </summary>
            <typeparam name="T">Type of child Entities</typeparam>
            <param name="pEntities">A collection of parent entities whose related child entities are to be retrieved </param>
            <param name="pEntityRelation">The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> to be used to retrieve the children</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entity</param>
            <returns>An EntityList of child entities</returns>
            <remarks>
            All entities in <paramref name="pEntities"/> must be of the <see cref="P:IdeaBlade.Persistence.EntityRelation.ParentType"/> of <paramref name="pEntityRelation"/>.
            <para>
            The <see cref="T:IdeaBlade.Persistence.EntityList"/> returned is not a "live" or managed list.  
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">All Entities must be of the EntityRelation.ParentType</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetParents(System.Collections.ICollection,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Returns an array of parent Entities given a list of child Entities and the specified EntityRelation and QueryStrategy.
            </summary>
            <param name="pEntities">A collection of child entities whose parent entities are to be retrieved </param>
            <param name="pEntityRelation">The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> to be used to retrieve the parents</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entities</param>
            <returns>An array of parent entities</returns>
            <remarks>
            All entities in <paramref name="pEntities"/> must be of the <see cref="P:IdeaBlade.Persistence.EntityRelation.ChildType"/> of <paramref name="pEntityRelation"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">All Entities must be of the EntityRelation.ChildType</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetParents``1(System.Collections.ICollection,IdeaBlade.Persistence.EntityRelation,IdeaBlade.Persistence.QueryStrategy)">
            <summary>
            Returns an EntityList of parent Entities given a list of child Entities and the specified EntityRelation and QueryStrategy.
            </summary>
            <typeparam name="T">Type of parent Entities</typeparam>
            <param name="pEntities">A collection of child entities whose parent entities are to be retrieved </param>
            <param name="pEntityRelation">The <see cref="T:IdeaBlade.Persistence.EntityRelation"/> to be used to retrieve the parents</param>
            <param name="pQueryStrategy">QueryStrategy for locating the entity</param>
            <returns>An EntityList of parent entities</returns>
            <remarks>
            All entities in <paramref name="pEntities"/> must be of the <see cref="P:IdeaBlade.Persistence.EntityRelation.ChildType"/> of <paramref name="pEntityRelation"/>.
            <para>The <see cref="T:IdeaBlade.Persistence.EntityList"/> returned is not a "live" or managed list.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">All Entities must be of the EntityRelation.ChildType</exception>
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Thrown for errors not handled by a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.AreRelated(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityRelation)">
            <summary>
            Returns whether a parent and child entity are related through the specified relation.
            </summary>
            <param name="pParentEntity"></param>
            <param name="pChildEntity"></param>
            <param name="pEntityRelation"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetNullEntity(System.Type)">
            <summary>
            Returns a <see cref="P:IdeaBlade.Persistence.Entity.NullEntity"/> of the specified entity type.  
            </summary>
            <param name="pEntityType">The Entity subtype of the 'null' entity to retrieve</param>
            <returns>A 'null' entity of the specified Entity subtype</returns>
            <remarks>Only one instance of a null entity exists for any given entity type.
            You may use <b>GetNullEntity</b> and <see cref="P:IdeaBlade.Persistence.Entity.NullEntity"/> interchangeably. 
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetNullEntity``1">
            <summary>
            Returns a <see cref="P:IdeaBlade.Persistence.Entity.NullEntity"/> of the specified entity type.  
            </summary>
            <typeparam name="T">The Entity subtype of the 'null' entity to retrieve</typeparam>
            <returns>A 'null' entity of the specified Entity subtype</returns>
            <remarks>Only one instance of a null entity exists for any given entity type.
            You may use <b>GetNullEntity</b> and <see cref="P:IdeaBlade.Persistence.Entity.NullEntity"/> interchangeably. 
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RefetchEntity(IdeaBlade.Persistence.Entity)">
            <summary>
            Forces an entity to be refetched from the backend data source. 
            </summary>
            <param name="pEntity">The Entity to refetch</param>
            <remarks>
            Uses <see cref="F:IdeaBlade.Persistence.MergeStrategy.OverwriteChanges"/> when merging results.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RefetchEntity(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.MergeStrategy)">
            <summary>
            Forces an entity to be refetched from the backend data source.
            </summary>
            <param name="pEntity">The Entity to refetch</param>
            <param name="pMergeStrategy">Merge strategy</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RefetchEntities``1(System.Collections.Generic.IEnumerable{``0},IdeaBlade.Persistence.MergeStrategy)">
            <summary>
            Forces a collection of entities to be refetched from the backend data source.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="pEntities">A collection of Entities to refetch</param>
            <param name="pMergeStrategy">Merge strategy</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RefetchEntities(IdeaBlade.Persistence.PrimaryKeyList,IdeaBlade.Persistence.MergeStrategy)">
            <summary>
            Forces a collection of entities specified in a PrimaryKeyList to be refetched from the backend data source.
            </summary>
            <param name="pPkList">List of primary keys</param>
            <param name="pMergeStrategy">Merge strategy</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RefetchEntities(System.Data.DataRowState,IdeaBlade.Persistence.MergeStrategy)">
            <summary>
            Refetches all entities with the specified DataRowState(s) from the backend data source.
            </summary>
            <param name="pDataRowState">The <see cref="T:System.Data.DataRowState"/></param>
            <param name="pMergeStrategy">Merge strategy</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.BeginCheckpoint">
            <summary>
            Begin a new checkpoint. This feature is only available in certain editions of DevForce.
            </summary>
            <returns>Returns the new current checkpoint depth.</returns>
            <remarks>
            Use <b>BeginCheckpoint</b> to have the PersistenceManager begin keeping an in-memory record 
            of all future deletions, additions and modifications to Entities in cache.
            While a checkpoint is active, any changes to an Entity cause a backup copy of the "before" image
            of the entity to be recorded.  A checkpoint is active until either <see cref="M:IdeaBlade.Persistence.PersistenceManager.RollbackCheckpoint"/>  
            is called to undo changes made since the checkpoint began, or <see cref="M:IdeaBlade.Persistence.PersistenceManager.ClearCheckpoints"/> is called to stop
            recording changes.  A <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/> call implicitly clears checkpoints also.
            <para>
            Checkpoints can be nested to provide multi-level undo support. Each call to <b>BeginCheckpoint</b> 
            nests the new checkpoint under the current checkpoint, making the new checkpoint the current active checkpoint.
            <see cref="M:IdeaBlade.Persistence.PersistenceManager.RollbackCheckpoint"/> will undo the Entity changes made during the current or specified levels of checkpoints, 
            while <see cref="M:IdeaBlade.Persistence.PersistenceManager.RollbackCheckpoints"/> will undo all Entity changes made since the first checkpoint began.
            </para>
            <para>
            <see cref="M:IdeaBlade.Persistence.PersistenceManager.RejectChanges"/> and <see cref="M:IdeaBlade.Persistence.Entity.Undo"/> are actions logged while a checkpoint is active
            and do not cause the checkpoint to be cleared or rolled back.
            </para>
            <para>
            Checkpoints do not provide a means of ensuring fault tolerance within your application or for recording
            your changes to non-volatile storage.  To save the contents of cache to storage you can use the <see cref="T:IdeaBlade.Persistence.EntitySet"/>.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetCheckpointDepth">
            <summary>
            Get the depth of the current checkpoint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.ClearCheckpoints">
            <summary>
            Clears all currently outstanding checkpoints. 
            </summary>
            <remarks>
            Clearing checkpoints stops all logging of Entity changes and clears any existing log.  <b>ClearCheckpoints</b>
            is automatically called during <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/> processing, but can be called any time an "undoable"
            operation completes successfully but does not immediately need to be persisted to the data source.  Clearing checkpoints
            does not in any way affect the row state or values of cached Entities.
            <para>
            Checkpoints are also cleared when the PersistenceManager is re-initialized with the <see cref="M:IdeaBlade.Persistence.PersistenceManager.Clear"/> method.
            </para>
            <para><see cref="P:IdeaBlade.Persistence.PersistenceManager.IsCheckpointing"/> will return false after checkpoints are cleared.</para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RollbackCheckpoint">
            <summary>
            Rollback the current checkpoint. 
            </summary>
            <returns>Returns the new current checkpoint depth.</returns>
            <remarks>
            Rollback allows you to undo all changes made to Entities since the checkpoint began.
            <para>To undo Entity changes from multiple levels of nested checkpoints use 
            <see cref="M:IdeaBlade.Persistence.PersistenceManager.RollbackCheckpoint(System.Int32)"/> with the number of levels specified.</para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RollbackCheckpoint(System.Int32)">
            <summary>
            Rollback the most recent n checkpoints. 
            </summary>
            <param name="pCount">Number of checkpoints to rollback</param>
            <returns>Returns the new current checkpoint depth.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no current checkpoint</exception>
            <remarks>
            All Entity changes recorded in the checkpoints will be undone, and the Entities
            returned to the values and row state in effect at the new current checkpoint.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RollbackCheckpoints">
            <summary>
            Rollback all of the currently outstanding checkpoints. 
            </summary>
            <remarks>
            All Entity changes made since checkpointing began will be undone, and the Entities will be
            returned to the values and row state in effect before checkpointing began.
            <para><see cref="P:IdeaBlade.Persistence.PersistenceManager.IsCheckpointing"/> will return false after all checkpoints are rolled back.</para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.CreateEntity(System.Type)">
            <summary>
            Create a new entity of the requested type.  
            <seealso cref="T:IdeaBlade.Persistence.Entity"/>
            </summary>
            <param name="pEntityType">The Entity subtype of the business object to be created</param>
            <returns>A new instance of the specified entity type</returns>
            <remarks>
            Because business objects derived from <see cref="T:IdeaBlade.Persistence.Entity"/> do not have publicly available constructors
            this is the only means of "newing" an Entity.  The entity returned has a "detached"
            <see cref="P:IdeaBlade.Persistence.Entity.RowState"/>; use <see cref="M:IdeaBlade.Persistence.PersistenceManager.AddEntity(IdeaBlade.Persistence.Entity)"/> or
            the object's <see cref="M:IdeaBlade.Persistence.Entity.AddToManager"/> method to add the object to
            the PersistenceManager cache.  If <see cref="P:IdeaBlade.Persistence.PersistenceManager.EnforceConstraints"/> is set you will need
            to ensure that the entity is valid before adding it to the cache.
            <para> You will generally call the <b>CreateEntity</b> method
            from within the business object's <b>Create</b> method.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Bad entity type</exception>
            <example><code lang="C#">
PersistenceManager pm = PersistenceManager.DefaultManager;

// Retrieve an order
Order order = pm.GetEntity&lt;Order&gt;(new PrimaryKey(typeof(Order), 10275));
// Retrieve a product
Product product = pm.GetEntity&lt;Product&gt;(new PrimaryKey(typeof(Product), 1));

// Create an OrderDetail 
OrderDetail dtl = pm.CreateEntity&lt;OrderDetail&gt;();
// assign key fields
dtl.Order = order;
dtl.Product = product;

// add the OrderDetail to the PersistenceManager cache
DebugFns.WriteLine("row state before add = " + dtl.RowState);
dtl.AddToManager();
DebugFns.WriteLine("row state after add = " + dtl.RowState);
</code></example><example><code lang="VB">
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

' Retrive an order
Dim order As Order = pm.GetEntity(Of Order)(New PrimaryKey(GetType(Order), 10275))
' Retrieve a product
Dim product As Product = pm.GetEntity(Of Product)(New PrimaryKey(GetType(Product), 1))

' Create an OrderDetail 
Dim dtl As OrderDetail = pm.CreateEntity(Of OrderDetail)()
' assign key fields
dtl.Order = order
dtl.Product = product

' add the OrderDetail to the PersistenceManager cache
DebugFns.WriteLine("row state before add = " + dtl.RowState.ToString())
dtl.AddToManager()
DebugFns.WriteLine("row state after add = " + dtl.RowState.ToString())
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.CreateEntity``1">
            <summary>
            Create a new entity of the requested type.  
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <returns>A new instance of the specified entity type</returns>
            <remarks>
            Because business objects derived from <see cref="T:IdeaBlade.Persistence.Entity"/> do not have publicly available constructors
            this is the only means of "newing" an Entity.  The entity returned has a "detached"
            <see cref="P:IdeaBlade.Persistence.Entity.RowState"/>; use <see cref="M:IdeaBlade.Persistence.PersistenceManager.AddEntity(IdeaBlade.Persistence.Entity)"/> or
            the object's <see cref="M:IdeaBlade.Persistence.Entity.AddToManager"/> method to add the object to
            the PersistenceManager cache.  If <see cref="P:IdeaBlade.Persistence.PersistenceManager.EnforceConstraints"/> is set you will need
            to ensure that the entity is valid before adding it to the cache.
            <para> You will generally call the <b>CreateEntity</b> method
            from within the business object's <b>Create</b> method.</para>
            </remarks>
            <example><code lang="C#">
PersistenceManager pm = PersistenceManager.DefaultManager;

// Retrieve an order
Order order = pm.GetEntity&lt;Order&gt;(new PrimaryKey(typeof(Order), 10275));
// Retrieve a product
Product product = pm.GetEntity&lt;Product&gt;(new PrimaryKey(typeof(Product), 1));

// Create an OrderDetail 
OrderDetail dtl = pm.CreateEntity&lt;OrderDetail&gt;();
// assign key fields
dtl.Order = order;
dtl.Product = product;

// add the OrderDetail to the PersistenceManager cache
DebugFns.WriteLine("row state before add = " + dtl.RowState);
dtl.AddToManager();
DebugFns.WriteLine("row state after add = " + dtl.RowState);
</code></example><example><code lang="VB">
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

' Retrive an order
Dim order As Order = pm.GetEntity(Of Order)(New PrimaryKey(GetType(Order), 10275))
' Retrieve a product
Dim product As Product = pm.GetEntity(Of Product)(New PrimaryKey(GetType(Product), 1))

' Create an OrderDetail 
Dim dtl As OrderDetail = pm.CreateEntity(Of OrderDetail)()
' assign key fields
dtl.Order = order
dtl.Product = product

' add the OrderDetail to the PersistenceManager cache
DebugFns.WriteLine("row state before add = " + dtl.RowState.ToString())
dtl.AddToManager()
DebugFns.WriteLine("row state after add = " + dtl.RowState.ToString())
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.AddEntity(IdeaBlade.Persistence.Entity)">
            <summary>
            Adds a newly created (or any detached) entity to the PersistenceManager cache.
            <seealso cref="M:IdeaBlade.Persistence.Entity.AddToManager"/>
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.CreateEntity(System.Type)"/>
            </summary>
            <param name="pEntity">Entity to be added.</param>
            <remarks>There is no difference between <b>AddEntity</b> and <see cref="M:IdeaBlade.Persistence.Entity.AddToManager"/>.
            Use either method to add a business object created by the <see cref="M:IdeaBlade.Persistence.PersistenceManager.CreateEntity(System.Type)"/> method
            to the PersistenceManager cache.  The object must have a "detached" <see cref="P:IdeaBlade.Persistence.Entity.RowState"/>, 
            and if <see cref="P:IdeaBlade.Persistence.PersistenceManager.EnforceConstraints"/> is set must conform to all constraints. 
            </remarks>
            <example><code lang="C#">
PersistenceManager pm = PersistenceManager.DefaultManager;

// Retrieve an order
Order order = pm.GetEntity&lt;Order&gt;(new PrimaryKey(typeof(Order), 10275));
// Retrieve a product
Product product = pm.GetEntity&lt;Product&gt;(new PrimaryKey(typeof(Product), 1));

// Create an OrderDetail 
OrderDetail dtl = pm.CreateEntity&lt;OrderDetail&gt;();
// assign key fields
dtl.Order = order;
dtl.Product = product;

// add the OrderDetail to the PersistenceManager cache
DebugFns.WriteLine("row state before add = " + dtl.RowState);
dtl.AddToManager();
DebugFns.WriteLine("row state after add = " + dtl.RowState);
</code></example><example><code lang="VB">
Dim pm As PersistenceManager = PersistenceManager.DefaultManager

' Retrive an order
Dim order As Order = pm.GetEntity(Of Order)(New PrimaryKey(GetType(Order), 10275))
' Retrieve a product
Dim product As Product = pm.GetEntity(Of Product)(New PrimaryKey(GetType(Product), 1))

' Create an OrderDetail 
Dim dtl As OrderDetail = pm.CreateEntity(Of OrderDetail)()
' assign key fields
dtl.Order = order
dtl.Product = product

' add the OrderDetail to the PersistenceManager cache
DebugFns.WriteLine("row state before add = " + dtl.RowState.ToString())
dtl.AddToManager()
DebugFns.WriteLine("row state after add = " + dtl.RowState.ToString())
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.AddEntities(System.Collections.IEnumerable)">
            <summary>
            Adds newly created (or any detached) entities to the PersistenceManager cache.
            </summary>
            <param name="pEntities"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RemoveEntity(IdeaBlade.Persistence.Entity)">
             <summary>
             Removes an <see cref="T:IdeaBlade.Persistence.Entity"/> from the PersistenceManager cache.
             <seealso cref="M:IdeaBlade.Persistence.Entity.RemoveFromManager"/>
             </summary>
             <param name="pEntity">The Entity to be removed</param>
             <remarks>The <see cref="T:IdeaBlade.Persistence.Entity"/> will be in a "detached" state after the remove. 
             <b>RemoveEntity</b> and <see cref="M:IdeaBlade.Persistence.Entity.RemoveFromManager"/>
              can be used interchangeably. Calling <b>RemoveEntity</b> also clears the <see cref="P:IdeaBlade.Persistence.PersistenceManager.QueryCache"/>.
            <para>This does not delete the object from the backend data source.  To delete an entity,
            use the <see cref="M:System.Data.DataRow.Delete"/> method.
             </para>
             </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RemoveEntity(IdeaBlade.Persistence.Entity,System.Boolean)">
             <summary>
             Removes an <see cref="T:IdeaBlade.Persistence.Entity"/> from the PersistenceManager cache.
             <seealso cref="M:IdeaBlade.Persistence.Entity.RemoveFromManager"/>
             </summary>
             <param name="pEntity">The Entity to be removed</param>
             <param name="pClearQueryCache">Whether removing this entity should also cause the QueryCache to be cleared. Usually this
             should be true, but there are scenarios where the developer will want to suppress the default behavior.</param>
             <remarks>The <see cref="T:IdeaBlade.Persistence.Entity"/> will be in a "detached" state after the remove. 
             <b>RemoveEntity</b> and <see cref="M:IdeaBlade.Persistence.Entity.RemoveFromManager"/>
              can be used interchangeably. Calling <b>RemoveEntity</b> also clears the <see cref="P:IdeaBlade.Persistence.PersistenceManager.QueryCache"/>.
            <para>This does not delete the object from the backend data source.  To delete an entity,
            use the <see cref="M:System.Data.DataRow.Delete"/> method.
             </para>
             </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RemoveEntities(System.Collections.IEnumerable)">
             <summary>
             Removes a collection of entities from the PersistenceManager cache.
             <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.ClearQueryCache"/>
             </summary>
             <param name="pEntities">List of entities to be removed</param>
             <remarks>The <see cref="T:IdeaBlade.Persistence.Entity">Entities</see> will be in a "detached" state after the remove. 
             Calling <b>Remove</b> also clears the <see cref="P:IdeaBlade.Persistence.PersistenceManager.QueryCache"/>.
            <para>This does not delete the objects from the backend data source.  To delete an entity,
            use the <see cref="M:System.Data.DataRow.Delete"/> method.
             </para>
             </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RemoveEntities(System.Collections.IEnumerable,System.Boolean)">
             <summary>
             Removes a collection of entities from the PersistenceManager cache.
             <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.ClearQueryCache"/>
             </summary>
             <param name="pEntities">List of entities to be removed</param>
             <param name="pClearQueryCache">Whether removing this entity should also cause the QueryCache to be cleared. Usually this
             should be true, but there are scenarios where the developer will want to suppress the default behavior.</param>
             <remarks>The <see cref="T:IdeaBlade.Persistence.Entity">Entities</see> will be in a "detached" state after the remove. 
             Calling <b>Remove</b> also clears the <see cref="P:IdeaBlade.Persistence.PersistenceManager.QueryCache"/>.
            <para>This does not delete the objects from the backend data source.  To delete an entity,
            use the <see cref="M:System.Data.DataRow.Delete"/> method.
             </para>
             </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RemoveEntities(System.Type,System.Data.DataRowState)">
             <summary>
             Removes entities of the specified type and DataRowState from the PersistenceManager cache.
             <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.ClearQueryCache"/>
             </summary>
             <param name="pEntityType">Entity type</param>
             <param name="pDataRowState">Row state(s)</param>
             <remarks>The <see cref="T:IdeaBlade.Persistence.Entity"/> objects will be in a "detached" state after the remove. 
            Calling <b>Remove</b> also clears the <see cref="P:IdeaBlade.Persistence.PersistenceManager.QueryCache"/>.
            <para>This does not delete the objects from the backend data source.</para>
             </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RemoveEntities(System.Data.DataRowState)">
             <summary>
             Removes all entities with a specified DataRowState from the PersistenceManager cache.
             <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.ClearQueryCache"/>
             </summary>
             <param name="pDataRowState">Row state(s) of entities to be removed</param>
             <remarks>The <see cref="T:IdeaBlade.Persistence.Entity"/> objects will be in a "detached" state after the remove. 
            Calling <b>Remove</b> also clears the <see cref="P:IdeaBlade.Persistence.PersistenceManager.QueryCache"/>.
            <para>This does not delete the objects from the backend data source.</para>
             </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.Connect">
            <summary>
            Connect to the <see cref="T:IdeaBlade.Persistence.Server.PersistenceServer"/>.
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.Disconnect"/>
            <seealso cref="T:IdeaBlade.Persistence.Server.PersistenceServer"/>
            </summary>
            <remarks>
            Use <b>Connect</b> and <see cref="M:IdeaBlade.Persistence.PersistenceManager.Disconnect"/> to manage the connection to the 
            PersistenceServer.  You should have a <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError"/> handler in place
            to catch connection failures.
            <para>
            <b>Connect</b> does not connect to any backend data sources.  If you need to check
            a data source connection use <see cref="M:IdeaBlade.Persistence.PersistenceManager.CheckDataSourceKey(System.String)"/>.
            </para>
            </remarks>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException"/>
            <!-- No matching elements were found for the following include tag --><include file="PersistenceManager.Examples.xml" path="//Class[@name=&quot;PersistenceManager&quot;]/method[@name=&quot;#ctor&quot;]/*"/>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.Disconnect">
            <summary>
            Disconnect from the <see cref="T:IdeaBlade.Persistence.Server.PersistenceServer"/>.
            <seealso cref="M:IdeaBlade.Persistence.PersistenceManager.Connect"/>
            <seealso cref="T:IdeaBlade.Persistence.Server.PersistenceServer"/>
            </summary>
            <remarks>
            <b>Disconnect</b> marks the connection to the PersistenceServer as closed.  Once disconnected,
            all further queries will be fulfilled using only cached entities, and any <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/>
            call will fail.  Note that a <see cref="P:IdeaBlade.Persistence.Entity.NullEntity"/> is returned for any requested object not 
            found in cache. 
            <para>
            <b>Disconnect</b> does not explicitly close data source connections.
            </para>
            </remarks>
            <!-- No matching elements were found for the following include tag --><include file="PersistenceManager.Examples.xml" path="//Class[@name=&quot;PersistenceManager&quot;]/method[@name=&quot;#ctor&quot;]/*"/>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.CheckDataSourceKey(System.String)">
            <summary>
            Resolves the data source key name and determines the connection status.
            </summary>
            <param name="pDataSourceKeyName"></param>
            <returns></returns>
            <remarks>
            Use <b>CheckDataSourceKey</b> to check the connection to the backend data source.
            </remarks>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Connection and login failures</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.CheckDataSourceKey(IdeaBlade.Util.IDataSourceKey)">
            <summary>
            Resolves the data source key name and determines the connection status.
            </summary>
            <param name="pDataSourceKey"></param>
            <returns></returns>
            <remarks>
            Use <b>CheckDataSourceKey</b> to check the connection to the backend data source.
            </remarks>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Connection and login failures</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetDataSourceKey(System.Type)">
            <summary>
            Returns the resolved data source key associated with a specified Entity type.
            </summary>
            <param name="pEntityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.InitializeSchema(System.Collections.IList)">
            <summary>
            Initialize the local schema by querying the backend data source.
            </summary>
            <param name="pTypes">List of <see cref="T:IdeaBlade.Persistence.Entity"/> objects for which schema is needed</param>
            <remarks>
            The framework will automatically perform schema initialization based on the 
            <see cref="P:IdeaBlade.Persistence.TableMappingInfo.SchemaInitializationMode"/> set for an <see cref="T:IdeaBlade.Persistence.EntityTable"/>.
            specified for each Entity type.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.InitializeSchema(System.Type[])">
            <summary>
            Initialize the local schema by querying the backend data source.
            </summary>
            <param name="pTypes">List of <see cref="T:IdeaBlade.Persistence.Entity"/> objects for which schema is needed</param>
            <remarks>
            The framework will automatically perform schema initialization based on the 
            <see cref="P:IdeaBlade.Persistence.TableMappingInfo.SchemaInitializationMode"/> set for an <see cref="T:IdeaBlade.Persistence.EntityTable"/>.
            specified for each Entity type.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.InitializeSchema(System.Type)">
            <summary>
            Initialize the local schema by querying the backend data source.
            </summary>
            <param name="pEntityType"><see cref="T:IdeaBlade.Persistence.Entity"/> for which schema is needed</param>
            <remarks>
            The framework will automatically perform schema initialization based on the 
            <see cref="P:IdeaBlade.Persistence.TableMappingInfo.SchemaInitializationMode"/> set for an <see cref="T:IdeaBlade.Persistence.EntityTable"/>.
            specified for each Entity type.
            </remarks>
            <exception cref="T:System.InvalidOperationException">PersistenceManager must be connected</exception>
            <exception cref="T:System.ArgumentException">Bad entity type</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Login, connection and query failures</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.DefinePrimaryKey(System.Type,IdeaBlade.Persistence.EntityColumn[])">
            <summary>
            Sets the primary key for an entity type where a key is not already defined.
            </summary>
            <param name="pEntityType">Entity type</param>
            <param name="pEntityColumns">Columns comprising primary key</param>
            <remarks>
            This is intended for use in dealing with Entities that are based on views.
            <b>DefinePrimaryKey</b> should be called before any query against these entity types.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.InvokeServerMethod(IdeaBlade.Persistence.ServerRpcDelegate,System.Object[])">
            <summary>
            Invokes the specified <c>static</c> (<c>Shared</c> in Visual Basic) method for execution on the server.
            This feature is only available in certain editions of DevForce.
            </summary>
            <param name="pDelegate">Method to be invoked</param>
            <param name="pArgs">Arguments to be passed to method</param>
            <remarks>The method called must be marked with the <see cref="T:IdeaBlade.Persistence.AllowRpcAttribute"/>
            and correspond to the <see cref="T:IdeaBlade.Persistence.ServerRpcDelegate"/> signature.
            <para>
            <b>InvokeServerMethod</b> enables a client-side caller to invoke an arbitrary static method 
            on the server. The method can return any kind of serializable object.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Invalid ServerRpcDelegate provided</exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <example><code lang="C#">
// Sample showing invocation of server method
PersistenceManager pm = PersistenceManager.DefaultManager;
int orderId = 10250;
bool mailSent = (bool) pm.InvokeServerMethod(Order.EmailOrderInfo, orderId);

// sample method defined in Order class
public class Order : OrderDataRow {
//...
  // ServerRpcDelegate method, called from client
  [AllowRpc]
  public static Object EmailOrderInfo(IPrincipal pPrincipal, DataSourceResolver pResolver, params Object[] pArgs) {
    int orderId = Convert.ToInt32(pArgs[0]);

    // build and send an email message 
    string from = "sales@mycompany.com";
    string to = "customer@yourcompany.com";
    System.Net.Mail.MailMessage msg = new System.Net.Mail.MailMessage(from, to);
    msg.Subject = "Order Information";
    msg.Body = string.Format("Order id = {0} has been shipped", orderId);

    System.Net.Mail.SmtpClient mailClient = new System.Net.Mail.SmtpClient("localhost");
    try {
      mailClient.Send(msg);
    } catch (Exception e) {
      TraceFns.WriteLine(e.Message);
      return false;
    }
    return true;
 }
}
</code></example><example><code lang="VB">
 ' Sample showing invocation of server method
Dim pm As PersistenceManager = PersistenceManager.DefaultManager
Dim orderId As Integer = 10250
Dim mailSent As Boolean = CBool(pm.InvokeServerMethod(Order.EmailOrderInfo, orderId))

' sample method defined in Order class
Public Class Order : Inherits OrderDataRow 
'...
  Public Shared&lt;AllowRpc()&gt;  _
  Function EmailOrderInfo(pPrincipal As IPrincipal, pResolver As DataSourceResolver, ParamArray pArgs() As [Object]) As [Object]
    Dim orderId As Integer = Convert.ToInt32(pArgs(0))
   
    ' build and send an email message 
    Dim from As String = "sales@mycompany.com"
    Dim [to] As String = "customer@yourcompany.com"
    Dim msg As New System.Net.Mail.MailMessage(from, [to])
   
    msg.Subject = "Order Information"
    msg.Body = String.Format("Order id = {0} has been shipped", orderId)
   
    Dim client As New System.Net.Mail.SmtpClient("localhost")
    Try
      client.Send(msg)
    Catch e As Exception
      TraceFns.WriteLine(e.Message)
      Return False
   End Try
   Return True
 End Function 
End Class
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.InvokeServerMethod(IdeaBlade.Persistence.ServerRpcPersistenceDelegate,System.Object[])">
            <summary>
            Invokes the specified <c>static</c> (<c>Shared</c> in Visual Basic) method for execution on the server.
            This feature is only available in certain editions of DevForce.
            </summary>
            <param name="pDelegate">Method to be invoked</param>
            <param name="pArgs">Arguments to be passed to method</param>
            <remarks>The method called must be marked with the <see cref="T:IdeaBlade.Persistence.AllowRpcAttribute"/>
            and correspond to the <see cref="T:IdeaBlade.Persistence.ServerRpcPersistenceDelegate"/> signature.
            <para>
            <b>InvokeServerMethod</b> enables a client-side caller to invoke an arbitrary static method 
            on the server. The method can return any kind of serializable object.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Invalid ServerRpcPersistenceDelegate provided</exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <example><code lang="C#">
// Sample showing invocation of server method
PersistenceManager pm = PersistenceManager.DefaultManager;
int orderId = 10250;
bool mailSent = (bool) pm.InvokeServerMethod(Order.EmailOrderInfo, orderId);

// sample method defined in Order class
public class Order : OrderDataRow {
//...
  // ServerRpcDelegate method, called from client
  [AllowRpc]
  public static Object EmailOrderInfo(IPrincipal pPrincipal, DataSourceResolver pResolver, params Object[] pArgs) {
    int orderId = Convert.ToInt32(pArgs[0]);

    // build and send an email message 
    string from = "sales@mycompany.com";
    string to = "customer@yourcompany.com";
    System.Net.Mail.MailMessage msg = new System.Net.Mail.MailMessage(from, to);
    msg.Subject = "Order Information";
    msg.Body = string.Format("Order id = {0} has been shipped", orderId);

    System.Net.Mail.SmtpClient mailClient = new System.Net.Mail.SmtpClient("localhost");
    try {
      mailClient.Send(msg);
    } catch (Exception e) {
      TraceFns.WriteLine(e.Message);
      return false;
    }
    return true;
 }
}
</code></example><example><code lang="VB">
 ' Sample showing invocation of server method
Dim pm As PersistenceManager = PersistenceManager.DefaultManager
Dim orderId As Integer = 10250
Dim mailSent As Boolean = CBool(pm.InvokeServerMethod(Order.EmailOrderInfo, orderId))

' sample method defined in Order class
Public Class Order : Inherits OrderDataRow 
'...
  Public Shared&lt;AllowRpc()&gt;  _
  Function EmailOrderInfo(pPrincipal As IPrincipal, pResolver As DataSourceResolver, ParamArray pArgs() As [Object]) As [Object]
    Dim orderId As Integer = Convert.ToInt32(pArgs(0))
   
    ' build and send an email message 
    Dim from As String = "sales@mycompany.com"
    Dim [to] As String = "customer@yourcompany.com"
    Dim msg As New System.Net.Mail.MailMessage(from, [to])
   
    msg.Subject = "Order Information"
    msg.Body = String.Format("Order id = {0} has been shipped", orderId)
   
    Dim client As New System.Net.Mail.SmtpClient("localhost")
    Try
      client.Send(msg)
    Catch e As Exception
      TraceFns.WriteLine(e.Message)
      Return False
   End Try
   Return True
 End Function 
End Class
	</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.InvokeServerMethod(System.String,System.String,System.Object[])">
            <summary>
            Invokes the specified static method for execution on the server.
            This feature is only available in certain editions of DevForce.
            </summary>
            <param name="pTypeName">Assembly-qualified type name</param>
            <param name="pMethodName">Name of method to be invoked</param>
            <param name="pArgs">Arguments to be passed to method</param>
            <remarks>The method called must be marked with the <see cref="T:IdeaBlade.Persistence.AllowRpcAttribute"/>
            and correspond to the <see cref="T:IdeaBlade.Persistence.ServerRpcPersistenceDelegate"/> or <see cref="T:IdeaBlade.Persistence.ServerRpcDelegate"/> signature.
            <para>
            <b>InvokeServerMethod</b> enables a client-side caller to invoke an arbitrary static method 
            on the server. The method can return any kind of serializable object.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Type name must be an assembly qualified type name.</exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <example><code lang="C#">
private int RpcSample() {		
  // Sample showing invocation of server method using type and method names
  PersistenceManager pm = PersistenceManager.DefaultManager;

  string className = "SampleApplication.Model.Order, SampleApplication.Model";
  string methodName = "GetNumberOfOrders";
  int num = (int) pm.InvokeServerMethod(className, methodName,
        new DateTime(1995, 1, 1), new DateTime(1999, 1, 1));
  return num;
}

// sample method defined in Order class
namespace SampleApplication.Model {
  public class Order : OrderDataRow {
  //...
  // ServerRpcPersistenceDelegate method, called from client
    [AllowRpc]
    public static Object GetNumberOfOrders(IPrincipal pPrincipal, PersistenceManager pPm, params Object[] pArgs) {
      RdbQuery query = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.Between, pArgs);
      IList orders = pPm.GetEntities(query);
      return orders.Count;
    }
  }
}
</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.InvokeServerMethodAsync(IdeaBlade.Persistence.ServerRpcPersistenceDelegate,System.Object,System.Object[])">
            <summary>
            Asynchronously invokes the specified <c>static</c> (<c>Shared</c> in Visual Basic) method for execution on the server.
            This feature is only available in certain editions of DevForce.
            </summary>
            <param name="pDelegate">Method to be invoked</param>
            <param name="pUserState">Token identifying the asynchronous request</param>
            <param name="pArgs">Arguments to be passed to method</param>
            <remarks>The method called must be marked with the <see cref="T:IdeaBlade.Persistence.AllowRpcAttribute"/>
            and correspond to the <see cref="T:IdeaBlade.Persistence.ServerRpcPersistenceDelegate"/> signature.
            <para>
            <b>InvokeServerMethodAsync</b> enables a client-side caller to invoke an arbitrary static method 
            on the server using an asynchronous call.  The data returned from the server method 
            will be available in the <see cref="T:IdeaBlade.Persistence.InvokeServerMethodCompletedEventArgs"/> passed to
            the <see cref="E:IdeaBlade.Persistence.PersistenceManager.InvokeServerMethodCompleted"/> event.  The server method is called once only.
            An outstanding request can be canceled using the <see cref="M:IdeaBlade.Persistence.PersistenceManager.CancelAsync(System.Object)"/> method.
            </para>
            <para>
            Note that this request is run on a separate client thread.  That thread will block until the server
            request completes or is canceled.
            </para>
            <para>Asynchronous RPC methods are available to DevForce Enterprise license holders only.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Invalid ServerRpcPersistenceDelegate provided</exception>
            <exception cref="T:System.ArgumentException">UserState token must be unique for the client</exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <example><code lang="C#">
	<![CDATA[
// Sample showing asynchronous invocation of server method

// In client class:
private void MakeAsyncCall() {
  PersistenceManager pm = PersistenceManager.DefaultManager;
  // Setup completion handler
  pm.InvokeServerMethodCompleted += new EventHandler<InvokeServerMethodCompletedEventArgs>(InvokeServerMethodCompletedHandler);
  // Make async call
  Guid myToken = Guid.NewGuid();
  pm.InvokeServerMethodAsync(new ServerRpcPersistenceDelegate(Order.GetNumberOfOrdersSlow), myToken, 
 	new DateTime(1995, 1, 1), new DateTime(1999, 1, 1));
}
private void InvokeServerMethodCompletedHandler(object sender, InvokeServerMethodCompletedEventArgs e) {
  Guid token = (Guid)e.UserState;
  if (!e.Cancelled) {
     MessageBox.Show("my async result = " + Convert.ToInt32(e.Result).ToString());
  }
}

// Sample method defined in Order entity class:
public class Order : OrderDataRow {
//...

  // ServerRpcPersistenceDelegate method, called from client
  [AllowRpc]
  public static Object GetNumberOfOrdersSlow(IPrincipal pPrincipal, PersistenceManager pPm, params Object[] pArgs) {
     // Sleep to make this slower to show async
     System.Threading.Thread.Sleep(2000);
     RdbQuery query = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.Between, pArgs);
     IList orders = pPm.GetEntities(query);
     return orders.Count;
  }
}
]]>
    </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.InvokeServerMethodAsync(System.String,System.String,System.Object,System.Object[])">
            <summary>
            Asynchronously invokes the specified <c>static</c> (<c>Shared</c> in Visual Basic) method for execution on the server.
            This feature is only available in certain editions of DevForce.
            </summary>
            <param name="pTypeName">Assembly-qualified type name</param>
            <param name="pMethodName">Name of method to be invoked</param>
            <param name="pUserState">Token identifying the asynchronous request</param>
            <param name="pArgs">Arguments to be passed to method</param>
            <remarks>The method called must be marked with the <see cref="T:IdeaBlade.Persistence.AllowRpcAttribute"/>
            and correspond to the <see cref="T:IdeaBlade.Persistence.ServerRpcPersistenceDelegate"/> or <see cref="T:IdeaBlade.Persistence.ServerRpcDelegate"/> signature.
            <para>
            <b>InvokeServerMethodAsync</b> enables a client-side caller to invoke an arbitrary static method 
            on the server using an asynchronous call.  The data returned from the server method 
            will be available in the <see cref="T:IdeaBlade.Persistence.InvokeServerMethodCompletedEventArgs"/> passed to
            the <see cref="E:IdeaBlade.Persistence.PersistenceManager.InvokeServerMethodCompleted"/> event.  The server method is called once only.
            An outstanding request can be canceled using the <see cref="M:IdeaBlade.Persistence.PersistenceManager.CancelAsync(System.Object)"/> method.
            </para>
            <para>
            Note that this request is run on a separate client thread.  That thread will block until the server
            request completes or is canceled.
            </para>
            <para>Asynchronous RPC methods are available to DevForce Enterprise license holders only.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Type name must be fully qualified</exception>
            <exception cref="T:System.ArgumentException">UserState token must be unique for the client</exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <example><code lang="C#">
	<![CDATA[
// Sample showing asynchronous invocation of server method

// In client class:
private void MakeAsyncCall() {
  PersistenceManager pm = PersistenceManager.DefaultManager;
  // Setup completion handler
  pm.InvokeServerMethodCompleted += new EventHandler<InvokeServerMethodCompletedEventArgs>(InvokeServerMethodCompletedHandler);
  // Make async call
  Guid myToken = Guid.NewGuid();
  pm.InvokeServerMethodAsync(new ServerRpcPersistenceDelegate(Order.GetNumberOfOrdersSlow), myToken, 
 	new DateTime(1995, 1, 1), new DateTime(1999, 1, 1));
}
private void InvokeServerMethodCompletedHandler(object sender, InvokeServerMethodCompletedEventArgs e) {
  Guid token = (Guid)e.UserState;
  if (!e.Cancelled) {
     MessageBox.Show("my async result = " + Convert.ToInt32(e.Result).ToString());
  }
}

// Sample method defined in Order entity class:
public class Order : OrderDataRow {
//...

  // ServerRpcPersistenceDelegate method, called from client
  [AllowRpc]
  public static Object GetNumberOfOrdersSlow(IPrincipal pPrincipal, PersistenceManager pPm, params Object[] pArgs) {
     // Sleep to make this slower to show async
     System.Threading.Thread.Sleep(2000);
     RdbQuery query = new RdbQuery(typeof(Order), Order.OrderDateEntityColumn, EntityQueryOp.Between, pArgs);
     IList orders = pPm.GetEntities(query);
     return orders.Count;
  }
}
]]>
    </code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetTable(System.Type)">
            <summary>
            Returns the EntityTable associated with a specific Entity subtype.
            </summary>
            <param name="pEntityType">An <see cref="T:IdeaBlade.Persistence.Entity"/> subtype</param>
            <returns>The <see cref="T:IdeaBlade.Persistence.EntityTable"/> associated with the specified Entity subtype</returns>
            <exception cref="T:System.ArgumentException">Bad entity type</exception>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException"/>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntityColumns(System.Type)">
            <summary>
            Returns a list of the EntityColumns associated with a specified entity type.
            </summary>
            <param name="pEntityType"><see cref="T:IdeaBlade.Persistence.Entity"/> subtype</param>
            <returns>List of <see cref="T:IdeaBlade.Persistence.EntityColumn"/> objects</returns>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GenerateId(IdeaBlade.Persistence.Entity,IdeaBlade.Persistence.EntityColumn)">
            <summary>
            Generates a temporary ID for an <see cref="T:IdeaBlade.Persistence.Entity"/>.  The temporary ID will be mapped to a real ID when
            <see cref="M:IdeaBlade.Persistence.PersistenceManager.SaveChanges"/> is called.
            <seealso cref="T:IdeaBlade.Persistence.IIdGenerator"/>
            </summary>
            <param name="pEntity">The Entity object for which the new ID will be generated</param>
            <param name="pEntityColumn">The EntityColumn in which the new ID will be set </param>
            <remarks>
            You must implement the <see cref="T:IdeaBlade.Persistence.IIdGenerator"/> interface to use ID generation.  See the
            <b>DevForce Developer's Guide</b> for more information on custom ID generation.
            <para>
            If you are using a SQL Server <b>Identity</b> column you do not need to call <b>GenerateId</b>
            for the column.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Incorrect entity type/column</exception>
            <exception cref="T:IdeaBlade.Util.IdeaBladeException">IdGenerator not found</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.ForceIdFixup">
            <summary>
            Force an immediate update of all auto-generated IDs.
            </summary>
            <exception cref="T:IdeaBlade.Util.IdeaBladeException"/>
            <exception cref="T:IdeaBlade.Persistence.PersistenceServerException">Login, connection, ID fixup failures</exception>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.ImportEntities(System.Collections.IEnumerable,IdeaBlade.Persistence.MergeStrategy)">
            <summary>
            Import entities from another PersistenceManager into this one.
            </summary>
            <param name="pEntities">Collection of entities</param>
            <param name="pMergeStrategy">MergeStrategy to use in loading entities into cache</param>
            <remarks>
            The entities may be from one or more PersistenceManagers.  RowState from the imported entities
            is preserved. 
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.ClearQueryCache">
            <summary>
            Obsolete. Use <see cref="M:IdeaBlade.Persistence.QueryCache.Clear"/> instead.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RegisterCallback(IdeaBlade.Persistence.ServerNotifyDelegate,IdeaBlade.Persistence.ClientNotifyDelegate,System.Object,System.Object[])">
            <summary>
            Register a client subscription to a server "push" method.
            This feature is only available in certain editions of DevForce.
            </summary>
            <param name="pServerDelegate">Server method providing the "push" service</param>
            <param name="pClientDelegate">Client method handling pushed data</param>
            <param name="pUserToken">Token identifying the request</param>
            <param name="pClientArgs">Optional arguments which can be passed to server code</param>
            <remarks>
            Use <b>RegisterCallback</b> to register a client for messages or data "pushed" from the server.  
            The <paramref name="pServerDelegate"/> indicates the method on the server which performs processing which the
            client wants to "subscribe" to.   The <paramref name="pClientDelegate"/> indicates the
            client-side method which will be called whenever the server method pushes data.  The <paramref name="pUserToken"/>
            should be used to identify the client request.  It does not have to be unique acrosss all clients, but it must
            be unique for all requests from a single client.  The <paramref name="pClientArgs"/> can be used to pass
            argument data from the client through to the server.  The server code can query for these arguments
            using the <b>INotificationManager.GetSubscribers</b> method.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the ServerNotifyDelegate is not a static method</exception>
            <exception cref="T:System.NotSupportedException">Thrown if called from a server-side PersistenceManager</exception>
            <exception cref="T:System.NotSupportedException">Thrown if not using WCF for communication with the BOS</exception>
            <exception cref="T:System.ArgumentException">Thrown if the token has already been used to register a callback from this client</exception>
            <exception cref="T:IdeaBlade.Util.IdeaBladeException">Thrown when unable to communicate with the NotificationService or not authorized</exception>
            <example><code lang="C#"><![CDATA[
// On the client - register a callback for a push service:

// The server-side code to be run.
ServerNotifyDelegate serverDel = Model.FileWatcher.SamplePublisher;
// The client-side callback which will receive the notifications.
ClientNotifyDelegate clientDel = new ClientNotifyDelegate(MyPushCallback);
// Register 
mPersMgr.RegisterCallback(serverDel, clientDel, "1");

// The client callback
private void MyPushCallback(object pUserToken, params Object[] pArgs) {
  string msg = pArgs[0].ToString();
  MessageBox.Show(msg, "Received from FileWatcher");
}

// On the server:

public class FileWatcher {

  // This is the directory we'll look at:
  private static string FileDirectory = @"C:\temp";
  // The text file we'll look for:
  private static string FileName = "FileNotifications.txt";

  private static EventWaitHandle msWaitHandle;
  private static Guid msServiceKey;
  private static INotificationManager msNotificationManager;
  
  [AllowRpc]
  public static void SamplePublisher(Guid pServiceKey, INotificationManager pManager, PersistenceManager pServerPersistenceManager) {

      msServiceKey = pServiceKey;
      msNotificationManager = pManager;

      TraceFns.WriteLine("SamplePublisher sample started");

      // Setup the FileSystemWatcher.
      FileSystemWatcher fsw = new FileSystemWatcher(FileDirectory, FileName);
      fsw.Changed += new FileSystemEventHandler(FileChangedHandler);
      fsw.Created += new FileSystemEventHandler(FileChangedHandler);
      fsw.NotifyFilter = NotifyFilters.LastWrite;

      msWaitHandle = new EventWaitHandle(false, EventResetMode.AutoReset);
      fsw.EnableRaisingEvents = true;

      // Wait for changes to the file.
      while (true) {
        if (msWaitHandle.WaitOne(1000 * 60, false)) {
          ProcessNotificationFile();
        }
      }
    }
    private static void FileChangedHandler(object sender, FileSystemEventArgs e) {
      msWaitHandle.Set();
    }
    private static void ProcessNotificationFile() {
      // Let's not do anything with the file in this sample, just send a notice 
      // to all subscribers that it's changed.

      string msg = "File changed at " + DateTime.Now.ToString();
      msNotificationManager.Send(msServiceKey, msg);
    }
 }
]]>
			</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.RegisterCallback(System.String,System.String,IdeaBlade.Persistence.ClientNotifyDelegate,System.Object,System.Object[])">
            <summary>
            Register a client subscription to a server "push" method.
            This feature is only available in certain editions of DevForce.
            </summary>
            <param name="pServerTypeName">Name of type containing the server method</param>
            <param name="pServerMethodName">Name of server method</param>
            <param name="pClientDelegate">Client method handling the pushed data</param>
            <param name="pUserToken">Token identifying the request</param>
            <param name="pClientArgs">Optional arguments which can be passed to server code</param>
            <remarks>
            Use <b>RegisterCallback</b> to register a client for messages or data "pushed" from the server.  
            The <paramref name="pServerTypeName"/> and <paramref name="pServerMethodName"/> parameters indicate the method on the server which performs processing which the
            client wants to "subscribe" to.   The <paramref name="pClientDelegate"/> indicates the
            client-side method which will be called whenever the server method pushes data.  The <paramref name="pUserToken"/>
            should be used to identify the client request.  It does not have to be unique acrosss all clients, but it must
            be unique for all requests from a single client.  The <paramref name="pClientArgs"/> can be used to pass
            argument data from the client through to the server.  The server code can query for these arguments
            using the <b>INotificationManager.GetSubscribers</b> method.
            </remarks>
            <exception cref="T:System.NotSupportedException">Thrown if called from a server-side PersistenceManager</exception>
            <exception cref="T:System.NotSupportedException">Thrown if not using WCF for communication with the BOS</exception>
            <exception cref="T:System.ArgumentException">Thrown if the token has already been used to register a callback from this client</exception>
            <exception cref="T:IdeaBlade.Util.IdeaBladeException">Thrown when unable to communicate with the NotificationService or not authorized</exception>
            <example><code lang="C#"><![CDATA[
// On the client - register a callback for a push service:

// The server-side code to be run.
ServerNotifyDelegate serverDel = Model.FileWatcher.SamplePublisher;
// The client-side callback which will receive the notifications.
ClientNotifyDelegate clientDel = new ClientNotifyDelegate(MyPushCallback);
// Register 
mPersMgr.RegisterCallback(serverDel, clientDel, "1");

// The client callback
private void MyPushCallback(object pUserToken, params Object[] pArgs) {
  string msg = pArgs[0].ToString();
  MessageBox.Show(msg, "Received from FileWatcher");
}

// On the server:

public class FileWatcher {

  // This is the directory we'll look at:
  private static string FileDirectory = @"C:\temp";
  // The text file we'll look for:
  private static string FileName = "FileNotifications.txt";

  private static EventWaitHandle msWaitHandle;
  private static Guid msServiceKey;
  private static INotificationManager msNotificationManager;
  
  [AllowRpc]
  public static void SamplePublisher(Guid pServiceKey, INotificationManager pManager, PersistenceManager pServerPersistenceManager) {

      msServiceKey = pServiceKey;
      msNotificationManager = pManager;

      TraceFns.WriteLine("SamplePublisher sample started");

      // Setup the FileSystemWatcher.
      FileSystemWatcher fsw = new FileSystemWatcher(FileDirectory, FileName);
      fsw.Changed += new FileSystemEventHandler(FileChangedHandler);
      fsw.Created += new FileSystemEventHandler(FileChangedHandler);
      fsw.NotifyFilter = NotifyFilters.LastWrite;

      msWaitHandle = new EventWaitHandle(false, EventResetMode.AutoReset);
      fsw.EnableRaisingEvents = true;

      // Wait for changes to the file.
      while (true) {
        if (msWaitHandle.WaitOne(1000 * 60, false)) {
          ProcessNotificationFile();
        }
      }
    }
    private static void FileChangedHandler(object sender, FileSystemEventArgs e) {
      msWaitHandle.Set();
    }
    private static void ProcessNotificationFile() {
      // Let's not do anything with the file in this sample, just send a notice 
      // to all subscribers that it's changed.

      string msg = "File changed at " + DateTime.Now.ToString();
      msNotificationManager.Send(msServiceKey, msg);
    }
 }
]]>
			</code></example>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.CancelCallback(System.Object)">
            <summary>
            Cancel a subscription.
            </summary>
            <param name="pUserToken">Token identifying the request to be cancelled</param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.FilterColumns(IdeaBlade.Util.Set{IdeaBlade.Persistence.EntityColumn},System.Data.DataSet)">
            <summary>
            For the given set of EntityColumns, return those found in the given dataset.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.CheckForPkIdentityColumn(IdeaBlade.Persistence.Entity)">
            <summary>
            Insures that any Primary Key identity columns are registered with the Pm 
            and that the values are set by 
            </summary>
            <param name="pEntity"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.OnPersistenceManagerCreated(IdeaBlade.Persistence.PersistenceManagerCreatedEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.Persistence.PersistenceManager.PersistenceManagerCreated"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.OnFetching(IdeaBlade.Persistence.EntityFetchingEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.Persistence.PersistenceManager.Fetching"/> event.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.OnFetched(IdeaBlade.Persistence.EntityFetchedEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.Persistence.PersistenceManager.Fetched"/> event.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.OnSaving(IdeaBlade.Persistence.EntitySavingEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.Persistence.PersistenceManager.Saving"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.OnSaved(IdeaBlade.Persistence.EntitySavedEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.Persistence.PersistenceManager.Saved"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.OnGetEntitiesCompleted(IdeaBlade.Persistence.GetEntitiesCompletedEventArgs)">
            <summary>
            Raises the GetEntitiesCompleted event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.OnServerMethodCompleted(IdeaBlade.Persistence.InvokeServerMethodCompletedEventArgs)">
            <summary>
            Raises the InvokeServerMethodCompleted event.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.XFetchDataSet(IdeaBlade.Persistence.IEntityQuery)">
            <summary>
            Returns the results of the query as a DataSet or null if 
            cancelled or errors
            </summary>
            <param name="pEntityQuery"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.Merge(System.Data.DataSet,IdeaBlade.Persistence.MergeStrategy,System.Boolean)">
            <summary>
            This merge is used both by the PM and the EntitySet.  If coming from EntitySet the
            PreserveRowState flag will be on.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.MergeSourceRows(IdeaBlade.Persistence.EntityTable,IdeaBlade.Persistence.EntityTable,IdeaBlade.Persistence.MergeStrategy,System.Boolean)">
            <summary>
            Locates all of the rows that are in the source table but are not in the 
            current cache or are in the cache but are marked unchanged. Note that 
            deleted rows in the targetTable are not located by the find operation
            </summary>
            <remarks>
            This merge is used both to merge data from a datasource into cache, and to merge entity set data.
            The entity set data can contain added/modified/deleted rows, and the rowstate must be preserved.
            Note that DataTable.CreateDataReader ignores deleted rows, so the DataTable.Load() can't be used.
            DataTable.LoadDataRow() does not set the rowstate for deleted rows - because of this we do an ugly
            row.Delete following the LoadDataRow for deleted source rows.  Addendum:  was using Upsert,
            which incorrectly flagged new Unmodified rows as Added - now using OverwriteChanges and really
            ugly FixupMergeRowState method if row state needs to be preserved.
            DataTable.Merge() leaves previously modified/added/deleted rows in a modified state after merge. 
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetEntitiesWithErrors(System.Data.DataSet,System.Boolean)">
            <summary>
            Finds entities in any dataset with errors and then marks those same errors in the pm's dataset
            and returns the pm versions
            </summary>
            <param name="pDataSet"></param>
            <param name="pRemoveFromDataSet"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.BuildDataSet(System.Collections.Generic.IEnumerable{IdeaBlade.Persistence.Entity},System.Collections.Generic.IList{IdeaBlade.Persistence.Entity}@)">
            <summary>
            Build a dataset from the entities provided.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetIdColumns(System.Data.DataSet)">
            <summary>
            Returns the Id EntityColumns for the given data set.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.MapTempIdsToRealIds(System.Data.DataSet,IdeaBlade.Persistence.FixupTempIds)">
            <summary>
            Note that this maps WITHIN the PM DataSet.  The pSaveCandidatesDataSet is only
            used when doing a partial save to get the list of temp ids needed.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetDsKeyTempIdsMap(System.Data.DataSet,IdeaBlade.Persistence.FixupTempIds)">
            <summary>
            Note that the pSaveCandidatesDataSet is only used when doing a partial save.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.GetTempIdsInSaveList(IdeaBlade.Persistence.UniqueIdCollection,System.Data.DataSet)">
            <summary>
            For the given set of TempIds, return those corresponding to the entities in the save list.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.AsyncInvokeServerWorker(IdeaBlade.Persistence.PersistenceManager.InvokeServerMethodState)">
            <summary>
            Executed on a separate thread for async InvokeServerMethod calls.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.PersistenceManager.UpdateTableMap(IdeaBlade.Persistence.EntityTable)">
            <summary>
            Internal mapping of Entity types to EntityTables.
            </summary>
            <param name="pEntityTable"></param>
        </member>
        <member name="E:IdeaBlade.Persistence.PersistenceManager.PersistenceManagerCreated">
            <summary>
            Event fired whenever a new PersistenceManager is created.
            </summary>
        </member>
        <member name="E:IdeaBlade.Persistence.PersistenceManager.Fetching">
            <summary>
            Occurs before the PersistenceManager fetches data from a PersistenceServer.
            </summary>
            <remarks>
            The event handler can modify the <see cref="P:IdeaBlade.Persistence.EntityFetchingEventArgs.Query"/> if needed, and set
            <b>EntityFetchingEventArgs.Cancel</b> to cancel the fetch.  If a fetch is cancelled, a 
            NullEntity or null entity list will be returned.
            </remarks>
            <example><code lang="C#">
// Sample PM event handlers
private void PM_EventSample() {
  PersistenceManager pm = PersistenceManager.DefaultManager;
  // Setup some handlers.
  pm.Fetching += FetchingHandler;
  pm.Fetched += FetchedHandler;
  pm.Saving += SavingHandler;
  pm.Saved += SavedHandler;

  // Now try some fetches and saves.

  // Try to retrieve customer - the fetch will be canceled and a NullEntity returned.
  Customer cust = pm.GetEntity&lt;Customer&gt;(new PrimaryKey(typeof(Customer), 1));
  if (cust.IsNullEntity)
    DebugFns.WriteLine("Customer not fetched");

  RdbQuery query = new RdbQuery(typeof(Order), Order.CustomerIdEntityColumn, EntityQueryOp.EQ, 1);
  query.AddSpan(EntityRelations.Employee_Order);
  EntityList&lt;Order&gt; orders = pm.GetEntities&lt;Order&gt;(query);
  DebugFns.WriteLine("Order count = " + orders.Count.ToString());

  // Change the first order and its details.
  Order anOrder = orders[0];
  anOrder.Freight = 100;
  foreach (OrderDetail dtl in anOrder.OrderDetails) {
    dtl.Discount = .04F;
  }
  SaveResult sr = pm.SaveChanges();
}

void FetchingHandler(object sender, EntityFetchingEventArgs e) {
  DebugFns.WriteLine("Fetching " + e.Query.ToString());

  // Let's arbitrarily cancel the query for this sample...
  if (e.Query.EntityType == typeof(Customer))
    e.Cancel = true;
}

void FetchedHandler(object sender, EntityFetchedEventArgs e) {
  DebugFns.WriteLine("Fetched " + e.Query.ToString());
  foreach (Entity anEntity in e.Entities) {
    DebugFns.WriteLine("Fetched - " + anEntity.PrimaryKey.ToString());
  }
}

void SavingHandler(object sender, EntitySavingEventArgs e) {
  foreach (Entity anEntity in e.Entities) {
    DebugFns.WriteLine("Saving - " + anEntity.PrimaryKey.ToString() + " - " + anEntity.RowState.ToString());
  }
  if (e.Entities.Count == 0) return;

  // Let's arbitrarily cancel a Customer save for this sample...
  if (typeof(Customer).IsAssignableFrom(e.Entities[0].GetType()))
    e.Cancel = true;
}

void SavedHandler(object sender, EntitySavedEventArgs e) {
  foreach (Entity anEntity in e.Entities) {
    DebugFns.WriteLine("Saved - " + anEntity.PrimaryKey.ToString());
  }
}
</code></example><example><code lang="VB">
Private Sub PM_EventSample()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager
   ' Setup some handlers.
   AddHandler pm.Fetching, AddressOf FetchingHandler
   AddHandler pm.Fetched, AddressOf FetchedHandler
   AddHandler pm.Saving, AddressOf SavingHandler
   AddHandler pm.Saved, AddressOf SavedHandler

   ' Now try some fetches and saves.
   ' Try to retrieve customer - the fetch will be canceled and a NullEntity returned.
   Dim cust As Customer = pm.GetEntity(Of Customer)(New PrimaryKey(GetType(Customer), 1))
   If cust.IsNullEntity Then
      DebugFns.WriteLine("Customer not fetched")
   End If

   Dim query As New RdbQuery(GetType(Order), Order.CustomerIdEntityColumn, EntityQueryOp.EQ, 1)
   query.AddSpan(EntityRelations.Employee_Order)
   Dim orders As EntityList(Of Order) = pm.GetEntities(Of Order)(query)
   DebugFns.WriteLine(("Order count = " + orders.Count.ToString()))

   ' Change the first order and its details.
   Dim anOrder As Order = orders(0)
   anOrder.Freight = 101
   For Each dtl as OrderDetail In anOrder.OrderDetails
      dtl.Discount = 0.05F
   Next dtl
   Dim sr As SaveResult = pm.SaveChanges()
End Sub

Sub FetchingHandler(ByVal sender As Object, ByVal e As EntityFetchingEventArgs)
   DebugFns.WriteLine("Fetching " + CType(e.Query, Object).ToString())

   ' Let's arbitrarily cancel the query for this sample...
   If e.Query.EntityType.Equals(GetType(Customer)) Then
      e.Cancel = True
   End If
End Sub

Sub FetchedHandler(ByVal sender As Object, ByVal e As EntityFetchedEventArgs)
   DebugFns.WriteLine("Fetched " + CType(e.Query, Object).ToString())
   For Each anEntity As Entity In e.Entities
      DebugFns.WriteLine("Fetched - " + anEntity.PrimaryKey.ToString())
   Next anEntity
End Sub

Sub SavingHandler(ByVal sender As Object, ByVal e As EntitySavingEventArgs)
   For Each anEntity As Entity In e.Entities
      DebugFns.WriteLine("Saving - " + anEntity.PrimaryKey.ToString() + " - " + anEntity.RowState.ToString())
   Next anEntity
   If e.Entities.Count = 0 Then
      Return
   End If
   ' Let's arbitrarily cancel a Customer save for this sample...
   If GetType(Customer).IsAssignableFrom(e.Entities(0).GetType()) Then
      e.Cancel = True
   End If
End Sub

Sub SavedHandler(ByVal sender As Object, ByVal e As EntitySavedEventArgs)
   For Each anEntity As Entity In e.Entities
      DebugFns.WriteLine("Saved - " + anEntity.PrimaryKey.ToString())
   Next anEntity
End Sub
	</code></example>
        </member>
        <member name="E:IdeaBlade.Persistence.PersistenceManager.Fetched">
            <summary>
            Occurs after the PersistenceManager has fetched data from a PersistenceServer.
            </summary>
            <remarks>
            The <see cref="P:IdeaBlade.Persistence.EntitySavingEventArgs.Entities"/> list might be empty if the query was satisfied from cache only.
            If a span query was used, multiple entity types may be found in the list.
            </remarks>
            <example><code lang="C#">
// Sample PM event handlers
private void PM_EventSample() {
  PersistenceManager pm = PersistenceManager.DefaultManager;
  // Setup some handlers.
  pm.Fetching += FetchingHandler;
  pm.Fetched += FetchedHandler;
  pm.Saving += SavingHandler;
  pm.Saved += SavedHandler;

  // Now try some fetches and saves.

  // Try to retrieve customer - the fetch will be canceled and a NullEntity returned.
  Customer cust = pm.GetEntity&lt;Customer&gt;(new PrimaryKey(typeof(Customer), 1));
  if (cust.IsNullEntity)
    DebugFns.WriteLine("Customer not fetched");

  RdbQuery query = new RdbQuery(typeof(Order), Order.CustomerIdEntityColumn, EntityQueryOp.EQ, 1);
  query.AddSpan(EntityRelations.Employee_Order);
  EntityList&lt;Order&gt; orders = pm.GetEntities&lt;Order&gt;(query);
  DebugFns.WriteLine("Order count = " + orders.Count.ToString());

  // Change the first order and its details.
  Order anOrder = orders[0];
  anOrder.Freight = 100;
  foreach (OrderDetail dtl in anOrder.OrderDetails) {
    dtl.Discount = .04F;
  }
  SaveResult sr = pm.SaveChanges();
}

void FetchingHandler(object sender, EntityFetchingEventArgs e) {
  DebugFns.WriteLine("Fetching " + e.Query.ToString());

  // Let's arbitrarily cancel the query for this sample...
  if (e.Query.EntityType == typeof(Customer))
    e.Cancel = true;
}

void FetchedHandler(object sender, EntityFetchedEventArgs e) {
  DebugFns.WriteLine("Fetched " + e.Query.ToString());
  foreach (Entity anEntity in e.Entities) {
    DebugFns.WriteLine("Fetched - " + anEntity.PrimaryKey.ToString());
  }
}

void SavingHandler(object sender, EntitySavingEventArgs e) {
  foreach (Entity anEntity in e.Entities) {
    DebugFns.WriteLine("Saving - " + anEntity.PrimaryKey.ToString() + " - " + anEntity.RowState.ToString());
  }
  if (e.Entities.Count == 0) return;

  // Let's arbitrarily cancel a Customer save for this sample...
  if (typeof(Customer).IsAssignableFrom(e.Entities[0].GetType()))
    e.Cancel = true;
}

void SavedHandler(object sender, EntitySavedEventArgs e) {
  foreach (Entity anEntity in e.Entities) {
    DebugFns.WriteLine("Saved - " + anEntity.PrimaryKey.ToString());
  }
}
</code></example><example><code lang="VB">
Private Sub PM_EventSample()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager
   ' Setup some handlers.
   AddHandler pm.Fetching, AddressOf FetchingHandler
   AddHandler pm.Fetched, AddressOf FetchedHandler
   AddHandler pm.Saving, AddressOf SavingHandler
   AddHandler pm.Saved, AddressOf SavedHandler

   ' Now try some fetches and saves.
   ' Try to retrieve customer - the fetch will be canceled and a NullEntity returned.
   Dim cust As Customer = pm.GetEntity(Of Customer)(New PrimaryKey(GetType(Customer), 1))
   If cust.IsNullEntity Then
      DebugFns.WriteLine("Customer not fetched")
   End If

   Dim query As New RdbQuery(GetType(Order), Order.CustomerIdEntityColumn, EntityQueryOp.EQ, 1)
   query.AddSpan(EntityRelations.Employee_Order)
   Dim orders As EntityList(Of Order) = pm.GetEntities(Of Order)(query)
   DebugFns.WriteLine(("Order count = " + orders.Count.ToString()))

   ' Change the first order and its details.
   Dim anOrder As Order = orders(0)
   anOrder.Freight = 101
   For Each dtl as OrderDetail In anOrder.OrderDetails
      dtl.Discount = 0.05F
   Next dtl
   Dim sr As SaveResult = pm.SaveChanges()
End Sub

Sub FetchingHandler(ByVal sender As Object, ByVal e As EntityFetchingEventArgs)
   DebugFns.WriteLine("Fetching " + CType(e.Query, Object).ToString())

   ' Let's arbitrarily cancel the query for this sample...
   If e.Query.EntityType.Equals(GetType(Customer)) Then
      e.Cancel = True
   End If
End Sub

Sub FetchedHandler(ByVal sender As Object, ByVal e As EntityFetchedEventArgs)
   DebugFns.WriteLine("Fetched " + CType(e.Query, Object).ToString())
   For Each anEntity As Entity In e.Entities
      DebugFns.WriteLine("Fetched - " + anEntity.PrimaryKey.ToString())
   Next anEntity
End Sub

Sub SavingHandler(ByVal sender As Object, ByVal e As EntitySavingEventArgs)
   For Each anEntity As Entity In e.Entities
      DebugFns.WriteLine("Saving - " + anEntity.PrimaryKey.ToString() + " - " + anEntity.RowState.ToString())
   Next anEntity
   If e.Entities.Count = 0 Then
      Return
   End If
   ' Let's arbitrarily cancel a Customer save for this sample...
   If GetType(Customer).IsAssignableFrom(e.Entities(0).GetType()) Then
      e.Cancel = True
   End If
End Sub

Sub SavedHandler(ByVal sender As Object, ByVal e As EntitySavedEventArgs)
   For Each anEntity As Entity In e.Entities
      DebugFns.WriteLine("Saved - " + anEntity.PrimaryKey.ToString())
   Next anEntity
End Sub
	</code></example>
        </member>
        <member name="E:IdeaBlade.Persistence.PersistenceManager.Saving">
            <summary>
            Occurs when the PersistenceManager is preparing to save changes.
            </summary>
            <remarks>
            The event handler can use the <see cref="P:IdeaBlade.Persistence.EntitySavingEventArgs.Entities"/> list to validate, modify, delete or add
            entities as needed.  Use <b>EntitySavingEventArgs.Cancel</b> to cancel the save operation.
            See the <b>DevForce Developer's Guide</b> for more information on the life cycle of a save.
            </remarks>
            <example><code lang="C#">
// Sample PM event handlers
private void PM_EventSample() {
  PersistenceManager pm = PersistenceManager.DefaultManager;
  // Setup some handlers.
  pm.Fetching += FetchingHandler;
  pm.Fetched += FetchedHandler;
  pm.Saving += SavingHandler;
  pm.Saved += SavedHandler;

  // Now try some fetches and saves.

  // Try to retrieve customer - the fetch will be canceled and a NullEntity returned.
  Customer cust = pm.GetEntity&lt;Customer&gt;(new PrimaryKey(typeof(Customer), 1));
  if (cust.IsNullEntity)
    DebugFns.WriteLine("Customer not fetched");

  RdbQuery query = new RdbQuery(typeof(Order), Order.CustomerIdEntityColumn, EntityQueryOp.EQ, 1);
  query.AddSpan(EntityRelations.Employee_Order);
  EntityList&lt;Order&gt; orders = pm.GetEntities&lt;Order&gt;(query);
  DebugFns.WriteLine("Order count = " + orders.Count.ToString());

  // Change the first order and its details.
  Order anOrder = orders[0];
  anOrder.Freight = 100;
  foreach (OrderDetail dtl in anOrder.OrderDetails) {
    dtl.Discount = .04F;
  }
  SaveResult sr = pm.SaveChanges();
}

void FetchingHandler(object sender, EntityFetchingEventArgs e) {
  DebugFns.WriteLine("Fetching " + e.Query.ToString());

  // Let's arbitrarily cancel the query for this sample...
  if (e.Query.EntityType == typeof(Customer))
    e.Cancel = true;
}

void FetchedHandler(object sender, EntityFetchedEventArgs e) {
  DebugFns.WriteLine("Fetched " + e.Query.ToString());
  foreach (Entity anEntity in e.Entities) {
    DebugFns.WriteLine("Fetched - " + anEntity.PrimaryKey.ToString());
  }
}

void SavingHandler(object sender, EntitySavingEventArgs e) {
  foreach (Entity anEntity in e.Entities) {
    DebugFns.WriteLine("Saving - " + anEntity.PrimaryKey.ToString() + " - " + anEntity.RowState.ToString());
  }
  if (e.Entities.Count == 0) return;

  // Let's arbitrarily cancel a Customer save for this sample...
  if (typeof(Customer).IsAssignableFrom(e.Entities[0].GetType()))
    e.Cancel = true;
}

void SavedHandler(object sender, EntitySavedEventArgs e) {
  foreach (Entity anEntity in e.Entities) {
    DebugFns.WriteLine("Saved - " + anEntity.PrimaryKey.ToString());
  }
}
</code></example><example><code lang="VB">
Private Sub PM_EventSample()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager
   ' Setup some handlers.
   AddHandler pm.Fetching, AddressOf FetchingHandler
   AddHandler pm.Fetched, AddressOf FetchedHandler
   AddHandler pm.Saving, AddressOf SavingHandler
   AddHandler pm.Saved, AddressOf SavedHandler

   ' Now try some fetches and saves.
   ' Try to retrieve customer - the fetch will be canceled and a NullEntity returned.
   Dim cust As Customer = pm.GetEntity(Of Customer)(New PrimaryKey(GetType(Customer), 1))
   If cust.IsNullEntity Then
      DebugFns.WriteLine("Customer not fetched")
   End If

   Dim query As New RdbQuery(GetType(Order), Order.CustomerIdEntityColumn, EntityQueryOp.EQ, 1)
   query.AddSpan(EntityRelations.Employee_Order)
   Dim orders As EntityList(Of Order) = pm.GetEntities(Of Order)(query)
   DebugFns.WriteLine(("Order count = " + orders.Count.ToString()))

   ' Change the first order and its details.
   Dim anOrder As Order = orders(0)
   anOrder.Freight = 101
   For Each dtl as OrderDetail In anOrder.OrderDetails
      dtl.Discount = 0.05F
   Next dtl
   Dim sr As SaveResult = pm.SaveChanges()
End Sub

Sub FetchingHandler(ByVal sender As Object, ByVal e As EntityFetchingEventArgs)
   DebugFns.WriteLine("Fetching " + CType(e.Query, Object).ToString())

   ' Let's arbitrarily cancel the query for this sample...
   If e.Query.EntityType.Equals(GetType(Customer)) Then
      e.Cancel = True
   End If
End Sub

Sub FetchedHandler(ByVal sender As Object, ByVal e As EntityFetchedEventArgs)
   DebugFns.WriteLine("Fetched " + CType(e.Query, Object).ToString())
   For Each anEntity As Entity In e.Entities
      DebugFns.WriteLine("Fetched - " + anEntity.PrimaryKey.ToString())
   Next anEntity
End Sub

Sub SavingHandler(ByVal sender As Object, ByVal e As EntitySavingEventArgs)
   For Each anEntity As Entity In e.Entities
      DebugFns.WriteLine("Saving - " + anEntity.PrimaryKey.ToString() + " - " + anEntity.RowState.ToString())
   Next anEntity
   If e.Entities.Count = 0 Then
      Return
   End If
   ' Let's arbitrarily cancel a Customer save for this sample...
   If GetType(Customer).IsAssignableFrom(e.Entities(0).GetType()) Then
      e.Cancel = True
   End If
End Sub

Sub SavedHandler(ByVal sender As Object, ByVal e As EntitySavedEventArgs)
   For Each anEntity As Entity In e.Entities
      DebugFns.WriteLine("Saved - " + anEntity.PrimaryKey.ToString())
   Next anEntity
End Sub
	</code></example>
        </member>
        <member name="E:IdeaBlade.Persistence.PersistenceManager.GetEntitiesCompleted">
            <summary>
            Occurs when a <b>GetEntitiesAsync</b> call is completed.
            </summary>
            <remarks>
            The <see cref="P:IdeaBlade.Persistence.GetEntitiesCompletedEventArgs.Entities"/> list contains the entities retrieved.  You
            can control automatic query re-execution using the <see cref="P:IdeaBlade.Persistence.GetEntitiesCompletedEventArgs.TimerInterval"/>.
            </remarks>
        </member>
        <member name="E:IdeaBlade.Persistence.PersistenceManager.Saved">
            <summary>
            Occurs after the PersistenceManager has persisted changed entities.
            </summary>
            <remarks>
            The <see cref="P:IdeaBlade.Persistence.EntitySavingEventArgs.Entities"/> list contains the entities saved to the data source, which if the 
            save was not transactional, may not be the entire list of entities for which a save was attempted. 
            See the <b>DevForce Developer's Guide</b> for more information on the life cycle of a save.
            </remarks>
            <example><code lang="C#">
// Sample PM event handlers
private void PM_EventSample() {
  PersistenceManager pm = PersistenceManager.DefaultManager;
  // Setup some handlers.
  pm.Fetching += FetchingHandler;
  pm.Fetched += FetchedHandler;
  pm.Saving += SavingHandler;
  pm.Saved += SavedHandler;

  // Now try some fetches and saves.

  // Try to retrieve customer - the fetch will be canceled and a NullEntity returned.
  Customer cust = pm.GetEntity&lt;Customer&gt;(new PrimaryKey(typeof(Customer), 1));
  if (cust.IsNullEntity)
    DebugFns.WriteLine("Customer not fetched");

  RdbQuery query = new RdbQuery(typeof(Order), Order.CustomerIdEntityColumn, EntityQueryOp.EQ, 1);
  query.AddSpan(EntityRelations.Employee_Order);
  EntityList&lt;Order&gt; orders = pm.GetEntities&lt;Order&gt;(query);
  DebugFns.WriteLine("Order count = " + orders.Count.ToString());

  // Change the first order and its details.
  Order anOrder = orders[0];
  anOrder.Freight = 100;
  foreach (OrderDetail dtl in anOrder.OrderDetails) {
    dtl.Discount = .04F;
  }
  SaveResult sr = pm.SaveChanges();
}

void FetchingHandler(object sender, EntityFetchingEventArgs e) {
  DebugFns.WriteLine("Fetching " + e.Query.ToString());

  // Let's arbitrarily cancel the query for this sample...
  if (e.Query.EntityType == typeof(Customer))
    e.Cancel = true;
}

void FetchedHandler(object sender, EntityFetchedEventArgs e) {
  DebugFns.WriteLine("Fetched " + e.Query.ToString());
  foreach (Entity anEntity in e.Entities) {
    DebugFns.WriteLine("Fetched - " + anEntity.PrimaryKey.ToString());
  }
}

void SavingHandler(object sender, EntitySavingEventArgs e) {
  foreach (Entity anEntity in e.Entities) {
    DebugFns.WriteLine("Saving - " + anEntity.PrimaryKey.ToString() + " - " + anEntity.RowState.ToString());
  }
  if (e.Entities.Count == 0) return;

  // Let's arbitrarily cancel a Customer save for this sample...
  if (typeof(Customer).IsAssignableFrom(e.Entities[0].GetType()))
    e.Cancel = true;
}

void SavedHandler(object sender, EntitySavedEventArgs e) {
  foreach (Entity anEntity in e.Entities) {
    DebugFns.WriteLine("Saved - " + anEntity.PrimaryKey.ToString());
  }
}
</code></example><example><code lang="VB">
Private Sub PM_EventSample()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager
   ' Setup some handlers.
   AddHandler pm.Fetching, AddressOf FetchingHandler
   AddHandler pm.Fetched, AddressOf FetchedHandler
   AddHandler pm.Saving, AddressOf SavingHandler
   AddHandler pm.Saved, AddressOf SavedHandler

   ' Now try some fetches and saves.
   ' Try to retrieve customer - the fetch will be canceled and a NullEntity returned.
   Dim cust As Customer = pm.GetEntity(Of Customer)(New PrimaryKey(GetType(Customer), 1))
   If cust.IsNullEntity Then
      DebugFns.WriteLine("Customer not fetched")
   End If

   Dim query As New RdbQuery(GetType(Order), Order.CustomerIdEntityColumn, EntityQueryOp.EQ, 1)
   query.AddSpan(EntityRelations.Employee_Order)
   Dim orders As EntityList(Of Order) = pm.GetEntities(Of Order)(query)
   DebugFns.WriteLine(("Order count = " + orders.Count.ToString()))

   ' Change the first order and its details.
   Dim anOrder As Order = orders(0)
   anOrder.Freight = 101
   For Each dtl as OrderDetail In anOrder.OrderDetails
      dtl.Discount = 0.05F
   Next dtl
   Dim sr As SaveResult = pm.SaveChanges()
End Sub

Sub FetchingHandler(ByVal sender As Object, ByVal e As EntityFetchingEventArgs)
   DebugFns.WriteLine("Fetching " + CType(e.Query, Object).ToString())

   ' Let's arbitrarily cancel the query for this sample...
   If e.Query.EntityType.Equals(GetType(Customer)) Then
      e.Cancel = True
   End If
End Sub

Sub FetchedHandler(ByVal sender As Object, ByVal e As EntityFetchedEventArgs)
   DebugFns.WriteLine("Fetched " + CType(e.Query, Object).ToString())
   For Each anEntity As Entity In e.Entities
      DebugFns.WriteLine("Fetched - " + anEntity.PrimaryKey.ToString())
   Next anEntity
End Sub

Sub SavingHandler(ByVal sender As Object, ByVal e As EntitySavingEventArgs)
   For Each anEntity As Entity In e.Entities
      DebugFns.WriteLine("Saving - " + anEntity.PrimaryKey.ToString() + " - " + anEntity.RowState.ToString())
   Next anEntity
   If e.Entities.Count = 0 Then
      Return
   End If
   ' Let's arbitrarily cancel a Customer save for this sample...
   If GetType(Customer).IsAssignableFrom(e.Entities(0).GetType()) Then
      e.Cancel = True
   End If
End Sub

Sub SavedHandler(ByVal sender As Object, ByVal e As EntitySavedEventArgs)
   For Each anEntity As Entity In e.Entities
      DebugFns.WriteLine("Saved - " + anEntity.PrimaryKey.ToString())
   Next anEntity
End Sub
	</code></example>
        </member>
        <member name="E:IdeaBlade.Persistence.PersistenceManager.InvokeServerMethodCompleted">
            <summary>
            Occurs when a <b>InvokeServerMethodAsync</b> call is completed.
            </summary>
            <remarks>
            The <see cref="P:IdeaBlade.Persistence.InvokeServerMethodCompletedEventArgs.Result"/> contains the data returned from
            the invoked method if the call was not canceled and completed successfully.
            </remarks>
        </member>
        <member name="E:IdeaBlade.Persistence.PersistenceManager.PersistenceServerError">
            <summary>
            Raised when an error occurs while accessing the PersistenceServer or backend data source.
            <seealso cref="T:IdeaBlade.Persistence.Server.PersistenceServer"/>
            <seealso cref="T:IdeaBlade.Persistence.PersistenceServerException"/>
            </summary>
            <remarks>
            The <see cref="T:IdeaBlade.Persistence.PersistenceServerException"/> contained within the PersistenceServerErrorEventArgs will
            indicate the <see cref="P:IdeaBlade.Persistence.PersistenceServerException.OperationType"/> which was requested when the error occurred,
            and the <see cref="P:IdeaBlade.Persistence.PersistenceServerException.FailureType"/> of the error.  Set <see cref="P:IdeaBlade.Persistence.PersistenceServerErrorEventArgs.Handled"/>
            to true to indicate that the exception should not be re-thrown.  
            <para>
            The <b>PersistenceServerError</b> event is raised for any type of exception condition which occurs while accessing the
            PersistenceServer, including during <see cref="M:IdeaBlade.Persistence.PersistenceManager.Connect"/> and <see cref="M:IdeaBlade.Persistence.PersistenceManager.Login(IdeaBlade.Persistence.ILoginCredential)"/> processing, fetching data through any of 
            the <b>GetEntity</b> or <b>GetEntities</b> methods, or saving data via <b>SaveChanges</b>.
            </para>
            </remarks>
            <example><code lang="C#">
private void SetUpHandler() {
  // Setup an error handler for PersistenceServerExceptions.

  // Note that you cannot use PM.DefaultManager or the default constructor since
  // they will attempt to connect to the PersistenceServer, and we want to setup
  // an error handler FIRST in order to trap a connection failure.
  PersistenceManager pm = new PersistenceManager(false);
  pm.PersistenceServerError += PersistenceServerErrorHandler;

  // Force an error - assume that remotePersistenceEnabled=true in IdeaBlade.ibconfig, but the
  // server has not been started.  The connection attempt will fail.
  try {
    pm.Connect();
    // If the exception was handled we'll get here, otherwise the catch block is entered.
    EntityList&lt;Employee&gt; emps = pm.GetEntities&lt;Employee&gt;();
  } catch (PersistenceServerException pse) {
    MessageBox.Show(pse.Message, "PersistenceServerException");       
  } catch (Exception e) {
    MessageBox.Show(e.Message, "Exception");
  }
}

private void PersistenceServerErrorHandler(object pSender, PersistenceServerErrorEventArgs e) {
  // Always a good idea to log all exception info.
  Exception ex = e.Exception;
  while (ex != null) {
    TraceFns.WriteLine(ex.ToString());
    ex = ex.InnerException;
  }
  MessageBox.Show("Trying to handle error");
  // Leave e.Handled = false if the PersistenceServerError should be thrown back to the calling code
  e.Handled = true;         // exception will not be thrown
}
</code></example><example><code lang="VB">
Private Sub SetUpHandler()
  ' Setup an error handler for PersistenceServerExceptions.
  ' Note that you cannot use PM.DefaultManager or the default constructor since
  ' they will attempt to connect to the PersistenceServer, and we want to setup
  ' an error handler FIRST in order to trap a connection failure.
  Dim pm As New PersistenceManager(False)
  AddHandler pm.PersistenceServerError, AddressOf PersistenceServerErrorHandler

  ' Force an error - assume that remotePersistenceEnabled=true in IdeaBlade.ibconfig, but the
  ' server has not been started.  The connection attempt will fail.
  Try
    pm.Connect()
    ' If the exception was handled we'll get here, otherwise the catch block is entered.
    Dim emps As EntityList(Of Employee) = pm.GetEntities(Of Employee)()
  Catch pse As PersistenceServerException
    MessageBox.Show(pse.Message, "PersistenceServerException")
  Catch e As Exception
    MessageBox.Show(e.Message, "Exception")
  End Try
End Sub

Private Sub PersistenceServerErrorHandler(ByVal pSender As Object, ByVal e As PersistenceServerErrorEventArgs)
  ' Always a good idea to log all exception info.
  Dim ex As Exception = e.Exception
  While Not (ex Is Nothing)
    TraceFns.WriteLine(ex.ToString())
    ex = ex.InnerException
  End While

  MessageBox.Show("Trying to handle error")
  ' Leave e.Handled = false if the PersistenceServerError should be thrown back to the calling code
  e.Handled = True ' exception will not be thrown
End Sub
	</code></example>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.DefaultManager">
            <summary>
            A <c>static</c> (<c>Shared</c> in Visual Basic) property that gets or sets a default PersistenceManager.
            </summary>
            <remarks>
            <b>DefaultManager</b> provides an easy way of referencing your "default" PersistenceManager.  
            If you have not explicitly constructed a PersistenceManager <b>DefaultManager</b> will
            implicitly call the default constructor upon first use.  If you have constructed a PersistenceManager
            <b>DefaultManager</b> will return your first constructed instance.
            <para>
            You can also set the PersistenceManager to be referenced as your <b>DefaultManager</b>.  Once set, the
            PersistenceManager you've indicated will be returned as the "default".
            </para>
            <para>
            When using <b>DefaultManager</b> without having first constructed an instance with the connection
            and data source extension of your choice, you lose the ability to catch and diagnose any connection problems
            to your PersistenceServer, since <see cref="M:IdeaBlade.Persistence.PersistenceManager.Connect"/> is called implicitly.
            </para>
            <para>
            <b>Note:</b> If you are using multiple PersistenceManagers in your application you may want to explicitly set
            this property.  If an implicitly assigned PersistenceManager is no longer in use its memory
            will not be released as long as it is still referenced by this property.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.VerifierEngine">
            <summary>
            Gets or sets the <see cref="T:IdeaBlade.Verification.VerifierEngine"/>
            shared by all entities within this PersistenceManager.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.DataSourceExtension">
            <summary>
            Gets the DataSourceExtension created with this PersistenceManager.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.PersistenceServiceOption">
            <summary>
            Gets the PersistenceServiceOption used to determine 
            whether to connect to a local or remote persistence service.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.UsesRemotePersistenceService">
            <summary>
            Gets whether this PersistenceManager uses a remote persistence service.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.IsLoggedIn">
            <summary>
            Returns whether the user has been validated by a <see cref="M:IdeaBlade.Persistence.PersistenceManager.Login(IdeaBlade.Persistence.ILoginCredential)"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.DefaultSaveOptions">
            <summary>
            Gets or sets the default options that will be used if no SaveOptions are passed to a <b>SaveChanges</b> method.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.DefaultQueryStrategy">
            <summary>
            Gets or sets the default QueryStrategy to use for all queries where the QueryStrategy is not set either
            by parameter or as part of the Query itself.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.IsCheckpointing">
            <summary>
            Returns true if a checkpoint is currently active.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.IsConnected">
            <summary>
            Returns whether the PersistenceManager is currently connected to a PersistenceServer. 
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.DataSet">
            <summary>
            Provides access to the internal <see cref="T:System.Data.DataSet"/> used to cache business objects.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.DataSourceResolver">
            <summary>
            Gets the DataSourceResolver used to map entity types to data sources and IdGenerators. 
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.EnforceConstraints">
            <summary>
            Determines whether the PersistenceManager will enforce DataSet 
            <see cref="P:System.Data.DataSet.EnforceConstraints">constraints.</see>
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.IsClient">
            <summary>
            Returns whether the PersistenceManager is running on the client or the server.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.QueryCache">
            <summary>
            Gets the query cache.
            </summary>
            <value>The query cache.</value>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.Locale">
            <summary>
            Gets or sets the locale information used to compare strings with table.  This property can only be set once.
            </summary>
            <exception cref="T:IdeaBlade.Util.IdeaBladeException">Set more than once</exception>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.CaseSensitive">
            <summary>
            Gets or sets whether string comparisons within the <see cref="T:System.Data.DataTable"/>
            objects are case sensitive.
            </summary>
            <remarks>
            The value is propagated to all DataTables within the DataSet. Furthermore, there is a
            restriction that parent and child tables must share the same CaseSensitive value.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.PersistenceManager.Tag">
            <summary>
            Gets or sets the object that contains custom data about the PersistenceManager. 
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.DataSourceKeyStatus">
            <summary>
            The status of the data source key.  
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.DataSourceKeyStatus.Ok">
            <summary>
            The key was found and the <see cref="M:IdeaBlade.Util.IDataSourceKey.CheckConnection"/> succeeded.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.DataSourceKeyStatus.UnableToLocate">
            <summary>
            The key could not be found by the <see cref="T:IdeaBlade.Persistence.DataSourceResolver"/>.
            </summary>
        </member>
        <member name="F:IdeaBlade.Persistence.DataSourceKeyStatus.UnableToConnect">
            <summary>
            The key was found but the <see cref="M:IdeaBlade.Util.IDataSourceKey.CheckConnection"/> failed.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntitySubqueryProcessor">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySubqueryProcessor.#ctor(IdeaBlade.Persistence.EntityQuery)">
            <summary>
            
            </summary>
            <param name="pEntityQuery"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySubqueryProcessor.GetSubqueriesWithoutNot">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySubqueryProcessor.GetSubqueriesWithNot">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySubqueryProcessor.ProcessQueryClause(IdeaBlade.Persistence.EntityQueryClause)">
            <summary>
            
            </summary>
            <param name="pClause"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySubqueryProcessor.ProcessSubquery(IdeaBlade.Persistence.EntitySubquery)">
            <summary>
            
            </summary>
            <param name="pSubquery"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySubqueryProcessor.ProcessBinaryOperator(IdeaBlade.Persistence.EntityBooleanOp,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pBoolOp"></param>
            <param name="pArg1"></param>
            <param name="pArg2"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntitySubqueryProcessor.ProcessUnaryOperator(IdeaBlade.Persistence.EntityBooleanOp,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pBoolOp"></param>
            <param name="pArg1"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Persistence.RelationPropertyAttribute">
            <summary>
            An <see cref="T:System.Attribute"/> subclass that is used to mark up autogenerated
            business objects.
            </summary>
            <remarks>
            This attribute is used to identify a Relation Property's supporting Entity Relation
            and query direction.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.RelationPropertyAttribute.#ctor(System.String,IdeaBlade.Persistence.QueryDirection)">
            <summary>
            Initializes a new instance of the RelationPropertyAttribute class.
            </summary>
            <param name="pRelationName">The name of this relation property</param>
            <param name="pQueryDirection">The QueryDirection for this relation property</param>
        </member>
        <member name="P:IdeaBlade.Persistence.RelationPropertyAttribute.RelationName">
            <summary>
            Gets the unique name of this relation property 
            based on the parent and child types involved.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.RelationPropertyAttribute.QueryDirection">
            <summary>Gets the QueryDirection for this relation property.</summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityTypeInfo">
            <summary>
            Helper class used in construction of dynamic entities and to retrieve information about an Entity Type.
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.GetDataSourceKeyName(System.Type)">
            <summary>
            Returns the DataSourceKeyName for a specified EntityType.
            </summary>
            <param name="pEntityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.GetByType(System.Type)">
            <summary>
            Return the EntityTypeInfo for a specified type. 
            </summary>
            <param name="pEntityType"></param>
            <returns></returns>
            <remarks>
            In most environments
            there will only be a single EntityTypeInfo schema per type. However, it is possible when using UDF's
            to have one EntityTypeInfo per type per DataSourceExtension. This overload assumes
            an empty datasource extension corresponding to the default PersistenceManager.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.GetByType(System.Type,System.String)">
            <summary>
            Return the EntityTypeInfo for a specified type and data source extension.
            </summary>
            <param name="pEntityType"></param>
            <param name="pDataSourceExtension"></param>
            <returns></returns>
            <remarks>
            In most environments
            there will only be a single EntityTypeInfo schema per type. However, it is possible when using UDF's
             to have one EntityTypeInfo per type per DataSourceExtension. 
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.GetByDynamicTypeKey(System.String)">
            <summary>
            Return the EntityTypeInfo for a dynamic type.
            </summary>
            <param name="pDynamicTypeKey"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.GetByDynamicAssemblyName(System.String)">
            <summary>
            Return the EntityTypeInfo for the specified assembly name containing a dynamic type.
            </summary>
            <param name="pAssemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.ConvertDynamicAssemblyNameToTypeKey(System.String)">
            <summary>
            Return the dynamic type name for the specified assembly name containing the dynamic type.
            </summary>
            <param name="pAssemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.GetAllDynamicTypes">
            <summary>
            Return a list of EntityTypeInfo objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.GetPrototypeTable(System.Type)">
            <summary>
            Return a "prototype" of the EntityTable containing the entity type. 
            </summary>
            <param name="pEntityType"></param>
            <returns></returns>
            <remarks>
            Replaces <b>EntityTable.GetPrototypeTable(Type)</b>.
            <para>
            In most environments
            there will only be a single EntityTable schema per type. However, it is possible when using UDF's
            to have one prototype per type per DataSourceExtensions.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.GetPrototypeTable(System.Type,System.String)">
            <summary>
            Return a "prototype" of the EntityTable containing the entity type. In most environments
            there will only be a single EntityTable schema per type. However, it is possible with UDF's
            and to have one prototype per type per DataSourceExtensions.
            </summary>
            <param name="pEntityType"></param>
            <param name="pDataSourceExtension"></param>
            <returns></returns>
            <remarks>The prototype table is not contained in the PersistenceManager cache
            and does not contain <see cref="T:IdeaBlade.Persistence.Entity"/> objects.
            <para>
            Replaces <b>EntityTable.GetPrototypeTable(Type, string)</b>.
            </para>
            <para>
            In most environments
            there will only be a single EntityTable schema per type. However, it is possible when using UDF's
            to have one prototype per type per DataSourceExtensions.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.SetPrototypeTable(IdeaBlade.Persistence.EntityTable,System.String)">
            <summary>
            Assign the prototype table to an EntityTypeInfo object.
            </summary>
            <param name="pEntityTable"></param>
            <param name="pDataSourceExtension"></param>
            <remarks>
            Replaces <b>EntityTable.SetPrototypeTable()</b>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.#ctor(System.String,System.String)">
            <summary>
            Constructs the EntityTypeInfo for a new dynamic entity.
            </summary>
            <param name="pDynamicTypeKey">A "key" or short name for the DynamicEntity type.</param>
            <param name="pDataSourceKeyName">The datasource key name.</param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.#ctor(System.String,System.String,System.String[])">
            <summary>
            Constructs the EntityTypeInfo for a new dynamic entity.
            </summary>
            <param name="pDynamicTypeKey">A "key" or short name for the DynamicEntity type.</param>
            <param name="pDataSourceKeyName">The datasource key name.</param>
            <param name="pPrimaryKeyColumnNames">Name(s) of the primary key columns.</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.#ctor(System.String,System.String,System.Int32[])">
            <summary>
            Constructs the EntityTypeInfo for a new dynamic entity.
            </summary>
            <param name="pDynamicTypeKey">A "key" or short name for the DynamicEntity type.</param>
            <param name="pDataSourceKeyName">The datasource key name.</param>
            <param name="pPrimaryKeyColumnIndexes">Index(es) of the primary key columns.</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.#ctor(System.String,System.String,System.Data.DataTable)">
            <summary>
            Constructs the EntityTypeInfo for a new dynamic entity.
            </summary>
            <param name="pDynamicTypeKey">A "key" or short name for the DynamicEntity type.</param>
            <param name="pDataSourceKeyName">The datasource key name.</param>
            <param name="pTemplateDataTable">DataTable to use as a template.</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.#ctor(System.String,System.String,System.Data.DataTable,IdeaBlade.Persistence.TableMappingInfo)">
            <summary>
            Constructs the EntityTypeInfo for a new dynamic entity.
            </summary>
            <param name="pDynamicTypeKey">A "key" or short name for the DynamicEntity type.</param>
            <param name="pDataSourceKeyName">The datasource key name.</param>
            <param name="pTemplateDataTable">DataTable to use as a template.</param>
            <param name="pTableMappingInfo">Schema mapping information.</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.#ctor(System.String,System.String,IdeaBlade.Persistence.TableMappingInfo,System.Int32[])">
            <summary>
            Constructs the EntityTypeInfo for a new dynamic entity.
            </summary>
            <param name="pDynamicTypeKey">A "key" or short name for the DynamicEntity type.</param>
            <param name="pDataSourceKeyName">The datasource key name.</param>
            <param name="pTableMappingInfo">Schema mapping information.</param>
            <param name="pPrimaryKeyColumnIndexes">Index(es) of the primary key columns.</param>
            <remarks>
            This overload actually allows the system to create a fully persistable entity
            if the TableMappingInfo is an RdbTableMappingInfo and the data source is a table.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.#ctor(System.String,System.String,IdeaBlade.Persistence.TableMappingInfo,System.String[])">
            <summary>
            Constructs the EntityTypeInfo for a new dynamic entity.
            </summary>
            <param name="pDynamicTypeKey">A "key" or short name for the DynamicEntity type.</param>
            <param name="pDataSourceKeyName">The datasource key name.</param>
            <param name="pTableMappingInfo">Schema mapping information.</param>
            <param name="pPrimaryKeyColumnNames">Name(s) of the primary key columns.</param>
            <remarks>
            This overload actually allows the system to create a fully persistable entity
            if the TableMappingInfo is an RdbTableMappingInfo and the data source is a table.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.#ctor(IdeaBlade.Persistence.EntityTypeInfo,System.String)">
            <summary>
            Copy constructor for creation of a copy of EntityTypeInfo for another DataSourceExtension
            </summary>
            <param name="pInfo"></param>
            <param name="pDataSourceExtension"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.ClearStaticsForTesting">
            <summary>
            For internal use only - calling this method WILL corrupt your environment
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTypeInfo.EntityType">
            <summary>
            Gets the Type of the entity.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTypeInfo.DataSourceKeyName">
            <summary>
            Gets the data source key name.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTypeInfo.DataSourceExtension">
            <summary>
            Gets the data source extension.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTypeInfo.DynamicTypeKey">
            <summary>
            Gets the "key" name of the dynamic entity.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTypeInfo.PrimaryKeyColumnNames">
            <summary>
            Gets a readonly list of the primary key column names.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTypeInfo.PrimaryKeyColumnIndexes">
            <summary>
            Gets a readonly list of the primary key column indexes.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTypeInfo.PrototypeEntityTable">
            <summary>
            Gets the prototype table.
            </summary>
            <remarks>
            The EntityTable returned should not be modified after creation of the type.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTypeInfo.TemplateDataTable">
            <summary>
            Gets the template data table.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTypeInfo.TableMappingInfo">
            <summary>
            Gets the <see cref="P:IdeaBlade.Persistence.EntityTypeInfo.TableMappingInfo"/>.
            </summary>
            <remarks>
            The TableMappingInfo returned should not be modified after creation of the type.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTypeInfo.CanQueryForSchema">
            <summary>
            Gets whether the schema can be queried for from the data source.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTypeInfo.CanQueryByPrimaryKey">
            <summary>
            Gets whether primary key queries are allowed.
            </summary>
        </member>
        <member name="T:IdeaBlade.Persistence.EntityTypeInfo.EntityTypeKey">
            <summary>
            Uniquely identifies an entity Type and data source extension.
            </summary>
            <remarks>
            In most environments
            there will only be a single EntityTypeInfo schema per type. However, it is possible when using UDF's
            to have one EntityTypeInfo per type per DataSourceExtension. 
            </remarks>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.EntityTypeKey.#ctor(System.Type,System.String)">
            <summary>
            Construct a new instance of this class.
            </summary>
            <param name="pEntityType"></param>
            <param name="pDataSourceExtension"></param>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.EntityTypeKey.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Persistence.EntityTypeInfo.EntityTypeKey.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTypeInfo.EntityTypeKey.EntityType">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="P:IdeaBlade.Persistence.EntityTypeInfo.EntityTypeKey.DataSourceExtension">
            <summary>
            Gets the data source extension.
            </summary>
        </member>
    </members>
</doc>
