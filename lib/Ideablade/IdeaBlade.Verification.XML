<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IdeaBlade.Verification</name>
    </assembly>
    <members>
        <member name="T:IdeaBlade.Verification.VerifierResultException">
            <summary>
            Exception to be used to report "expected" errors based on a VerifierResult or 
            This exception should never be called from within any Verifier; use VerifierException instead
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResultException.#ctor(IdeaBlade.Verification.VerifierResult)">
            <summary>
            Initializes a new instance of the VerifierResultException class.
            </summary>
            <param name="pVerifierResult"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResultException.#ctor(IdeaBlade.Verification.VerifierResultCollection)">
            <summary>
            Initializes a new instance of the VerifierResultException class.
            </summary>
            <param name="pVerifierResultCollection"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the VerifierResultException class.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResultException.VerifierResult">
            <summary>
            Gets the <see cref="P:IdeaBlade.Verification.VerifierResultException.VerifierResult"/> that resulted in this exception or the first 
            result in the <see cref="P:IdeaBlade.Verification.VerifierResultException.VerifierResultCollection"/> that resulted in this exception.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResultException.VerifierResultCollection">
            <summary>
            Gets the <see cref="P:IdeaBlade.Verification.VerifierResultException.VerifierResultCollection"/> that resulted in this exception.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.TriggerItem">
            <summary>
            A TriggerItem is the minimum information necessary to describe some “event” on an object. 
            </summary>
            <remarks>
            Every verifier has a <see cref="P:IdeaBlade.Verification.Verifier.TriggerLinks"/> property that returns a list of  <see cref="T:IdeaBlade.Verification.TriggerLink"/> objects.  
            A TriggerLink 
            The verifier class has several add and remove methods that allow triggers to be added and removed from a verifier.  
            A TriggerItem is the minimum information necessary to describe some “event” on an object.  
            Note that a TriggerItem does not include any specification of “pre” or “post” semantics.  
            These will be specified separately in a <see cref="T:IdeaBlade.Verification.TriggerContext"/>  object.  
            <para>The most common TriggerItem
            represents the "event" of setting some property on an object.  The minimum necessary information to describe 
            this “event” is the type of the class and the name of the property.  A .NET property descriptor is another 
            concise description of the same thing.  Note however that there is no requirement that a TriggerItem be a 
            property set operation.  It might just as easily be some non-set operation being performed on an object 
            (i.e. the calling of some method on the object).  For this reason, any TriggerItem is represented most simply
            by a type and a name.  There are, however, several overloads that may be used during the construction of 
            a trigger item that allow the use of .NET property descriptors.
            </para><para>
            One of the more interesting things about a TriggerItem is that it need not be defined on the same type of 
            object that the verification is actually being defined upon.  For example, verification logic on a Customer 
            might be best triggered as a result of some change to the OrderDetail.ListPrice associated with an Order, '
            which is in turn associated with the Customer. In this case, while the TriggerItem is sufficient to indicate 
            the operation that should cause the verifier to execute, we also need some mechanism to indicate the 
            “navigation path” between the object on which the TriggerItem occurs and the object that is being verified.  
            The combination of a TriggerItem and this navigation path is termed a <see cref="T:IdeaBlade.Verification.TriggerLink"/>
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Verification.TriggerItem.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the TriggerItem class.
            </summary>
            <param name="pType">The type of object that this TriggerItem is applicable to.</param>
            <param name="pMemberName">The member name (usually a property name) on the class specified by the pType parameter.</param>
        </member>
        <member name="M:IdeaBlade.Verification.TriggerItem.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Initializes a new instance of the TriggerItem class.
            </summary>
            <param name="pPropertyDescriptor"></param>
        </member>
        <member name="M:IdeaBlade.Verification.TriggerItem.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.TriggerItem.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.TriggerItem.op_Equality(IdeaBlade.Verification.TriggerItem,IdeaBlade.Verification.TriggerItem)">
            <summary>
            Same semantics as <see cref="M:IdeaBlade.Verification.TriggerItem.Equals(System.Object)"/>.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.TriggerItem.op_Inequality(IdeaBlade.Verification.TriggerItem,IdeaBlade.Verification.TriggerItem)">
            <summary>
            Same semantics as not <see cref="M:IdeaBlade.Verification.TriggerItem.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.TriggerItem.Type">
            <summary>
            Gets the type of object that this TriggerItem is applicable to.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.TriggerItem.MemberName">
            <summary>
            Gets the member name (usually a property name) on the class specified by the <see cref="P:IdeaBlade.Verification.TriggerItem.Type"/> property.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.ListVerifier">
            <summary>
            A <see cref="T:IdeaBlade.Verification.Verifier"/> that determines if a given value is one of the items in a predefined list.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.PropertyValueVerifier">
            <summary>
            Abstract base class for all Verifiers that are triggered by a single property on the class 
            being verified. 
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.Verifier">
            <summary>
            <para>
            All verifiers will be instances of a some subclass of this abstract Verifier class. 
            The IdeaBlade Verification library consists of several predefined Verifier subclasses as well as 
            several higher level abstract classes that allow developers to construct their own verifiers.
            The primary responsibility of every verifier is to verify the state of some business object and 
            return the result of this verification in the form of a <see cref="T:IdeaBlade.Verification.VerifierResult"/>. At its simplest a 
            <see cref="T:IdeaBlade.Verification.VerifierResult"/> is a result code indicating the success or failure of a verification 
            as well as a more detailed description if necessary.
            </para>
            </summary>
            <remarks>
            <para>
            Each verifier has an ApplicableType 
            property that represents the type of object that the verifier was designed to verify.  
            Verifiers with an <see cref="P:IdeaBlade.Verification.Verifier.ApplicableType"/> of any .NET base type are assumed to be applicable to all 
            subclasses of that base type.  The <see cref="P:IdeaBlade.Verification.Verifier.VerifierEngine"/> will insure that any verifiers registered
            against a base class will automatically be applied to any verification of instances of any of its subclasses.
            </para><para>
            Every verifier has a <see cref="P:IdeaBlade.Verification.Verifier.Description"/> property that is intended to be a human readable string 
            that described the verifier and will be used by the <see cref="P:IdeaBlade.Verification.Verifier.VerifierEngine"/> to produce a default 
            verification status  message on completion of verifier execution.  Custom status messages
            are fully supported as well but much of the time the <see cref="P:IdeaBlade.Verification.Verifier.Description"/> property is sufficient. 
            </para><para>
            A verifier cannot be executed until it has been added to a <see cref="P:IdeaBlade.Verification.Verifier.VerifierEngine"/>.  An individual verifier 
            instance can be attached to only one <see cref="P:IdeaBlade.Verification.Verifier.VerifierEngine"/> at a time. Verifiers are by default executed
            in the order that they were added to the VerifierEngine, however it is possible to change
            this order via the <see cref="P:IdeaBlade.Verification.Verifier.SortValue"/> property on each verifier.
            </para><para>
            During the execution of any verifier the VerifierEngine first calls the <see cref="M:IdeaBlade.Verification.Verifier.IsApplicable(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> method.  
            If the IsApplicable method returns a VerifierApplicability with a <see cref="F:IdeaBlade.Verification.VerifierApplicabilityCode.No"/> or 
            <see cref="F:IdeaBlade.Verification.VerifierApplicabilityCode.InsufficientData"/>, then the VerifierEngine will immediately construct an 
            “errant” <see cref="T:IdeaBlade.Verification.VerifierResult"/> for this verifier using the information in the <see cref="T:IdeaBlade.Verification.VerifierApplicability"/>
            result and continue on to the next appropriate verifier. Only if a <see cref="F:IdeaBlade.Verification.VerifierApplicability.Yes"/> is 
            returned will the VerifierEngine attempt to actually call the Verify method.
            </para><para>
            The rational for the <see cref="M:IdeaBlade.Verification.Verifier.IsApplicable(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> method call is that the execution cost of some verifiers may be so 
            high as to make it good practice to avoid calling them unless a set of preconditions can be met first.  
            This is, however, a relatively rare occurrence and therefore the base IsApplicable implementation in the 
            abstract Verifier class simply returns <see cref="F:IdeaBlade.Verification.VerifierApplicability.Yes"/>.  In general, most subclassed 
            verifiers will only need to implement the Verify method and rely on the base class implementation of IsApplicable.
            </para>
            </remarks>
        </member>
        <member name="F:IdeaBlade.Verification.Verifier.DefaultSortValue">
            <summary>
            Default SortValue for all verifiers = 0
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.#ctor(IdeaBlade.Verification.VerifierArgs)">
            <summary>
            Initializes a new instance of the Verifier class.
            </summary>
            <remarks>
            In general, all Verifier constructors should internally delegate to a constructor 
            implementation that takes a single strongly typed subclass of VerifierArgs as its sole
            argument. This implementation should in turn call this base implementation to store
            the VerifierArgs in a private member accessible via the VerifierArgs property.
            </remarks>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.IsApplicable(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            Default implementation that may be overridden by any subclass that wants to 
            implement IsApplicable logic.  Default return value in <see cref="F:IdeaBlade.Verification.VerifierApplicability.Yes"/>
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.Verify(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.AddTrigger(IdeaBlade.Verification.TriggerItem)">
            <summary>
            Add a <see cref="T:IdeaBlade.Verification.TriggerItem"/> to this verifier.
            </summary>
            <param name="pTriggerItem"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.AddTrigger(System.String)">
            <summary>
            Add a <see cref="T:IdeaBlade.Verification.TriggerItem"/> to this verifier. The <see cref="T:IdeaBlade.Verification.TriggerItem"/> is constructed
            using the <see cref="P:IdeaBlade.Verification.Verifier.ApplicableType"/> and the specified "pMemberName".
            </summary>
            <param name="pMemberName"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.AddTrigger(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Add a <see cref="T:IdeaBlade.Verification.TriggerItem"/> to this verifier. The <see cref="T:IdeaBlade.Verification.TriggerItem"/> is constructed
            using the specified <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <param name="pPropertyDescriptor"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.AddTriggers(System.String[])">
            <summary>
            Adds multiple <see cref="T:IdeaBlade.Verification.TriggerItem"/>s to this verifier. Each <see cref="T:IdeaBlade.Verification.TriggerItem"/> is constructed
            using the <see cref="P:IdeaBlade.Verification.Verifier.ApplicableType"/> and one of the specified "pMemberNames".
            </summary>
            <param name="pMemberNames"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.AddTriggers(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Adds multiple <see cref="T:IdeaBlade.Verification.TriggerItem"/>s to this verifier. Each <see cref="T:IdeaBlade.Verification.TriggerItem"/> is constructed
            using the specified <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <param name="pMemberNames"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.AddTrigger(IdeaBlade.Verification.TriggerLink)">
            <summary>
            Add a <see cref="T:IdeaBlade.Verification.TriggerLink"/> to this verifier. 
            </summary>
            <param name="pTriggerLink"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.RemoveTrigger(IdeaBlade.Verification.TriggerItem)">
            <summary>
            Remove a TriggerItem from this verifier.
            </summary>
            <param name="pTriggerItem"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.RemoveTrigger(System.String)">
            <summary>
            Remove a <see cref="T:IdeaBlade.Verification.TriggerItem"/> from this verifier. The <see cref="T:IdeaBlade.Verification.TriggerItem"/> is constructed
            using the <see cref="P:IdeaBlade.Verification.Verifier.ApplicableType"/> and the specified "pMemberName".
            </summary>
            <param name="pMemberName"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.RemoveTrigger(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Remove a <see cref="T:IdeaBlade.Verification.TriggerItem"/> from this verifier. The <see cref="T:IdeaBlade.Verification.TriggerItem"/> is constructed
            using the specified <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <param name="pPropertyDescriptor"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.RemoveTriggers(System.String[])">
            <summary>
            Removes multiple <see cref="T:IdeaBlade.Verification.TriggerItem"/>s to this verifier. Each <see cref="T:IdeaBlade.Verification.TriggerItem"/> is constructed
            using the <see cref="P:IdeaBlade.Verification.Verifier.ApplicableType"/> and one of the specified "pMemberNames".
            </summary>
            <param name="pMemberNames"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.RemoveTriggers(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Removes multiple <see cref="T:IdeaBlade.Verification.TriggerItem"/>s to this verifier. Each <see cref="T:IdeaBlade.Verification.TriggerItem"/> is constructed
            using the specified <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <param name="pMemberNames"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.GetDisplayName(System.Type,System.String)">
            <summary>
            Constructs a display name according to the following rules. 
              1st) Via a PropertyName translator Delegate registered on the current VerifierEngine (if one exists)
              2nd) Via a DescriptionAttribute on the member name passed in (if it is a property name)
              3rd) The pMemberName passed in
            </summary>
            <param name="pType"></param>
            <param name="pMemberName"></param>
            <returns>The display name</returns>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.GetDescriptionAttributeValue(System.Type,System.String)">
            <summary>
            Returns the value of any [Description] attribute on a specified member of a specified type
            </summary>
            <param name="pType"></param>
            <param name="pMemberName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.CompareTo(IdeaBlade.Verification.Verifier)">
            <summary>
            See <see cref="M:System.IComparable.CompareTo(System.Object)"/>
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.ExecuteTrigger(IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            (for internal use only)
            </summary>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.Execute(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
             <summary>
            (for internal use only)
             </summary>
             <param name="pItemToVerify"></param>
             <param name="pTriggerContext"></param>
             <param name="pVerifierContext"></param>
             <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.GetTriggerLink(IdeaBlade.Verification.TriggerContext)">
            <summary>
            Returns the TriggerLink or null associated with a specific TriggerContext
            </summary>
            <param name="pTriggerContext"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier.GetBestDescription(System.String)">
            <summary>
            
            </summary>
            <param name="pDescription"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.Verifier.VerifierEngine">
            <summary>
            <see cref="P:IdeaBlade.Verification.Verifier.VerifierEngine"/> that this Verifier is attached to. Will be null for any
            unattached verifier.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.Verifier.Description">
            <summary>
            Description of this verifier - will be used by default to construct 
            status messages regarding the success or failure of the verifier.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.Verifier.ApplicableType">
            <summary>
            The type of object that this verifier is verifying
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.Verifier.ExecutionModes">
            <summary>
            Gets or sets the conditions under which this verifier is executed.
            </summary>
            <remarks>
            The determination of when and how a verifier is executed is controlled via the 
            <see cref="P:IdeaBlade.Verification.Verifier.ExecutionModes"/> and <see cref="P:IdeaBlade.Verification.Verifier.TriggerLinks"/>
            properties on each verifier.  In general, we can think of each verifier as being executed 
            either in the context of verifying an entire object or in the more localized context of 
            a single change that affects the object.  
            <para>An example of the first would be if we wanted to verify 
            that an instance of an Employee object was completely valid before we save it and in this case 
            we might want to perform a large number of verifications on a number of individual properties 
            of the employee object in order to completely verify its correctness.  An example of the second 
            is when we are either in the process of changing or have changed the “HireDate” on an employee 
            and we only want to perform those verifications that are in some way effected by this change.  
            The latter is an example of a “Triggered” verification and the first is an example of 
            an “Instance” verification.
            </para><para>“Triggered” verifications can be further subdivided into 
            “pre” and “post” triggering categories.  A “Preset” trigger verification is one that should 
            be applied before some specific  change is actually made and a “Postset” trigger verification 
            is one where we want to execute the verification immediately after some change has occurred.   
            Any given verifier might be written in such a way as to be applicable under several of these conditions.  
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Verification.Verifier.OnErrorMode">
            <summary>
            Gets or sets whether a failure in this verifier should stop the execution of the remainder of the batch in
            which this verifier is executing.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.Verifier.VerifierArgs">
            <summary>
            Gets or sets the parameters that represent the state of this verifier.
            </summary>
            <remarks>
            Every verifier contains a single instance of the VerifierArgs that was used 
            to instantiate it. With the exception of "Trigger" information the VerifierArgs member of each Verifier is 
            intended to be the repository for the "state" of the Verifier.  In general, all Verifier constructors should internally
            delegate to a constructor implementation that takes a single strongly typed subclass of VerifierArgs as its sole
            argument.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Verification.Verifier.TriggerLinks">
            <summary>
            Gets a collection of all of the <see cref="T:IdeaBlade.Verification.TriggerItem"/>s on this verifier.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.Verifier.SortValue">
            <summary>
            Gets or sets the order that verifiers are executed within a verifier batch.
            </summary>
            <remarks>
            By default, verifiers are executed in the order that they were added to the VerifierEngine.  
            However it is possible to change this order via the this property.
            <para>
            All verifiers by default have a SortValue of 0.  However, verifiers also have an <see cref="P:IdeaBlade.Verification.Verifier.InitializationOrder"/>
            that corresponds to the order that the verifier was added to a <see cref="P:IdeaBlade.Verification.Verifier.VerifierEngine"/>.  
            Verifiers are always sorted for execution first by the externally exposed SortValue 
            and secondly by their <see cref="P:IdeaBlade.Verification.Verifier.InitializationOrder"/>.  This implementation means that 
            verifiers have an implicit sort order that is defined according to when each verifier 
            was added to a <see cref="P:IdeaBlade.Verification.Verifier.VerifierEngine"/>.  This means that by default verifiers defined with a <see cref="T:IdeaBlade.Verification.VerifierAttribute"/>
            will sort before verifiers defined via a VerifierProvider, which in turn, will sort before any
            programmatically added verifiers.  Furthermore, discovered base class verifiers will sort before 
            discovered subclass verifiers.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Verification.Verifier.InitializationOrder">
            <summary>
            Gets or sets the internally maintained order that represents the order 
            that this verifier was added to a <see cref="P:IdeaBlade.Verification.Verifier.VerifierEngine"/>.
            <seealso cref="P:IdeaBlade.Verification.Verifier.SortValue"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifier.#ctor(IdeaBlade.Verification.PropertyValueVerifierArgs)">
            <summary>
            Initializes a new instance of the PropertyValueVerifier class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifier.GetPropertyValue(System.Object)">
            <summary>
            Returns the value of the previously defined PropertyName for this instance.
            </summary>
            <param name="pInstance"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifier.Verify(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.Verifier.Verify(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/>
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifier.HandleNullPropertyValue(IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            Can be overridden to return a custom null handling result or if null is returned
            nulls will be handled by the VerifyValue method
            </summary>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifier.VerifyValue(System.Object,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.Verifier.Verify(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/>
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pValueToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.PropertyValueVerifier.PropertyName">
            <summary>
            Gets the name of the property that this verifier is verifying something about.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.PropertyValueVerifier.IsRequired">
            <summary>
            Gets whether the Property specified by this verifier is required to have a value or whether it can be null.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.PropertyValueVerifier.PropertyDescriptor">
            <summary>
            Gets the <see cref="P:IdeaBlade.Verification.PropertyValueVerifier.PropertyDescriptor"/> that the <see cref="P:IdeaBlade.Verification.PropertyValueVerifier.PropertyName"/> corresponds to.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.PropertyValueVerifier.DisplayName">
            <summary>
            Gets the Display name for this verifier. 
            Internally this value will be determined by 
              1st) The display name defined in the constructor VerifierArgs.
              2nd) A PropertyName translator Delegate registered on the current VerifierEngine
              3rd) A DescriptionAttribute on property
              4th) The value of the PropertyName property.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.PropertyValueVerifier.TypedVerifierArgs">
            <summary>
            Gets the strongly typed version of <see cref="P:IdeaBlade.Verification.Verifier.VerifierArgs"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.ListVerifier.#ctor(System.Type,System.String,System.Boolean,System.Collections.IEnumerable)">
            <summary>
             Initializes a new instance of the ListVerifier class.
            </summary>
            <param name="pType"></param>
            <param name="pPropertyName"></param>
            <param name="pIsRequired"></param>
            <param name="pList"></param>
        </member>
        <member name="M:IdeaBlade.Verification.ListVerifier.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the ListVerifier class.
            </summary>
            <param name="pPropertyDescriptor"></param>
            <param name="pIsRequired"></param>
            <param name="pList"></param>
        </member>
        <member name="M:IdeaBlade.Verification.ListVerifier.#ctor(IdeaBlade.Verification.ListVerifierArgs)">
            <summary>
            Initializes a new instance of the ListVerifier class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.ListVerifier.VerifyValue(System.Object,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.PropertyValueVerifier.VerifyValue(System.Object,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/>
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pValueToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.ListVerifier.List">
            <summary>
            The list in which an item must be found in order to pass verification.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.ListVerifier.Description">
            <summary>
            See <see cref="P:IdeaBlade.Verification.Verifier.Description"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.ListVerifier.TypedVerifierArgs">
            <summary>
            Strongly typed version of <see cref="P:IdeaBlade.Verification.Verifier.VerifierArgs"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.ListVerifierArgs">
            <summary>
            Subclass of <see cref="T:IdeaBlade.Verification.VerifierArgs"/> used to construct a Verifier that determines if a given value is one of the items in a predefined list.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.PropertyValueVerifierArgs">
            <summary>
            VerifierArgs for a PropertyValueVerifier
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierArgs">
            <summary>
            Base class for all VerifierArgs subclasses.  Typically there will be a VerifierArgs subclass that corresponds to
            each Verifier subclass. Every verifier contains a single instance of the VerifierArgs that was used 
            to instantiate it. With the exception of "Trigger" information the VerifierArgs member of each Verifier is 
            intended to be the repository for the "state" of the Verifier.  In general, all Verifier constructors should internally
            delegate to a constructor implementation that takes a single strongly typed subclass of VerifierArgs as its sole
            argument.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierArgs.Empty">
            <summary>
            Represents a VerifierArgs with no data.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierArgs.#ctor">
            <summary>
            Initializes a new instance of a VerifierArgs.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierArgs.#ctor(IdeaBlade.Verification.VerifierArgs)">
            <summary>
            Initializes a new instance of a VerifierArgs. This is a copy constructor.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierArgs.AddTrigger(IdeaBlade.Verification.TriggerItem)">
            <summary>
            Add a <see cref="T:IdeaBlade.Verification.TriggerItem"/> to this verifier.
            </summary>
            <param name="pTriggerItem"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierArgs.AddTrigger(System.String)">
            <summary>
            Add a <see cref="T:IdeaBlade.Verification.TriggerItem"/> to this verifier. The <see cref="T:IdeaBlade.Verification.TriggerItem"/> is constructed
            using the <see cref="P:IdeaBlade.Verification.VerifierArgs.ApplicableType"/> and the specified "pMemberName".
            </summary>
            <param name="pMemberName"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierArgs.AddTrigger(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Add a <see cref="T:IdeaBlade.Verification.TriggerItem"/> to this verifier. The <see cref="T:IdeaBlade.Verification.TriggerItem"/> is constructed
            using the specified <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <param name="pPropertyDescriptor"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierArgs.AddTriggers(System.String[])">
            <summary>
            Adds multiple <see cref="T:IdeaBlade.Verification.TriggerItem"/>s to this verifier. Each <see cref="T:IdeaBlade.Verification.TriggerItem"/> is constructed
            using the <see cref="P:IdeaBlade.Verification.VerifierArgs.ApplicableType"/> and one of the specified "pMemberNames".
            </summary>
            <param name="pMemberNames"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierArgs.AddTriggers(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Adds multiple <see cref="T:IdeaBlade.Verification.TriggerItem"/>s to this verifier. Each <see cref="T:IdeaBlade.Verification.TriggerItem"/> is constructed
            using the specified <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <param name="pMemberNames"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierArgs.AddTrigger(IdeaBlade.Verification.TriggerLink)">
            <summary>
            Add a <see cref="T:IdeaBlade.Verification.TriggerLink"/> to this verifier. 
            </summary>
            <param name="pTriggerLink"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierArgs.RemoveTrigger(IdeaBlade.Verification.TriggerItem)">
            <summary>
            Remove a TriggerItem from this verifier.
            </summary>
            <param name="pTriggerItem"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierArgs.RemoveTrigger(System.String)">
            <summary>
            Remove a <see cref="T:IdeaBlade.Verification.TriggerItem"/> from this verifier. The <see cref="T:IdeaBlade.Verification.TriggerItem"/> is constructed
            using the <see cref="P:IdeaBlade.Verification.VerifierArgs.ApplicableType"/> and the specified "pMemberName".
            </summary>
            <param name="pMemberName"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierArgs.RemoveTrigger(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Remove a <see cref="T:IdeaBlade.Verification.TriggerItem"/> from this verifier. The <see cref="T:IdeaBlade.Verification.TriggerItem"/> is constructed
            using the specified <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <param name="pPropertyDescriptor"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierArgs.RemoveTriggers(System.String[])">
            <summary>
            Removes multiple <see cref="T:IdeaBlade.Verification.TriggerItem"/>s to this verifier. Each <see cref="T:IdeaBlade.Verification.TriggerItem"/> is constructed
            using the <see cref="P:IdeaBlade.Verification.VerifierArgs.ApplicableType"/> and one of the specified "pMemberNames".
            </summary>
            <param name="pMemberNames"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierArgs.RemoveTriggers(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Removes multiple <see cref="T:IdeaBlade.Verification.TriggerItem"/>s to this verifier. Each <see cref="T:IdeaBlade.Verification.TriggerItem"/> is constructed
            using the specified <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <param name="pMemberNames"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierArgs.GetTriggerLink(IdeaBlade.Verification.TriggerItem)">
            <summary>
            Returns the associated TriggerLink for a given TriggerItem 
            may be null
            </summary>
            <param name="pTriggerItem"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierArgs.Verifier">
            <summary>
            Gets or sets the Verifier that used this VerifierArgs to instantiate it or null if the VerifierArgs has
            not been used to instantiate a Verifier yet.  No VerifierArgs can be used to instantiate more
            than a single Verifier at one time. 
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierArgs.ApplicableType">
            <summary>
            See <see cref="P:IdeaBlade.Verification.Verifier.ApplicableType"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierArgs.SortValue">
            <summary>
            See <see cref="P:IdeaBlade.Verification.Verifier.SortValue"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierArgs.Tag">
            <summary>
            Gets or sets custom data about this VerifierArgs.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierArgs.ExecutionModes">
            <summary>
            Gets or sets the conditions under which a verifier is executed.
            </summary>
            <remarks>
            The determination of when and how a verifier is executed is controlled via the 
            <see cref="P:IdeaBlade.Verification.Verifier.ExecutionModes"/> and <see cref="P:IdeaBlade.Verification.Verifier.TriggerLinks"/>
            properties on each verifier.  In general, we can think of each verifier as being executed 
            either in the context of verifying an entire object or in the more localized context of 
            a single change that affects the object.  
            <para>An example of the first would be if we wanted to verify 
            that an instance of an Employee object was completely valid before we save it and in this case 
            we might want to perform a large number of verifications on a number of individual properties 
            of the employee object in order to completely verify its correctness.  An example of the second 
            is when we are either in the process of changing or have changed the “HireDate” on an employee 
            and we only want to perform those verifications that are in some way effected by this change.  
            The latter is an example of a “Triggered” verification and the first is an example of 
            an “Instance” verification.
            </para><para>“Triggered” verifications can be further subdivided into 
            “pre” and “post” triggering categories.  A “Preset” trigger verification is one that should 
            be applied before some specific  change is actually made and a “Postset” trigger verification 
            is one where we want to execute the verification immediately after some change has occurred.   
            Any given verifier might be written in such a way as to be applicable under several of these conditions.  
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierArgs.OnErrorMode">
            <summary>
            Gets or sets whether a failure in this verifier should stop the execution of the remainder of the batch in
            which this verifier is executing.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierArgs.TriggerLinks">
            <summary>
            Gets a collection of all of the <see cref="T:IdeaBlade.Verification.TriggerItem"/>s on this verifier.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifierArgs.#ctor(System.Type,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the PropertyValueVerifierArgs class.
            </summary>
            <param name="pApplicableType"></param>
            <param name="pPropertyName">The property on the specified type to be verified</param>
            <param name="pIsRequired">Whether the property name is required or may be left null</param>
            <param name="pDisplayName">A display name for the specified property</param>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifierArgs.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the PropertyValueVerifierArgs class.
            </summary>
            <param name="pPropertyDescriptor"></param>
            <param name="pIsRequired">Whether the property name is required or may be left null</param>
            <param name="pDisplayName">A display name for the specified property</param>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifierArgs.#ctor(IdeaBlade.Verification.PropertyValueVerifierArgs)">
            <summary>
            Initializes a new instance of the PropertyValueVerifierArgs class. This is a copy constructor.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifierArgs.#ctor(IdeaBlade.Verification.VerifierElement)">
            <summary>
            Initializes a new instance of the PropertyValueVerifierArgs class.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.PropertyValueVerifierArgs.PropertyName">
            <summary>
            The name of the property being verified.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.PropertyValueVerifierArgs.DisplayName">
            <summary>
            The display name of the property being verified.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.PropertyValueVerifierArgs.IsRequired">
            <summary>
            Is this property required to have a value.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.PropertyValueVerifierArgs.PropertyDescriptor">
            <summary>
            The <see cref="P:IdeaBlade.Verification.PropertyValueVerifierArgs.PropertyDescriptor"/> for the property being verified.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.ListVerifierArgs.#ctor(System.Type,System.String,System.Boolean,System.String,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the ListVerifierArgs class.
            </summary>
            <param name="pType">Type of object being verified</param>
            <param name="pPropertyName">The property on the specified type to be verified</param>
            <param name="pIsRequired">Whether the property name is required or may be left null</param>
            <param name="pDisplayName">A display name for the specified property</param>
            <param name="pList"><see cref="T:System.Collections.IEnumerable"/> containing the list of valid entries.</param>
        </member>
        <member name="M:IdeaBlade.Verification.ListVerifierArgs.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,System.String,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the ListVerifierArgs class.
            </summary>
            <param name="pPropertyDescriptor"></param>
            <param name="pIsRequired">Whether the property name is required or may be left null</param>
            <param name="pDisplayName">A display name for the specified property</param>
            <param name="pList"><see cref="T:System.Collections.IEnumerable"/> containing the list of valid entries.</param>
        </member>
        <member name="M:IdeaBlade.Verification.ListVerifierArgs.#ctor(IdeaBlade.Verification.ListVerifierArgs)">
            <summary>
            Initializes a new instance of the ListVerifierArgs class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.ListVerifierArgs.#ctor(IdeaBlade.Verification.VerifierElement)">
            <summary>
            Initializes a new instance of the ListVerifierArgs class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="P:IdeaBlade.Verification.ListVerifierArgs.List">
            <summary>
            The list in which an item must be found in order to pass verification.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.DoubleRangeVerifier">
            <summary>
            A <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/> for properties of type Double
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.RangeVerifier`1">
            <summary>
            A <see cref="T:IdeaBlade.Verification.Verifier"/> that determines if a given property falls within a specified 
            range.
            </summary>
            <typeparam name="T">The datatype of the property that is being verified</typeparam>
            <remarks>
            Because a range can be open ended on either the minimum or maximum end of the range
            many of the constructor overloads allow setting the <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MinValue"/>
            and <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MaxValue"/> values to null.  This means that either no lower bound or no upper bound
            test will be performed during verification. Many constructor overloads also allow 
            the specification as to whether the endpoints specified should be included within the range or 
            not.  Finally, most constructors will allow for the specification at to whether if 
            a null value is encountered it should be considered an error or a completely valid value
            (implying that the specified range tests should NOT be performed). 
            </remarks>
        </member>
        <member name="M:IdeaBlade.Verification.RangeVerifier`1.#ctor(System.Type,System.String,System.Boolean,System.Nullable{`0},System.Boolean,System.Nullable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the RangeVerifier class.
            </summary>
            <param name="pApplicableType">Type of the object being verified</param>
            <param name="pPropertyName">The property on the specified type to be verified</param>
            <param name="pIsRequired">Whether the property name is required or may be left null</param>
            <param name="pMinValue">Minimum acceptable value for the property (may be null)</param>
            <param name="pIncludeMinEndpoint">Whether the min value is included as part of the range</param>
            <param name="pMaxValue">Minimum acceptable value for the property (may be null)</param>
            <param name="pIncludeMaxEndpoint">Whether the min value is included as part of the range</param>
        </member>
        <member name="M:IdeaBlade.Verification.RangeVerifier`1.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,System.Nullable{`0},System.Boolean,System.Nullable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the RangeVerifier class.
            </summary>
            <param name="pPropertyDescriptor">PropertyDescriptor that describes the specific type and 
            property being verified</param>
            <param name="pIsRequired">Whether the property name is required or may be left null</param>
            <param name="pMinValue">Minimum acceptable value for the property (may be null)</param>
            <param name="pIncludeMinEndpoint">Whether the min value is included as part of the range</param>
            <param name="pMaxValue">Minimum acceptable value for the property (may be null)</param>
            <param name="pIncludeMaxEndpoint">Whether the min value is included as part of the range</param>
        </member>
        <member name="M:IdeaBlade.Verification.RangeVerifier`1.#ctor(IdeaBlade.Verification.RangeVerifierArgs{`0})">
            <summary>
            Initializes a new instance of the RangeVerifier class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.RangeVerifier`1.VerifyValue(System.Object,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.PropertyValueVerifier.VerifyValue(System.Object,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/>
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pValueToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifier`1.Description">
            <summary>
            Gets the <see cref="P:IdeaBlade.Verification.Verifier.Description"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifier`1.MinValue">
            <summary>
            Gets or sets the minimum acceptable value for the specified property (may be null).
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifier`1.MaxValue">
            <summary>
            Gets or sets the maximum acceptable value for the specified property (may be null).
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifier`1.IncludeMinEndpoint">
            <summary>
            Gets or sets whether the <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MinValue"/> is included as part of the range.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifier`1.IncludeMaxEndpoint">
            <summary>
            Gets or sets whether the <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MaxValue"/> value is included as part of the range.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifier`1.MinValueResource">
            <summary>
            Gets a resource string used to describe the <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MinValue"/> constraint when 
            <see cref="P:IdeaBlade.Verification.RangeVerifier`1.IncludeMinEndpoint"/> is true.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifier`1.MaxValueResource">
            <summary>
            Gets a resource string used to describe the <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MaxValue"/> constraint when 
            <see cref="P:IdeaBlade.Verification.RangeVerifier`1.IncludeMaxEndpoint"/> is true.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifier`1.MinValueExclusiveResource">
            <summary>
            Gets a resource string used to describe the <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MinValue"/> constraint when 
            <see cref="P:IdeaBlade.Verification.RangeVerifier`1.IncludeMinEndpoint"/> is false.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifier`1.MaxValueExclusiveResource">
            <summary>
            Gets a resource string used to describe the <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MaxValue"/> constraint when 
            <see cref="P:IdeaBlade.Verification.RangeVerifier`1.IncludeMaxEndpoint"/> is false.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifier`1.TypedVerifierArgs">
            <summary>
            Gets the strongly typed version of VerifierArgs.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.DoubleRangeVerifier.#ctor(System.Type,System.String,System.Boolean,System.Nullable{System.Double},System.Boolean,System.Nullable{System.Double},System.Boolean)">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pApplicableType"></param>
            <param name="pPropertyName"></param>
            <param name="pIsRequired"></param>
            <param name="pMinValue"></param>
            <param name="pIncludeMinEndpoint"></param>
            <param name="pMaxValue"></param>
            <param name="pIncludeMaxEndpoint"></param>
        </member>
        <member name="M:IdeaBlade.Verification.DoubleRangeVerifier.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,System.Nullable{System.Double},System.Boolean,System.Nullable{System.Double},System.Boolean)">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pDescriptor"></param>
            <param name="pIsRequired"></param>
            <param name="pMinValue"></param>
            <param name="pIncludeMinEndpoint"></param>
            <param name="pMaxValue"></param>
            <param name="pIncludeMaxEndpoint"></param>
        </member>
        <member name="M:IdeaBlade.Verification.DoubleRangeVerifier.#ctor(IdeaBlade.Verification.RangeVerifierArgs{System.Double})">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="T:IdeaBlade.Verification.DoubleRangeVerifierAttribute">
            <summary>
            VerifierAttribute class that corresponds to the <see cref="T:IdeaBlade.Verification.DoubleRangeVerifier"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.RangeVerifierAttribute">
            <summary>
            Base class for all RangeVerifierAttribute subclasses.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.PropertyValueVerifierAttribute">
            <summary>
            Attribute class that allows description of a PropertyValueVerifier via an Attribute.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierAttribute">
            <summary>
            Base class for a VerifierAttribute subclasses. Every Verifier that can or needs to be specified
            via an attribute on some property must have a corresponding VerifierAttribute subclass.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierAttribute.BuildVerifier(System.Type,System.String)">
            <summary>
            Build a Verifier given a declaring type and a property name.
            This method is a template method that depends on each any subclass of 
            the VerifierAttribute to provide a <see cref="M:IdeaBlade.Verification.VerifierAttribute.BuildVerifierCore(System.Type,System.String)"/> implementation.
            </summary>
            <param name="pDeclaringType"></param>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierAttribute.BuildVerifierCore(System.Type,System.String)">
            <summary>
            Abstract method that must be implemented on each VerifierAttribute subclass.
            </summary>
            <param name="pDeclaringType"></param>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierAttribute.SortValue">
            <summary>
            See <see cref="P:IdeaBlade.Verification.VerifierArgs.SortValue"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierAttribute.Tag">
            <summary>
            See <see cref="P:IdeaBlade.Verification.VerifierArgs.Tag"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierAttribute.ExecutionModes">
            <summary>
            See <see cref="P:IdeaBlade.Verification.Verifier.ExecutionModes"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifierAttribute.#ctor">
            <summary>
            Initializes a new instance of the PropertyValueVerifierAttribute class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifierAttribute.GetIsRequired">
            <summary>
            Properties on attribute classes cannot return a value of null so this  
            method is used instead to get the actual IsRequired value
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.PropertyValueVerifierAttribute.DisplayName">
            <summary>
            See <see cref="P:IdeaBlade.Verification.PropertyValueVerifier.DisplayName"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.PropertyValueVerifierAttribute.IsRequired">
            <summary>
            See <see cref="P:IdeaBlade.Verification.PropertyValueVerifier.IsRequired"/>
            </summary>
            <remarks>
            Properties on attribute classes cannot return a value of null so use GetIsRequired() 
            method to get the actual IsRequired value
            </remarks>
        </member>
        <member name="M:IdeaBlade.Verification.RangeVerifierAttribute.BuildVerifierCore``2(System.Type,System.String)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.VerifierAttribute.BuildVerifierCore(System.Type,System.String)"/>
            </summary>
            <typeparam name="TVerifier"></typeparam>
            <typeparam name="TDataType"></typeparam>
            <param name="pApplicableType"></param>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.RangeVerifierAttribute.GetMinValue">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MinValue"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.RangeVerifierAttribute.GetMaxValue">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MaxValue"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifierAttribute.IsRequired">
            <summary>
            See <see cref="P:IdeaBlade.Verification.PropertyValueVerifier.IsRequired"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifierAttribute.IncludeMinEndpoint">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.IncludeMinEndpoint"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifierAttribute.IncludeMaxEndpoint">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.IncludeMaxEndpoint"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifierAttribute.MinValueCore">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MinValue"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifierAttribute.MaxValueCore">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MaxValue"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.DoubleRangeVerifierAttribute.#ctor">
            <summary>
            Initializes a new instance of the DoubleRangeVerifierAttribute class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.DoubleRangeVerifierAttribute.BuildVerifierCore(System.Type,System.String)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.RangeVerifierAttribute.BuildVerifierCore``2(System.Type,System.String)"/>
            </summary>
            <param name="pApplicableType"></param>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.DoubleRangeVerifierAttribute.MinValue">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MinValue"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.DoubleRangeVerifierAttribute.MaxValue">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MaxValue"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierArgElement">
            <summary>
            Represents a <code>&lt;verifierArg&gt;</code> element within a configuration file.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierArgElement.Name">
            <summary>Gets the Name setting.</summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierArgElement.Value">
            <summary>Gets the Value setting.</summary>
        </member>
        <member name="T:IdeaBlade.Verification.Verifier`1">
            <summary>
            Strongly typed subclass of <see cref="T:IdeaBlade.Verification.Verifier"/> where "T" is the type of 
            the class being verified.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier`1.#ctor(IdeaBlade.Verification.VerifierArgs)">
            <summary>
            Initializes a new instance of the this class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier`1.IsApplicable(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.Verifier.IsApplicable(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/>.
            When extending this class the <see cref="M:IdeaBlade.Verification.Verifier`1.IsApplicableTyped(`0,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> method should be overridden in
            order perform applicability testing.  This method should NOT be overridden.
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier`1.Verify(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.Verifier.Verify(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/>.
            When extending this class the <see cref="M:IdeaBlade.Verification.Verifier`1.VerifyTyped(`0,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> method should be overridden in
            order perform "typed" verification.  This method should NOT be overridden.
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier`1.IsApplicableTyped(`0,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.Verifier.IsApplicable(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/>.
            Override this method in any subclasses to peform applicability testing.
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.Verifier`1.VerifyTyped(`0,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.Verifier.Verify(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/>.
            Override this method in any subclasses to peform verification logic.
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Verification.RegexVerifier">
            <summary>
            A <see cref="T:IdeaBlade.Verification.Verifier"/> that determines if a given property matches a
            predefined regular expression pattern. 
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.RegexVerifier.#ctor(System.Type,System.String,System.Boolean,IdeaBlade.Verification.NamedRegexPattern)">
            <summary>
             Initializes a new instance of the RegexVerifier class.
            </summary>
            <param name="pType"></param>
            <param name="pPropertyName"></param>
            <param name="pIsRequired"></param>
            <param name="pRegexPattern"></param>
        </member>
        <member name="M:IdeaBlade.Verification.RegexVerifier.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,IdeaBlade.Verification.NamedRegexPattern)">
            <summary>
            Initializes a new instance of the RegexVerifier class.
            </summary>
            <param name="pPropertyDescriptor"></param>
            <param name="pIsRequired"></param>
            <param name="pRegexPattern"></param>
        </member>
        <member name="M:IdeaBlade.Verification.RegexVerifier.#ctor(IdeaBlade.Verification.RegexVerifierArgs)">
            <summary>
            Initializes a new instance of the RegexVerifier class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.RegexVerifier.VerifyValue(System.Object,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.PropertyValueVerifier.VerifyValue(System.Object,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/>
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pValueToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.RegexVerifier.NamedRegexPattern">
            <summary>
            Gets a regular expression pattern that must be matched in
            order to return successful verification.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RegexVerifier.Description">
            <summary>
            See <see cref="P:IdeaBlade.Verification.Verifier.Description"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RegexVerifier.TypedVerifierArgs">
            <summary>
            Gets the strongly typed version of <see cref="P:IdeaBlade.Verification.Verifier.VerifierArgs"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.RegexVerifierArgs">
            <summary>
            Subclass of <see cref="T:IdeaBlade.Verification.VerifierArgs"/> used to construct a <see cref="T:IdeaBlade.Verification.Verifier"/> that 
            determines if a given property matches a predefined regular expression pattern. 
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.RegexVerifierArgs.#ctor(System.Type,System.String,System.Boolean,System.String,IdeaBlade.Verification.NamedRegexPattern)">
            <summary>
            Initializes a new instance of the RegexVerifierArgs class.
            </summary>
            <param name="pType">Type of object being verified</param>
            <param name="pPropertyName">The property on the specified type to be verified</param>
            <param name="pIsRequired">Whether the property name is required or may be left null</param>
            <param name="pDisplayName">A display name for the specified property</param>
            <param name="pNamedRegexPattern"> regular expression pattern that must be matched in
            order to return successful verification</param>
        </member>
        <member name="M:IdeaBlade.Verification.RegexVerifierArgs.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,System.String,IdeaBlade.Verification.NamedRegexPattern)">
            <summary>
            Initializes a new instance of the RegexVerifierArgs class.
            </summary>
            <param name="pPropertyDescriptor"></param>
            <param name="pIsRequired">Whether the property name is required or may be left null</param>
            <param name="pDisplayName">A display name for the specified property</param>
            <param name="pNamedRegexPattern">A regular expression pattern that must be matched in
            order to return successful verification</param>
        </member>
        <member name="M:IdeaBlade.Verification.RegexVerifierArgs.#ctor(IdeaBlade.Verification.RegexVerifierArgs)">
            <summary>
            Initializes a new instance of the RegexVerifier class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.RegexVerifierArgs.#ctor(IdeaBlade.Verification.VerifierElement)">
            <summary>
            Initializes a new instance of the RegexVerifier class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="P:IdeaBlade.Verification.RegexVerifierArgs.NamedRegexPattern">
            <summary>
            Gets a regular expression pattern that must be matched in
            order to return successful verification.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RegexVerifierArgs.RegexDisplayName">
            <summary>
            Gets the display name for the Regular expression pattern.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RegexVerifierArgs.Regex">
            <summary>
            Gets the Regex underlying the <see cref="P:IdeaBlade.Verification.RegexVerifierArgs.NamedRegexPattern"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.RegexVerifierAttribute">
            <summary>
            Attribute for defining a <see cref="T:IdeaBlade.Verification.RegexVerifier"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.RegexVerifierAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the RegexVerifierAttribute class.
            </summary>
            <param name="pDisplayName"></param>
            <param name="pPattern"></param>
        </member>
        <member name="M:IdeaBlade.Verification.RegexVerifierAttribute.BuildVerifierCore(System.Type,System.String)">
            <summary>
            <see cref="M:IdeaBlade.Verification.VerifierAttribute.BuildVerifierCore(System.Type,System.String)"/>.
            </summary>
            <param name="pType"></param>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.RegexVerifierAttribute.NamedPattern">
            <summary>
            The <see cref="T:IdeaBlade.Verification.NamedRegexPattern"/>that must be matched in
            order to return successful verification
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.Int64RangeVerifier">
            <summary>
            A <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/> for properties of type Int64
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.Int64RangeVerifier.#ctor(System.Type,System.String,System.Boolean,System.Nullable{System.Int64},System.Boolean,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pApplicableType"></param>
            <param name="pPropertyName"></param>
            <param name="pIsRequired"></param>
            <param name="pMinValue"></param>
            <param name="pIncludeMinEndpoint"></param>
            <param name="pMaxValue"></param>
            <param name="pIncludeMaxEndpoint"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Int64RangeVerifier.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,System.Nullable{System.Int64},System.Boolean,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pDescriptor"></param>
            <param name="pIsRequired"></param>
            <param name="pMinValue"></param>
            <param name="pIncludeMinEndpoint"></param>
            <param name="pMaxValue"></param>
            <param name="pIncludeMaxEndpoint"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Int64RangeVerifier.#ctor(IdeaBlade.Verification.RangeVerifierArgs{System.Int64})">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="T:IdeaBlade.Verification.Int64RangeVerifierAttribute">
            <summary>
            VerifierAttribute class that corresponds to the <see cref="T:IdeaBlade.Verification.Int64RangeVerifier"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.Int64RangeVerifierAttribute.#ctor">
            <summary>
            Initializes a new instance of the Int64RangeVerifierAttribute class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.Int64RangeVerifierAttribute.BuildVerifierCore(System.Type,System.String)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.RangeVerifierAttribute.BuildVerifierCore``2(System.Type,System.String)"/>
            </summary>
            <param name="pApplicableType"></param>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.Int64RangeVerifierAttribute.MinValue">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MinValue"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.Int64RangeVerifierAttribute.MaxValue">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MaxValue"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierExecutionModes">
            <summary>
            VerifierExecutionModes is an enum that is used to control when and how any given
            verifier is executed.
            </summary>
            <remarks>
            The determination of when and how a verifier is executed is controlled via the 
            <see cref="P:IdeaBlade.Verification.Verifier.ExecutionModes"/> and <see cref="P:IdeaBlade.Verification.Verifier.TriggerLinks"/>
            properties on each verifier.  In general, we can think of each verifier as being executed 
            either in the context of verifying an entire object or in the more localized context of 
            a single change that affects the object.  
            <para>An example of the first would be if we wanted to verify 
            that an instance of an Employee object was completely valid before we save it and in this case 
            we might want to perform a large number of verifications on a number of individual properties 
            of the employee object in order to completely verify its correctness.  An example of the second 
            is when we are either in the process of changing or have changed the “HireDate” on an employee 
            and we only want to perform those verifications that are in some way effected by this change.  
            The latter is an example of a “Triggered” verification and the first is an example of 
            an “Instance” verification.
            </para><para>“Triggered” verifications can be further subdivided into 
            “pre” and “post” triggering categories.  A “Preset” trigger verification is one that should 
            be applied before some specific  change is actually made and a “Postset” trigger verification 
            is one where we want to execute the verification immediately after some change has occurred.   
            Any given verifier might be written in such a way as to be applicable under several of these conditions.  
            </para>
            </remarks>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierExecutionModes.Disabled">
            <summary>
            Disabled - verifiers with this exection mode will not be executed
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierExecutionModes.Instance">
            <summary>
            Verifiers with this mode will be called for any Instance verifications
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierExecutionModes.OnPresetTriggers">
            <summary>
            Verifiers with this mode will be called for any pre-set trigger verifications
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierExecutionModes.OnPostsetTriggers">
            <summary>
            Verifiers with this mode will be called for any post-set trigger verifications
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierExecutionModes.InstanceAndOnPresetTriggers">
            <summary>
            Verifiers with this mode will be called for any Instance verifications and any pre-set trigger verifications
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierExecutionModes.InstanceAndOnPostsetTriggers">
            <summary>
            Verifiers with this mode will be called for any Instance verifications and any post-set trigger verifications
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierExecutionModes.All">
            <summary>
            Verifiers with this mode will be called for all verifications
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierOnErrorMode">
            <summary>
            The VerifierOnErrorMode may be used to terminate the execution of the 
            batch by setting the <see cref="P:IdeaBlade.Verification.VerifierContext.OnErrorMode"/> property to 
            <see cref="F:IdeaBlade.Verification.VerifierOnErrorMode.Stop"/> and returning an “errant” <see cref="T:IdeaBlade.Verification.VerifierResult"/>.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierOnErrorMode.Stop">
            <summary>
            Stop verification as soon as an error is encountered
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierOnErrorMode.Continue">
            <summary>
            Continue verification even if an error is encountered (the default).
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierContext">
            <summary>
            The context under which a specific VerifierEngine.Execute method call will run.
            </summary>
            <remarks>
            The VerifierContext provides several facilities.  First, it may be used to pass custom context information 
            into a <see cref="P:IdeaBlade.Verification.VerifierContext.Verifier"/> via the <see cref="P:IdeaBlade.Verification.VerifierContext.CustomContext"/> property. It may also be used within the verifier
            to see the results of any previously executed verifiers within the current <see cref="P:IdeaBlade.Verification.VerifierContext.VerifierEngine"/> batch via the 
            <see cref="P:IdeaBlade.Verification.VerifierContext.VerifierResults"/> property.  A batch is defined as the list of all of the verifiers executing within a 
            single VerifierEngine.Execute method call.  The <see cref="T:IdeaBlade.Verification.VerifierOnErrorMode"/> may be used to terminate the execution 
            of the batch by setting the <see cref="P:IdeaBlade.Verification.VerifierContext.OnErrorMode"/> property to <see cref="F:IdeaBlade.Verification.VerifierOnErrorMode.Stop"/> and returning 
            an “errant” <see cref="T:IdeaBlade.Verification.VerifierResult"/>. Lastly, the <see cref="P:IdeaBlade.Verification.VerifierContext.BatchContext"/> property may be used to build up 
            any cumulative data that we want passed to the next verifier within the current batch.  
            The first verifier in a batch will always receive a null BatchContext.
            <para>
            The default VerifierContext that is provided by the VerifierEngine when no explicit VerifierContext
            is specified is constructed automatically by the engine using the 
            <see cref="P:IdeaBlade.Verification.VerifierEngine.DefaultOnErrorMode"/> and <see cref="P:IdeaBlade.Verification.VerifierEngine.DefaultCustomContext"/> 
            properties on the <see cref="P:IdeaBlade.Verification.VerifierContext.VerifierEngine"/>.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierContext.#ctor(IdeaBlade.Verification.VerifierOnErrorMode,System.Object)">
            <summary>
            Initializes a new instance of the VerifierContext class.
            </summary>
            <param name="pOnErrorMode"></param>
            <param name="pCustomContext"></param>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierContext.BatchId">
            <summary>
            Gets a unique identifier that identifies the batch within which this VerifierContext is operating.
            A batch is defined as the list of all of the verifiers executing within a 
            single VerifierEngine.Execute method call
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierContext.EndOfBatch">
            <summary>
            Gets or sets whether the end of the current batch has been reached.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierContext.OnErrorMode">
            <summary>
            Gets or sets the mode used to terminate the execution of the current batch by setting this property to 
            <see cref="F:IdeaBlade.Verification.VerifierOnErrorMode.Stop"/> and returning an “errant” <see cref="T:IdeaBlade.Verification.VerifierResult"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierContext.VerifierEngine">
            <summary>
            Gets or sets the <see cref="P:IdeaBlade.Verification.VerifierContext.VerifierEngine"/> under which this VerifierContext is operating.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierContext.Verifier">
            <summary>
            Gets or sets the currently executing <see cref="P:IdeaBlade.Verification.VerifierContext.Verifier"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierContext.VerifierResults">
            <summary>
            Gets or sets the results of any previously executed verifiers 
            within the current <see cref="P:IdeaBlade.Verification.VerifierContext.VerifierEngine"/> batch.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierContext.BatchContext">
            <summary>
            Gets or sets the updatable context passed to each verifier in a batch. In turn
            this can be used to pass information from one verifier to another in a batch.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierContext.CustomContext">
            <summary>
            Gets or sets the custom data to be passed to each verifier in this batch.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.Int32RangeVerifier">
            <summary>
            A <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/> for properties of type Int32
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.Int32RangeVerifier.#ctor(System.Type,System.String,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pApplicableType"></param>
            <param name="pPropertyName"></param>
            <param name="pIsRequired"></param>
            <param name="pMinValue"></param>
            <param name="pMaxValue"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Int32RangeVerifier.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pDescriptor"></param>
            <param name="pIsRequired"></param>
            <param name="pMinValue"></param>
            <param name="pMaxValue"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Int32RangeVerifier.#ctor(System.Type,System.String,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pApplicableType"></param>
            <param name="pPropertyName"></param>
            <param name="pIsRequired"></param>
            <param name="pMinValue"></param>
            <param name="pIncludeMinEndpoint"></param>
            <param name="pMaxValue"></param>
            <param name="pIncludeMaxEndpoint"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Int32RangeVerifier.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pDescriptor"></param>
            <param name="pIsRequired"></param>
            <param name="pMinValue"></param>
            <param name="pIncludeMinEndpoint"></param>
            <param name="pMaxValue"></param>
            <param name="pIncludeMaxEndpoint"></param>
        </member>
        <member name="M:IdeaBlade.Verification.Int32RangeVerifier.#ctor(IdeaBlade.Verification.RangeVerifierArgs{System.Int32})">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="T:IdeaBlade.Verification.Int32RangeVerifierAttribute">
            <summary>
            VerifierAttribute class that corresponds to the <see cref="T:IdeaBlade.Verification.Int32RangeVerifier"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.Int32RangeVerifierAttribute.#ctor">
            <summary>
            Initializes a new instance of the Int32RangeVerifierAttribute class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.Int32RangeVerifierAttribute.BuildVerifierCore(System.Type,System.String)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.RangeVerifierAttribute.BuildVerifierCore``2(System.Type,System.String)"/>
            </summary>
            <param name="pApplicableType"></param>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.Int32RangeVerifierAttribute.MinValue">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MinValue"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.Int32RangeVerifierAttribute.MaxValue">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MaxValue"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.DateTimeRangeVerifier">
            <summary>
            A <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/> for properties of type DateTime
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.DateTimeRangeVerifier.#ctor(System.Type,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pApplicableType"></param>
            <param name="pPropertyName"></param>
            <param name="pIsRequired"></param>
            <param name="pMinValue"></param>
            <param name="pMaxValue"></param>
        </member>
        <member name="M:IdeaBlade.Verification.DateTimeRangeVerifier.#ctor(System.Type,System.String,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pApplicableType"></param>
            <param name="pPropertyName"></param>
            <param name="pIsRequired"></param>
            <param name="pMinValue"></param>
            <param name="pIncludeMinEndpoint"></param>
            <param name="pMaxValue"></param>
            <param name="pIncludeMaxEndpoint"></param>
        </member>
        <member name="M:IdeaBlade.Verification.DateTimeRangeVerifier.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pDescriptor"></param>
            <param name="pIsRequired"></param>
            <param name="pMinValue"></param>
            <param name="pMaxValue"></param>
        </member>
        <member name="M:IdeaBlade.Verification.DateTimeRangeVerifier.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pDescriptor"></param>
            <param name="pIsRequired"></param>
            <param name="pMinValue"></param>
            <param name="pIncludeMinEndpoint"></param>
            <param name="pMaxValue"></param>
            <param name="pIncludeMaxEndpoint"></param>
        </member>
        <member name="M:IdeaBlade.Verification.DateTimeRangeVerifier.#ctor(IdeaBlade.Verification.RangeVerifierArgs{System.DateTime})">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="P:IdeaBlade.Verification.DateTimeRangeVerifier.MinValueResource">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MinValueResource"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.DateTimeRangeVerifier.MaxValueResource">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MaxValueResource"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.DateTimeRangeVerifier.MinValueExclusiveResource">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MinValueExclusiveResource"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.DateTimeRangeVerifier.MaxValueExclusiveResource">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MaxValueExclusiveResource"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.DateTimeRangeVerifierAttribute">
            <summary>
            VerifierAttribute class that corresponds to the <see cref="T:IdeaBlade.Verification.DateTimeRangeVerifier"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.DateTimeRangeVerifierAttribute.#ctor">
            <summary>
            Initializes a new instance of the DateTimeRangeVerifierAttribute class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.DateTimeRangeVerifierAttribute.BuildVerifierCore(System.Type,System.String)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.RangeVerifierAttribute.BuildVerifierCore``2(System.Type,System.String)"/>
            </summary>
            <param name="pApplicableType"></param>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.DateTimeRangeVerifierAttribute.MinValue">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MinValue"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.DateTimeRangeVerifierAttribute.MaxValue">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MaxValue"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifiersChangedType">
            <summary>
            Used to describe the kind of change that occurred to the verifiers in a <see cref="T:IdeaBlade.Verification.VerifierEngine"/>.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifiersChangedType.VerifierAdded">
            <summary>
            A verifier was added to the engine.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifiersChangedType.VerifierRemoved">
            <summary>
            A verifier was removed from the engine.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifiersChangedType.TriggerAdded">
            <summary>
            A trigger was added to an existing verifier.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifiersChangedType.TriggerRemoved">
            <summary>
            A trigger was removed from an existing verifier.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifiersChangedEventArgs">
            <summary>
            Provides data to the <see cref="E:IdeaBlade.Verification.VerifierEngine.VerifiersChanged"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifiersChangedEventArgs.#ctor(IdeaBlade.Verification.VerifiersChangedType,IdeaBlade.Verification.Verifier)">
            <summary>
            Initializes a new instance of the VerifiersChangedEventArgs class.
            </summary>
            <param name="pChangedType"></param>
            <param name="pVerifier"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifiersChangedEventArgs.#ctor(IdeaBlade.Verification.VerifiersChangedType,IdeaBlade.Verification.Verifier,IdeaBlade.Verification.TriggerItem)">
            <summary>
            Initializes a new instance of the VerifiersChangedEventArgs class.
            </summary>
            <param name="pChangedType"></param>
            <param name="pVerifier"></param>
            <param name="pTrigger"></param>
        </member>
        <member name="P:IdeaBlade.Verification.VerifiersChangedEventArgs.VerifiersChangedType">
            <summary>
            Gets the kind of change that occurred.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifiersChangedEventArgs.Verifier">
            <summary>
            Gets or sets the <see cref="P:IdeaBlade.Verification.VerifiersChangedEventArgs.Verifier"/> about which this event was fired.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifiersChangedEventArgs.Trigger">
            <summary>
            Gets or sets the <see cref="T:IdeaBlade.Verification.TriggerItem"/> about which this event was fired. May be null.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierResult">
            <summary>
            Encapsulates information about the results of a call to <see cref="M:IdeaBlade.Verification.VerificationEngine.Execute"/>.
            This class will likely be extended in future releases of IdeaBlade.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the VerifierResult class.
            </summary>
            <remarks>
            Creates a VerifierResult with a <see cref="T:IdeaBlade.Verification.VerifierResultCode"/> of either 
            <see cref="F:IdeaBlade.Verification.VerifierResultCode.Ok"/> or <see cref="F:IdeaBlade.Verification.VerifierResultCode.Error"/>
            and an empty Description.
            </remarks>
            <param name="pOk">Translates to either <see cref="F:IdeaBlade.Verification.VerifierResultCode.Ok"/> or <see cref="F:IdeaBlade.Verification.VerifierResultCode.Error"/></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResult.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the VerifierResult class.
            </summary>
            /// <remarks>
            Creates a VerifierResult with a <see cref="T:IdeaBlade.Verification.VerifierResultCode"/> of either 
            <see cref="F:IdeaBlade.Verification.VerifierResultCode.Ok"/> or <see cref="F:IdeaBlade.Verification.VerifierResultCode.Error"/>
            and an empty Description.
            </remarks>
            <param name="pOk">Translates to either <see cref="F:IdeaBlade.Verification.VerifierResultCode.Ok"/> or <see cref="F:IdeaBlade.Verification.VerifierResultCode.Error"/></param>
            <param name="pDescription">A description of this VerifierResult</param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResult.#ctor(IdeaBlade.Verification.VerifierResultCode)">
            <summary>
            Initializes a new instance of the VerifierResult class.
            </summary>
            <param name="pCode"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResult.#ctor(IdeaBlade.Verification.VerifierResultCode,System.String)">
            <summary>
            Initializes a new instance of the VerifierResult class.
            </summary>
            <param name="pCode"></param>
            <param name="pDescription"></param>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResult.ResultCode">
            <summary>
            Gets the <see cref="T:IdeaBlade.Verification.VerifierResultCode"/> associated with this <see cref="T:IdeaBlade.Verification.VerifierResult"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResult.Verifier">
            <summary>
            Gets or sets the <see cref="P:IdeaBlade.Verification.VerifierResult.Verifier"/> that was executed to get this result. 
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResult.VerifierContext">
            <summary>
            Gets or sets the relevant <see cref="P:IdeaBlade.Verification.VerifierResult.VerifierContext"/> for this result.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResult.TriggerContext">
            <summary>
            Gets or sets the relevant <see cref="P:IdeaBlade.Verification.VerifierResult.TriggerContext"/> for this result.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResult.TargetInstance">
            <summary>
            Gets or sets the object instance that is the subject of this result.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResult.Description">
            <summary>
            Gets the description of this result.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResult.IsOk">
            <summary>
            Gets whether this is a successful result.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResult.IsError">
            <summary>
            Gets whether this is an "errant" result.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResult.IsWarning">
            <summary>
            Gets whether this is a "warning" result.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResult.IsNotApplicable">
            <summary>
            Gets whether this result is not applicable.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResult.IsInsufficientData">
            <summary>
            Gets whether this an errant result as a result of insufficient data.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.TriggerTiming">
            <summary>
            The timing of a <see cref="T:IdeaBlade.Verification.TriggerItem"/> "event".  Used to determine
            whether a verification should be executed immediatly before a
            TriggerItem occurs or immediately after.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.TriggerTiming.Postset">
            <summary>
            Perform verification after any <see cref="T:IdeaBlade.Verification.TriggerItem"/> "event" has occured.
            Usually used in reference to a property setter.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.TriggerTiming.Preset">
            <summary>
            Perform verification before any <see cref="T:IdeaBlade.Verification.TriggerItem"/> "event" has occured.
            Usually used in reference to a property setter.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.TriggerTargetNavigator">
            <summary>
            A delegate that allows navigation from a <see cref="T:IdeaBlade.Verification.TriggerItem"/>
            back to the object being verified.
            </summary>
            <param name="pInstance"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Verification.TriggerLink">
            <summary>
            A combination of a TriggerItem and a "navigation path" that describes the path from the "triggering item" back
            to the object being verified. This "navigation" path may be described via a .NET property path or property description 
            or via a delegate.
            </summary>
            <remarks>
            <see cref="P:IdeaBlade.Verification.TriggerLink.TriggerItem"/>s need not be defined on the same type of object that a verification is actually being 
            defined upon.  For example, verification logic on a Customer might be best triggered as a result of some change 
            to the OrderDetail.ListPrice associated with an  Order, which is in turn associated with the Customer. 
            In this case, while a <see cref="P:IdeaBlade.Verification.TriggerLink.TriggerItem"/> is sufficient to indicate the operation that should cause the verifier to 
            execute, we also need some mechanism to indicate the “navigation path” between the object on which the 
            TriggerItem occurs and the object that is being verified.   The combination of a TriggerItem and this navigation
            path is termed a TriggerLink.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Verification.TriggerLink.#ctor(IdeaBlade.Verification.TriggerItem,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the TriggerLink class.
            </summary>
            <param name="pTriggerItem"></param>
            <param name="pTriggerItemToTargetNavigationPath"></param>
            <param name="pReturnsMultipleTargets"></param>
        </member>
        <member name="M:IdeaBlade.Verification.TriggerLink.#ctor(IdeaBlade.Verification.TriggerItem,System.ComponentModel.PropertyDescriptor,System.Boolean)">
            <summary>
            Initializes a new instance of the TriggerLink class.
            </summary>
            <param name="pTriggerItem"></param>
            <param name="pTriggerItemToTargetDescriptor"></param>
            <param name="pReturnsMultipleTargets"></param>
        </member>
        <member name="M:IdeaBlade.Verification.TriggerLink.#ctor(System.ComponentModel.PropertyDescriptor,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the TriggerLink class.
            </summary>
            <param name="pTriggerItemDescriptor"></param>
            <param name="pTriggerItemToTargetNavigationPath"></param>
            <param name="pReturnsMultipleTargets"></param>
        </member>
        <member name="M:IdeaBlade.Verification.TriggerLink.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.PropertyDescriptor,System.Boolean)">
            <summary>
            Initializes a new instance of the TriggerLink class.
            </summary>
            <param name="pTriggerItemDescriptor"></param>
            <param name="pTriggerItemToTargetDescriptor"></param>
            <param name="pReturnsMultipleTargets"></param>
        </member>
        <member name="M:IdeaBlade.Verification.TriggerLink.#ctor(IdeaBlade.Verification.TriggerItem,IdeaBlade.Verification.TriggerTargetNavigator,System.Boolean)">
            <summary>
            Initializes a new instance of the TriggerLink class.
            </summary>
            <param name="pTriggerItem"></param>
            <param name="pTriggerTargetNavigator"></param>
            <param name="pReturnsMultipleTargets"></param>
        </member>
        <member name="M:IdeaBlade.Verification.TriggerLink.#ctor(System.ComponentModel.PropertyDescriptor,IdeaBlade.Verification.TriggerTargetNavigator,System.Boolean)">
            <summary>
            Initializes a new instance of the TriggerLink class.
            </summary>
            <param name="pTriggerItemDescriptor"></param>
            <param name="pTriggerTargetNavigator"></param>
            <param name="pReturnsMultipleTargets"></param>
        </member>
        <member name="M:IdeaBlade.Verification.TriggerLink.GetTarget(System.Object)">
            <summary>
            Returns the target or targets of this link.  The targets are the objects on which the verifiers will be executed.
            </summary>
            <param name="pSourceInstance"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.TriggerLink.TriggerItem">
            <summary>
            Gets the TriggerItem underlying this link.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.TriggerLink.TargetNavigator">
            <summary>
            Gets the <see cref="T:IdeaBlade.Verification.TriggerTargetNavigator"/> for this link.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.TriggerLink.ReturnsMultipleTargets">
            <summary>
            Gets whether the <see cref="M:IdeaBlade.Verification.TriggerLink.GetTarget(System.Object)"/> method returns a single object or multiple objects. (if 
            true then the <see cref="M:IdeaBlade.Verification.TriggerLink.GetTarget(System.Object)"/> method must return some instance that implements IEnumerable)
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierResultCollection">
            <summary>
            Encapsulates information about the results of a call to <see cref="M:IdeaBlade.Verification.VerifierEngine.Execute">VerifierEngine.Execute</see>.
            This class will likely be extended in future releases of IdeaBlade.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResultCollection.#ctor">
            <summary>
            Initializes a new instance of the VerifierResultCollection class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResultCollection.#ctor(IdeaBlade.Verification.VerifierResultCollection)">
            <summary>
            Initializes a new instance of the VerifierResultCollection class. This is a copy constructor.
            </summary>
            <param name="pVerifierResultCollection"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResultCollection.#ctor(System.Collections.Generic.IEnumerable{IdeaBlade.Verification.VerifierResult})">
            <summary>
            Initializes a new instance of the VerifierResultCollection given the collection of VerifierResults.
            </summary>
            <param name="pResults"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResultCollection.GetFirstErrorDescription">
            <summary>
            Returns a description of the first <see cref="T:IdeaBlade.Verification.VerifierResult"/> that is an error.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResultCollection.FindAll(IdeaBlade.Verification.VerifierResultCode[])">
            <summary>
            Returns all of the <see cref="T:IdeaBlade.Verification.VerifierResult"/>s that match one of the specified VerifierResults.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResultCollection.FindAll(System.Predicate{IdeaBlade.Verification.VerifierResult})">
            <summary>
            Returns all of the <see cref="T:IdeaBlade.Verification.VerifierResult"/>s that satisfy the specified predicate.
            </summary>
            <param name="pPredicate"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResultCollection.FindAll(System.Type,System.Type,System.String)">
            <summary>
            Returns all of the <see cref="T:IdeaBlade.Verification.VerifierResult"/>s that satisfy the specified applicable type, verifier type and property name.
            Note that any or all of these parameters can be null.
            </summary>
            <param name="pApplicableType"></param>
            <param name="pVerifierType"></param>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResultCollection.Find(System.Predicate{IdeaBlade.Verification.VerifierResult})">
            <summary>
            Returns the first <see cref="T:IdeaBlade.Verification.VerifierResult"/> that satisfies the specified predicate or null if none found.
            </summary>
            <param name="pPredicate"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResultCollection.Find(System.Type,System.Type,System.String)">
            <summary>
            Returns the first <see cref="T:IdeaBlade.Verification.VerifierResult"/> that satisfies the specified applicable type, verifier 
            type and property name or null if none found.
            Note that any or all of these parameters can be null.
            </summary>
            <param name="pApplicableType"></param>
            <param name="pVerifierType"></param>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierResultCollection.Find(IdeaBlade.Verification.Verifier)">
            <summary>
            Returns a specific <see cref="T:IdeaBlade.Verification.VerifierResult"/> that contains the specified <see cref="T:IdeaBlade.Verification.Verifier"/>
            </summary>
            <param name="pVerifier"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResultCollection.VerifierCode">
            <summary>
            Gets the "composite" result of all of the VerifierResultCodes of all of the VerifierResults within this collection.
            Possible return values are <see cref="F:IdeaBlade.Verification.VerifierResultCode.Ok"/>, <see cref="F:IdeaBlade.Verification.VerifierResultCode.Error"/>
            or <see cref="F:IdeaBlade.Verification.VerifierResultCode.ErrorInsufficientData"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResultCollection.AreOk">
            <summary>
            Gets whether this is a successful Verifier result.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResultCollection.LastResult">
            <summary>
            Gets the last <see cref="T:IdeaBlade.Verification.VerifierResult"/> in this collection.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResultCollection.Errors">
            <summary>
            Gets all of the <see cref="T:IdeaBlade.Verification.VerifierResult"/>s that are errors.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierResultCollection.Warnings">
            <summary>
            Gets all of the <see cref="T:IdeaBlade.Verification.VerifierResult"/>s that are Warnings.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierEngine">
            <summary>
            The VerifierEngine is the primary entry point for verification services.  
            Any given application may have any number of VerifierEngines, although it is probably more 
            likely that only a single VerifierEngine will be necessary for most applications. 
            <remarks>
            <para>
            Each VerifierEngine contains a list of <see cref="T:IdeaBlade.Verification.Verifier"/>s, and a set of methods that allow collections 
            of these verifiers to be executed sequentially against a specific instance of some .NET class with 
            the results of this verification collected into a <see cref="T:IdeaBlade.Verification.VerifierResultCollection"/>.   
            </para><para>
            Verifiers may be added to a VerifierEngine in one of two ways.  They can either be 
            automatically discovered via attributes and code embedded directly within the .NET types 
            to be verified or they can be added programmatically once a VerifierEngine has been instantiated.  
            Any combination of the two methods is also possible. 
            </para><para>
            Verifiers can be added or removed from a VerifierEngine at any time.  
            A <see cref="E:IdeaBlade.Verification.VerifierEngine.VerifiersChanged"/> event is available on the verifier engine that will inform any 
            subscriber of the addition or removal of any verifier as well as the addition or removal 
            of any triggers on a verifier.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.#ctor">
            <summary>
            Initializes a new instance of a VerifierEngine.
            </summary>
            <remarks>
            A <see cref="E:IdeaBlade.Verification.VerifierEngine.VerifierEngineCreated"/> event is fired upon creation.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.OnVerifierEngineCreated(IdeaBlade.Verification.VerifierEngineCreatedEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.Verification.VerifierEngine.VerifierEngineCreated"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.Clear">
            <summary>
            Removes all verifiers but leaves all other settings alone.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.DiscoverVerifiers(System.Type)">
            <summary>
            Forces the discovery of all automatically discovered verifiers associated with a specific type.  
            </summary>
            <remarks>
            This method should not in general need to be called because verifiers 
            will be lazily discovered on an as-needed basis when they are first referenced.
            <para>
            Discovers all base class verifiers before derived class verifiers.
            Within each type all VeriferAttribute defined verifiers are discovered 
            before VerifierProviderAttribute defined verifiers.
            </para>
            </remarks>
            <param name="pType"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.DiscoverVerifiers(System.Type,System.Object)">
            <summary>
            Forces the discovery of all automatically discovered verifiers associated with a specific type.
            </summary>
            <remarks>
            Discovers all base class verifiers before derived class verifiers.
            Within each type all VeriferAttribute defined verifiers are discovered 
            before VerifierProviderAttribute defined verifiers.  
            </remarks>
            <param name="pType"></param>
            <param name="pVerifierProviderContext">A context object that is provided to each VerifierProvider attributed method.</param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.DiscoverVerifiersFromConfig">
            <summary>
            Discover verifiers from a config file located in the default application domain.
            </summary>
            <exception cref="T:IdeaBlade.Verification.VerifierException">Thrown if no config file found in default application domain.</exception>
            <exception cref="T:IdeaBlade.Verification.VerifierException">Thrown if unable to instantiate VerifierArgs or Verifier.</exception>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.DiscoverVerifiersFromConfig(System.String)">
            <summary>
            Discover verifiers from the given file.
            </summary>
            <param name="pFileName">The file containing the verifiers</param>
            <exception cref="T:System.ArgumentNullException">Thrown if pFileName is null.</exception>
            <exception cref="T:IdeaBlade.Verification.VerifierException">Thrown if pFileName does not exist.</exception>
            <exception cref="T:IdeaBlade.Verification.VerifierException">Thrown if unable to instantiate VerifierArgs or Verifier.</exception>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.DiscoverVerifiersFromConfig(System.IO.Stream)">
            <summary>
            Discover verifiers from the given stream.
            </summary>
            <param name="pStream"></param>
            <exception cref="T:System.ArgumentNullException">Thrown if pStream is null</exception>
            <exception cref="T:IdeaBlade.Verification.VerifierException">
            Thrown if <code>&lt;ideaBlade.verification&gt;</code> element does not exist in given stream.
            </exception>
            <exception cref="T:IdeaBlade.Verification.VerifierException">Thrown if unable to instantiate VerifierArgs or Verifier.</exception>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.Execute(System.Object)">
            <summary>
            Executes all "Instance" (see <see cref="F:IdeaBlade.Verification.VerifierExecutionModes.Instance"/>) verifiers associated with the specified object.
            </summary>
            <param name="pInstance"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.Execute(System.Object,IdeaBlade.Verification.VerifierContext)">
            <summary>
            Executes all "Instance" (see <see cref="F:IdeaBlade.Verification.VerifierExecutionModes.Instance"/>) verifiers associated with the specified object.
            </summary>
            <param name="pInstance">Instance to verify</param>
            <param name="pVerifierContext">The <see cref="T:IdeaBlade.Verification.VerifierContext"/> to be passed to each applicable verifier</param>
            <returns><see cref="T:IdeaBlade.Verification.VerifierResultCollection"/> containing the combined results of all executed verifiers</returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.Execute(System.Object,System.Collections.Generic.IEnumerable{IdeaBlade.Verification.Verifier},IdeaBlade.Verification.VerifierContext)">
            <summary>
            Executes all specified verifiers against the specified instance.  Applicable verifiers are those verifiers with the 
            <see cref="F:IdeaBlade.Verification.VerifierExecutionModes.Instance"/> flag set and that have been
            registered for the type of the specified instance.
            </summary>
            <param name="pInstance">Instance to verify</param>
            <param name="pVerifiers">Verifiers to execute; if null all applicable verifiers will be used</param>
            <param name="pVerifierContext">The <see cref="T:IdeaBlade.Verification.VerifierContext"/> to be passed to each applicable verifier</param>
            <returns><see cref="T:IdeaBlade.Verification.VerifierResultCollection"/> containing the combined results of all executed verifiers</returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.Execute(System.Object,System.String)">
            <summary>
            Executes all applicable verifiers against the specified instance.  
            Applicable verifiers are those verifiers with the 
            <see cref="F:IdeaBlade.Verification.VerifierExecutionModes.OnPostsetTriggers"/> flag set and that have been
            registered for both the type of the specified instance and the specified TriggerItem .
            </summary>
            <param name="pTriggerItemInstance">Instance on which the "trigger" occurs</param>
            <param name="pMemberName">A member name that in the context of the type of the specified instance uniquely defines 
            a TriggerItem.</param>
            <returns><see cref="T:IdeaBlade.Verification.VerifierResultCollection"/> containing the combined results of all executed verifiers</returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.Execute(System.Object,System.String,IdeaBlade.Verification.VerifierContext)">
            <summary>
            Executes all applicable verifiers against the specified instance.  
            Applicable verifiers are those verifiers with the 
            <see cref="F:IdeaBlade.Verification.VerifierExecutionModes.OnPostsetTriggers"/> flag set and that have been
            registered for both the type of the specified instance and the specified TriggerItem .
            </summary>
            <param name="pTriggerItemInstance">Instance on which the "trigger" occurs</param>
            <param name="pMemberName">A member name that in the context of the type of the specified instance uniquely defines 
            a TriggerItem.</param>
            <param name="pVerifierContext">The <see cref="T:IdeaBlade.Verification.VerifierContext"/> to be passed to each applicable verifier</param>
            <returns><see cref="T:IdeaBlade.Verification.VerifierResultCollection"/> containing the combined results of all executed verifiers</returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.Execute(System.Object,System.ComponentModel.PropertyDescriptor,IdeaBlade.Verification.VerifierContext)">
            <summary>
            Executes all applicable verifiers against the specified instance.  
            Applicable verifiers are those verifiers with the 
            <see cref="F:IdeaBlade.Verification.VerifierExecutionModes.OnPostsetTriggers"/> flag set and that have been
            registered for both the type of the specified instance and the specified TriggerItem .
            </summary>
            <param name="pTriggerItemInstance">Instance on which the "trigger" occurs</param>
            <param name="pPropertyDescriptor">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents a TriggerItem</param>
            <param name="pVerifierContext">The <see cref="T:IdeaBlade.Verification.VerifierContext"/> to be passed to each applicable verifier</param>
            <returns><see cref="T:IdeaBlade.Verification.VerifierResultCollection"/> containing the combined results of all executed verifiers</returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.Execute(System.Object,IdeaBlade.Verification.TriggerItem,IdeaBlade.Verification.VerifierContext)">
            <summary>
            Executes all applicable verifiers against the specified instance.  
            Applicable verifiers are those verifiers with the 
            <see cref="F:IdeaBlade.Verification.VerifierExecutionModes.OnPostsetTriggers"/> flag set and that have been
            registered for both the type of the specified instance and the specified TriggerItem .
            </summary>
            <param name="pTriggerItemInstance">Instance on which the "trigger" occurs</param>
            <param name="pTriggerItem">The specified <see cref="T:IdeaBlade.Verification.TriggerItem"/>.</param>
            <param name="pVerifierContext">The <see cref="T:IdeaBlade.Verification.VerifierContext"/> to be passed to each applicable verifier</param>
            <returns><see cref="T:IdeaBlade.Verification.VerifierResultCollection"/> containing the combined results of all executed verifiers</returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.Execute(System.Object,System.String,System.Object)">
            <summary>
            Executes all applicable verifiers against the specified instance.  
            Applicable verifiers are those verifiers with the 
            <see cref="F:IdeaBlade.Verification.VerifierExecutionModes.OnPresetTriggers"/> flag set and that have been
            registered for both the type of the specified instance and the specified TriggerItem .
            </summary>
            <param name="pTriggerItemInstance">Instance on which the "trigger" occurs</param>
            <param name="pMemberName">A member name that in the context of the type of the specified instance uniquely defines 
            a TriggerItem.</param>
            <param name="pProposedValue">The proposed value to that will be applied to the <see cref="T:IdeaBlade.Verification.TriggerItem"/> should the Verification succeed.</param>
            <returns><see cref="T:IdeaBlade.Verification.VerifierResultCollection"/> containing the combined results of all executed verifiers</returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.Execute(System.Object,System.String,System.Object,IdeaBlade.Verification.VerifierContext)">
            <summary>
            Executes all applicable verifiers against the specified instance.  
            Applicable verifiers are those verifiers with the 
            <see cref="F:IdeaBlade.Verification.VerifierExecutionModes.OnPresetTriggers"/> flag set and that have been
            registered for both the type of the specified instance and the specified TriggerItem .
            </summary>
            <param name="pTriggerItemInstance">Instance on which the "trigger" occurs</param>
            <param name="pMemberName">A member name that in the context of the type of the specified instance uniquely defines 
            a TriggerItem.</param>
            <param name="pProposedValue">The proposed value to that will be applied to the <see cref="T:IdeaBlade.Verification.TriggerItem"/> should the Verification succeed.</param>
            <param name="pVerifierContext">The <see cref="T:IdeaBlade.Verification.VerifierContext"/> to be passed to each applicable verifier</param>
            <returns><see cref="T:IdeaBlade.Verification.VerifierResultCollection"/> containing the combined results of all executed verifiers</returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.Execute(System.Object,System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Executes all applicable verifiers against the specified instance.  
            Applicable verifiers are those verifiers with the 
            <see cref="F:IdeaBlade.Verification.VerifierExecutionModes.OnPresetTriggers"/> flag set and that have been
            registered for both the type of the specified instance and the specified TriggerItem .
            </summary>
            <param name="pTriggerItemInstance">Instance on which the "trigger" occurs</param>
            <param name="pDescriptor">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents a TriggerItem</param>
            <param name="pProposedValue">The proposed value to that will be applied to the <see cref="T:IdeaBlade.Verification.TriggerItem"/> should the Verification succeed.</param>
            <returns><see cref="T:IdeaBlade.Verification.VerifierResultCollection"/> containing the combined results of all executed verifiers</returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.Execute(System.Object,System.ComponentModel.PropertyDescriptor,System.Object,IdeaBlade.Verification.VerifierContext)">
            <summary>
            Executes all applicable verifiers against the specified instance.  
            Applicable verifiers are those verifiers with the 
            <see cref="F:IdeaBlade.Verification.VerifierExecutionModes.OnPresetTriggers"/> flag set and that have been
            registered for both the type of the specified instance and the specified TriggerItem .
            </summary>
            <param name="pTriggerItemInstance">Instance on which the "trigger" occurs</param>
            <param name="pDescriptor">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents a TriggerItem</param>
            <param name="pProposedValue">The proposed value to that will be applied to the <see cref="T:IdeaBlade.Verification.TriggerItem"/> should the Verification succeed.</param>
            <param name="pVerifierContext">The <see cref="T:IdeaBlade.Verification.VerifierContext"/> to be passed to each applicable verifier</param>
            <returns><see cref="T:IdeaBlade.Verification.VerifierResultCollection"/> containing the combined results of all executed verifiers</returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.Execute(System.Object,IdeaBlade.Verification.TriggerItem,System.Object)">
            <summary>
            Executes all applicable verifiers against the specified instance.  
            Applicable verifiers are those verifiers with the 
            <see cref="F:IdeaBlade.Verification.VerifierExecutionModes.OnPresetTriggers"/> flag set and that have been
            registered for both the type of the specified instance and the specified TriggerItem .
            </summary>
            <param name="pTriggerItemInstance">Instance on which the "trigger" occurs</param>
            <param name="pTriggerItem">The "event" that is triggering this execution</param>
            <param name="pProposedValue">The proposed value to that will be applied to the <see cref="T:IdeaBlade.Verification.TriggerItem"/> should the Verification succeed.</param>
            <returns><see cref="T:IdeaBlade.Verification.VerifierResultCollection"/> containing the combined results of all executed verifiers</returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.Execute(System.Object,IdeaBlade.Verification.TriggerItem,System.Object,IdeaBlade.Verification.VerifierContext)">
            <summary>
            Executes all applicable verifiers against the specified instance.  
            Applicable verifiers are those verifiers with the 
            <see cref="F:IdeaBlade.Verification.VerifierExecutionModes.OnPresetTriggers"/> flag set and that have been
            registered for both the type of the specified instance and the specified TriggerItem .
            </summary>
            <param name="pTriggerItemInstance">Instance on which the "trigger" occurs</param>
            <param name="pTriggerItem">The "event" that is triggering this execution</param>
            <param name="pProposedValue">The proposed value to that will be applied to the <see cref="T:IdeaBlade.Verification.TriggerItem"/> should the Verification succeed.</param>
            <param name="pVerifierContext">The <see cref="T:IdeaBlade.Verification.VerifierContext"/> to be passed to each applicable verifier</param>
            <returns><see cref="T:IdeaBlade.Verification.VerifierResultCollection"/> containing the combined results of all executed verifiers</returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.ContainsVerifier(IdeaBlade.Verification.Verifier)">
            <summary>
            Returns whether this engine contains a specified verifier
            </summary>
            <param name="pVerifier"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.GetVerifier(System.Predicate{IdeaBlade.Verification.Verifier})">
            <summary>
            Gets the first verifier to satisfy the specified <see cref="T:System.Predicate`1"/>
            </summary>
            <param name="pPredicate"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.GetVerifier(System.Type,System.Type,System.String)">
            <summary>
            Gets the first verifier with the specified verifier type, applicable type and property name
            Note that any of these
            </summary>
            <param name="pVerifierType"></param>
            <param name="pApplicableType"></param>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.GetVerifiers">
            <summary>
            Returns a list of all of the <see cref="T:IdeaBlade.Verification.Verifier"/>s currently registered with this VerifierEngine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.GetVerifiers(System.Type)">
            <summary>
            Gets all of the Verifiers associated with the specified type within this engine.
            </summary>
            <param name="pType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.GetVerifiers(IdeaBlade.Verification.TriggerItem)">
            <summary>
            Gets all of the Verifiers associated with a specified <see cref="T:IdeaBlade.Verification.TriggerItem"/> within this engine.
            </summary>
            <param name="pTriggerItem"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.GetVerifiers(System.Predicate{IdeaBlade.Verification.Verifier})">
            <summary>
            Gets all verifiers that satisfy the specified <see cref="T:System.Predicate`1"/>
            </summary>
            <param name="pPredicate"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.GetVerifiers(System.Type,System.Type,System.String)">
            <summary>
            Gets all verifiers that satisfy the specified applicable type, verifier type and property name.
            Any or all of these parameters can be null.
            </summary>
            <param name="pApplicableType"></param>
            <param name="pVerifierType"></param>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.AddVerifier(IdeaBlade.Verification.Verifier)">
            <summary>
            Add a verifier to this engine. 
            This feature is only available in certain editions of DevForce.
            </summary>
            <param name="pVerifier"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.RemoveVerifier(IdeaBlade.Verification.Verifier)">
            <summary>
            Remove the specified verifier from this engine.
            </summary>
            <param name="pVerifier"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.OnVerifiersChanged(IdeaBlade.Verification.VerifiersChangedEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.Verification.VerifierEngine.VerifiersChanged"/> event.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngine.UpdateInheritenceChain(System.Type)">
            <summary>
            
            </summary>
            <param name="pType"></param>
        </member>
        <member name="E:IdeaBlade.Verification.VerifierEngine.VerifierEngineCreated">
            <summary>
            Event fired whenever a new engine is created.
            </summary>
        </member>
        <member name="E:IdeaBlade.Verification.VerifierEngine.VerifiersChanged">
            <summary>
            Occurs whenever a verifier is added to or removed from the engine or a 
            trigger is added to or removed from a verifier already held by the engine.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierEngine.DefaultOnErrorMode">
            <summary>
            Gets or sets the default <see cref="T:IdeaBlade.Verification.VerifierOnErrorMode"/> that will be used to construct 
            a <see cref="T:IdeaBlade.Verification.VerifierContext"/> if one is not passed in during verification execution.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierEngine.DefaultCustomContext">
            <summary>
            Gets or sets the default custom context to be used in constructing a 
            <see cref="T:IdeaBlade.Verification.VerifierContext"/> if one is not passed in during verification execution.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierEngine.DefaultVerifierProviderContext">
            <summary>
            Gets or sets the default VerifierProviderContext that is provided to all [VerifierProvider] 
            methods during the automatic discovery of Verifiers associated with a specific type.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierEngine.ErrorsResourceManager">
            <summary>
            Gets or sets the <see cref="T:System.Resources.ResourceManager"/> used to resolve localized resource strings. 
            The default resource manager can be replaced with any other resource manager 
            that provides a complete superset of all of the strings provided by the 
            internally provided resource manager.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierEngine.BatchInterceptor">
            <summary>
            Gets or sets the <see cref="T:IdeaBlade.Verification.VerifierEngine.VerifierBatchInterceptor"/> delegate that will be called 
            after each verifier within a verifier batch executes. The cumulative results of the 
            verifications performed so far in the batch are available for use in determining 
            whether or not to continue verification.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierEngine.Enabled">
            <summary>
            Gets or sets if the VerifierEngine is enabled.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierEngine.PropertyNameToDisplayNameTranslator">
            <summary>
            Delegate property that provides the ability to translate the property being verified into a localized description string. 
            <seealso cref="T:IdeaBlade.Verification.VerifierEngine.PropertyNameTranslator"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierEngine.PropertyNameTranslator">
            <summary>
            Delegate that provides the mechanism to convert a "property" name into a displayable form.
            </summary>
            <param name="pType"></param>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierEngine.VerifierBatchInterceptor">
            <summary>
            Represents the method that will allow for the interception of the 
            verification process by being called after each verifier executes within a batch.
            </summary>
            <param name="pInstance"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Verification.RequiredValueVerifier">
            <summary>
            A <see cref="T:IdeaBlade.Verification.Verifier"/> that checks that a null value has not been entered.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.RequiredValueVerifier.#ctor(System.Type,System.String)">
            <summary>
             Initializes a new instance of the RequiredValueVerifier class.
            </summary>
            <param name="pType"></param>
            <param name="pPropertyName"></param>
        </member>
        <member name="M:IdeaBlade.Verification.RequiredValueVerifier.#ctor(System.Type,System.String,System.String)">
            <summary>
             Initializes a new instance of the RequiredValueVerifier class.
            </summary>
            <param name="pType"></param>
            <param name="pPropertyName"></param>
            <param name="pDisplayName"></param>
        </member>
        <member name="M:IdeaBlade.Verification.RequiredValueVerifier.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
             Initializes a new instance of the RequiredValueVerifier class.
            </summary>
            <param name="pDescriptor"></param>
        </member>
        <member name="M:IdeaBlade.Verification.RequiredValueVerifier.#ctor(System.ComponentModel.PropertyDescriptor,System.String)">
            <summary>
             Initializes a new instance of the RequiredValueVerifier class.
            </summary>
            <param name="pDescriptor"></param>
            <param name="pDisplayName"></param>
        </member>
        <member name="M:IdeaBlade.Verification.RequiredValueVerifier.#ctor(IdeaBlade.Verification.PropertyValueVerifierArgs)">
            <summary>
             Initializes a new instance of the RequiredValueVerifier class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.RequiredValueVerifier.VerifyValue(System.Object,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.PropertyValueVerifier.VerifyValue(System.Object,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/>.
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pValueToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.RequiredValueVerifier.Description">
            <summary>
            See <see cref="P:IdeaBlade.Verification.Verifier.Description"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.RequiredValueVerifierAttribute">
            <summary>
            Attribute class that allows description of a <see cref="T:IdeaBlade.Verification.RequiredValueVerifier"/> via an Attribute.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.RequiredValueVerifierAttribute.BuildVerifierCore(System.Type,System.String)">
            <summary>
            <see cref="M:IdeaBlade.Verification.VerifierAttribute.BuildVerifierCore(System.Type,System.String)"/>
            </summary>
            <param name="pType"></param>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierApplicabilityCode">
            <summary>
            Used to construct a return value of type <see cref="T:IdeaBlade.Verification.VerifierApplicability"/> to the 
            <see cref="M:IdeaBlade.Verification.Verifier.IsApplicable(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> method. Used to indicate 
            whether a Verifier is applicable to what it is trying to verify.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierApplicabilityCode.No">
            <summary>
            No, not applicable.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierApplicabilityCode.InsufficientData">
            <summary>
            Insufficient data exists to perform the verification.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierApplicabilityCode.Yes">
            <summary>
            Yes, it is applicable.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierApplicability">
            <summary>
            Used to construct a return value to the <see cref="M:IdeaBlade.Verification.Verifier.IsApplicable(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> method. Used to indicate 
            whether a Verifier is applicable to what it is trying to verify, with the option of providing a 
            descriptive message. 
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierApplicability.Yes">
            <summary>
            A predefined VerifierApplicability constructed with <see cref="F:IdeaBlade.Verification.VerifierApplicabilityCode.Yes"/> and no description.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierApplicability.InsufficientData">
            <summary>
            A predefined VerifierApplicability constructed with <see cref="F:IdeaBlade.Verification.VerifierApplicabilityCode.InsufficientData"/> and no description.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierApplicability.No">
            <summary>
            A predefined VerifierApplicability constructed with <see cref="F:IdeaBlade.Verification.VerifierApplicabilityCode.No"/> and no description.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierApplicability.#ctor(IdeaBlade.Verification.VerifierApplicabilityCode,System.String)">
            <summary>
            Initializes a new instance of the VerifierApplicability class.
            </summary>
            <param name="pCode">Indicate whether a Verifier is applicable to what it is trying to verify.</param>
            <param name="pDescription">A description as to why the verifier is applicable or not</param>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierApplicability.Code">
            <summary>
            Gets whether a Verifier is applicable to what it is trying to verify.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierApplicability.Description">
            <summary>
            Gets a description as to why the verifier is applicable or not.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.DelegateVerifier`1">
            <summary>
            A verifier that uses a delegates to implement the <see cref="M:IdeaBlade.Verification.Verifier.Verify(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> and
            <see cref="M:IdeaBlade.Verification.Verifier.IsApplicable(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> methods. 
            </summary>
            <typeparam name="T">Type of object being verified</typeparam>
        </member>
        <member name="M:IdeaBlade.Verification.DelegateVerifier`1.#ctor(System.String,IdeaBlade.Verification.VerifierCondition{`0})">
            <summary>
            Initializes a new instance of the this class.
            </summary>
            <param name="pDescription"></param>
            <param name="pVerifierCondition"></param>
        </member>
        <member name="M:IdeaBlade.Verification.DelegateVerifier`1.#ctor(System.String,IdeaBlade.Verification.ApplicabilityConstraint{`0},IdeaBlade.Verification.VerifierCondition{`0})">
            <summary>
            Initializes a new instance of the DelegateVerifier{T} class.
            </summary>
            <param name="pDescription"></param>
            <param name="pApplicabilityConstraint"></param>
            <param name="pVerifierCondition"></param>
        </member>
        <member name="M:IdeaBlade.Verification.DelegateVerifier`1.#ctor(IdeaBlade.Verification.DelegateVerifierArgs{`0})">
            <summary>
            Initializes a new instance of the this class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.DelegateVerifier`1.IsApplicableTyped(`0,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            Strongly typed version of <see cref="M:IdeaBlade.Verification.Verifier.IsApplicable(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/>
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.DelegateVerifier`1.VerifyTyped(`0,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            Strongly typed version of <see cref="M:IdeaBlade.Verification.Verifier.Verify(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/>.
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.DelegateVerifier`1.Description">
            <summary>
            See <see cref="P:IdeaBlade.Verification.Verifier.Description"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.DelegateVerifier`1.TypedVerifierArgs">
            <summary>
            Gets the strongly typed version of <see cref="T:IdeaBlade.Verification.VerifierArgs"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.DelegateVerifierArgs`1.Description">
            <summary>
            See <see cref="P:IdeaBlade.Verification.Verifier.Description"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerificationSection">
            <summary>
            Represents the "IdeaBlade.Verification" section within a configuration file.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerificationSection.SectionName">
            <summary>Verification configuration section name.</summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerificationSection.BaseFileName">
            <summary>Filename of the properties file. Currently <b>app.config</b>.</summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerificationSection.#ctor">
            <summary>Empty ctor</summary>
            <remarks>Needed if another ctor exists. Otherwise an exception is thrown
            while creating the configuration section handler stating it is unable
            to load type 'IdeaBlade.Verification.VerificationSection, ...' because it is not public.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Verification.VerificationSection.#ctor(System.String)">
            <summary>
            Initializes a new instance of VerificationSection for the given XML string.
            </summary>
            <param name="pXmlString"></param>
        </member>
        <member name="P:IdeaBlade.Verification.VerificationSection.Verifiers">
            <summary>
            Gets the collection of <code>&lt;verifiers&gt;</code> elements.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierResultCode">
            <summary>
            A code indicating the result of a verification
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierResultCode.Error">
            <summary>
            An error was encountered - the verification failed.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierResultCode.ErrorInsufficientData">
            <summary>
            Insufficient data to perform validation - treated as an error.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierResultCode.Ok">
            <summary>
            The verification succeeded.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierResultCode.OkNotApplicable">
            <summary>
            The verification is not applicable - treated as a successful verification.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.VerifierResultCode.OkWarning">
            <summary>
            The verification succeeded but with a warning.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierCollection">
            <summary>
            Represents a collection of <see cref="T:IdeaBlade.Verification.Verifier"/>s.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierCollection.#ctor">
            <summary>
            Initializes a new instance of the VerifierCollection class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierCollection.#ctor(System.Collections.Generic.IEnumerable{IdeaBlade.Verification.Verifier})">
            <summary>
            Initializes a new instance of the VerifierCollection class that contains elements copied from the specified collection
            and has sufficient capacity to accommodate the number of elements copied. 
            </summary>
            <param name="pVerifiers"></param>
        </member>
        <member name="T:IdeaBlade.Verification.TriggerContext">
            <summary>
            An object passed to verifiers to describe the context under which the verifier was executed.
            Verifiers that are called in the context of an Instance verification (see <see cref="P:IdeaBlade.Verification.Verifier.ExecutionModes"/>)
            will have a null TriggerContext.  Under all other circumstances the TriggerContext will fully describe
            the <see cref="P:IdeaBlade.Verification.TriggerContext.TriggerItem"/>, <see cref="T:IdeaBlade.Verification.TriggerTiming"/>, the instance on which the TriggerItem was executed 
            as well as the proposed value involved in the event that a "preset" trigger was involved.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.TriggerContext.#ctor(IdeaBlade.Verification.TriggerItem,System.Object,IdeaBlade.Verification.TriggerTiming,System.Object)">
            <summary>
            Initializes a new instance of the TriggerContext class.
            </summary>
            <param name="pTriggerItem">The TriggerItem associated with this context</param>
            <param name="pTriggerItemInstance">The instance on which the TriggerItem was executed </param>
            <param name="pTiming">The timing of the TriggerItem "event"</param>
            <param name="pProposedValue">The proposed value involved in the event that a "preset" trigger was involved.</param>
        </member>
        <member name="P:IdeaBlade.Verification.TriggerContext.TriggerItem">
            <summary>
            Gets the TriggerItem associated with this context.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.TriggerContext.Timing">
            <summary>
            Gets the timing of the TriggerItem "event".
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.TriggerContext.TriggerItemInstance">
            <summary>
            Gets the instance on which the TriggerItem was executed. This need not be the same instance as the object
            being verified.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.TriggerContext.ProposedValue">
            <summary>
            Gets the proposed value involved in the event that a "preset" trigger was involved.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.ValueVerifierCondition`1">
            <summary>
            A delegate used by the <see cref="T:IdeaBlade.Verification.DelegatePropertyValueVerifier`1"/> to determine if an incoming value is valid.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pItemToVerify"></param>
            <param name="pValueToVerify"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Verification.DelegatePropertyValueVerifier`1">
            <summary>
            A <see cref="T:IdeaBlade.Verification.PropertyValueVerifier`1"/> that determines uses delegates to perform its applicability and validation checks.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:IdeaBlade.Verification.PropertyValueVerifier`1">
            <summary>
            A strongly typed abstract subclass of the <see cref="T:IdeaBlade.Verification.PropertyValueVerifier"/>.  In effect
            the <see cref="P:IdeaBlade.Verification.Verifier.ApplicableType"/> property is the generic type argument and all
            methods that would take a type of <see cref="T:System.Object"/> in the PropertyValueVerifier
            have strongly typed versions in this class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifier`1.#ctor(IdeaBlade.Verification.PropertyValueVerifierArgs{`0})">
            <summary>
            Initializes a new instance of the PropertyValueVerifier class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifier`1.IsApplicable(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.Verifier.IsApplicable(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/>.  Override the 
            <see cref="M:IdeaBlade.Verification.PropertyValueVerifier`1.IsApplicableTyped(`0,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> method instead of this one if extending this class.  
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifier`1.VerifyValue(System.Object,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.PropertyValueVerifier.VerifyValue(System.Object,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/>.  Override the 
            <see cref="M:IdeaBlade.Verification.PropertyValueVerifier`1.VerifyValueTyped(`0,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> method instead of this one if extending this class.  
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pValueToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifier`1.IsApplicableTyped(`0,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            Override this method instead of <see cref="M:IdeaBlade.Verification.PropertyValueVerifier`1.IsApplicable(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> if extending this class.  
            This is a "typed" version of that method.
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifier`1.VerifyValueTyped(`0,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            Override this method instead of <see cref="M:IdeaBlade.Verification.PropertyValueVerifier`1.VerifyValue(System.Object,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> if extending this class.  
            This is a "typed" version of that method.
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pValueToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.DelegatePropertyValueVerifier`1.#ctor(System.String,System.String,System.Boolean,IdeaBlade.Verification.ValueVerifierCondition{`0})">
            <summary>
             Initializes a new instance of the DelegatePropertyValueVerifier class.
            </summary>
            <param name="pDescription"></param>
            <param name="pPropertyName"></param>
            <param name="pIsRequired"></param>
            <param name="pVerifierCondition"></param>
        </member>
        <member name="M:IdeaBlade.Verification.DelegatePropertyValueVerifier`1.#ctor(System.String,System.String,System.Boolean,System.String,IdeaBlade.Verification.ValueVerifierCondition{`0})">
            <summary>
             Initializes a new instance of the DelegatePropertyValueVerifier class.
            </summary>
            <param name="pDescription"></param>
            <param name="pPropertyName"></param>
            <param name="pIsRequired"></param>
            <param name="pDisplayName"></param>
            <param name="pVerifierCondition"></param>
        </member>
        <member name="M:IdeaBlade.Verification.DelegatePropertyValueVerifier`1.#ctor(IdeaBlade.Verification.DelegatePropertyValueVerifierArgs{`0})">
            <summary>
             Initializes a new instance of the DelegatePropertyValueVerifier class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.DelegatePropertyValueVerifier`1.IsApplicableTyped(`0,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            Strongly typed version of the <see cref="M:IdeaBlade.Verification.Verifier.IsApplicable(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> method.  Override this 
            method instead of <see cref="M:IdeaBlade.Verification.Verifier.IsApplicable(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> if subclassing from this Verifier.
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.DelegatePropertyValueVerifier`1.VerifyValueTyped(`0,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            Strongly typed version of the <see cref="M:IdeaBlade.Verification.PropertyValueVerifier.VerifyValue(System.Object,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> method.  Override this 
            method instead of <see cref="M:IdeaBlade.Verification.PropertyValueVerifier.VerifyValue(System.Object,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> if subclassing from this Verifier.
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pValueToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.DelegatePropertyValueVerifier`1.TypedVerifierArgs">
            <summary>
            Strongly typed version of <see cref="T:IdeaBlade.Verification.VerifierArgs"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.DelegatePropertyValueVerifier`1.Description">
            <summary>
            <see cref="P:IdeaBlade.Verification.Verifier.Description"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.DelegatePropertyValueVerifierArgs`1">
            <summary>
            Subclass of <see cref="P:IdeaBlade.Verification.Verifier.VerifierArgs"/> for a <see cref="T:IdeaBlade.Verification.DelegatePropertyValueVerifier`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:IdeaBlade.Verification.PropertyValueVerifierArgs`1">
            <summary>
            Subclass of <see cref="P:IdeaBlade.Verification.Verifier.VerifierArgs"/> for a <see cref="T:IdeaBlade.Verification.PropertyValueVerifier"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifierArgs`1.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the PropertyValueVerifierArgs class.
            </summary>
            <param name="pPropertyName">The property on the type to be verified</param>
            <param name="pIsRequired">Whether the property name is required or may be left null</param>
            <param name="pDisplayName">A display name for the specified property</param>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifierArgs`1.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the PropertyValueVerifierArgs class.
            </summary>
            <param name="pPropertyDescriptor"></param>
            <param name="pIsRequired">Whether the property name is required or may be left null</param>
            <param name="pDisplayName">A display name for the specified property</param>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifierArgs`1.#ctor(IdeaBlade.Verification.PropertyValueVerifierArgs{`0})">
            <summary>
            Initializes a new instance of the PropertyValueVerifierArgs class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.PropertyValueVerifierArgs`1.#ctor(IdeaBlade.Verification.VerifierElement)">
            <summary>
            Initializes a new instance of the PropertyValueVerifierArgs class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="P:IdeaBlade.Verification.DelegatePropertyValueVerifierArgs`1.Description">
            <summary>
            <see cref="P:IdeaBlade.Verification.Verifier.Description"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.DelegatePropertyValueVerifierArgs`1.ApplicabilityConstraint">
            <summary>
            The <see cref="T:IdeaBlade.Verification.ApplicabilityConstraint`1"/> used to implement the <see cref="M:IdeaBlade.Verification.Verifier.IsApplicable(System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/> method
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.DelegatePropertyValueVerifierArgs`1.VerifierCondition">
            <summary>
            The <see cref="T:IdeaBlade.Verification.ValueVerifierCondition`1"/> used to implement the <see cref="!:Verifier.VerifyValue"/> method
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierElementCollection">
            <summary>
            Represents a <code>&lt;verifiers&gt;</code> element containing 
            a collection of <code>&lt;verifier&gt;</code> elements.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierException">
            <summary>
            Exception used for programmatic errors encountered while processing a verifier.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierException.#ctor">
            <summary>
            Initializes a new instance of the VerifierException class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the VerifierException class.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the VerifierException class.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
            <param name="pInnerException">An instance of Exception that describes the error that caused this exception</param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierException.#ctor(System.String,IdeaBlade.Verification.Verifier)">
            <summary>
            Initializes a new instance of the VerifierException class.
            </summary>
            <param name="pMessage"></param>
            <param name="pVerifier">The verifier during whose execution this exception occurred</param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierException.#ctor(System.String,System.Exception,IdeaBlade.Verification.Verifier)">
            <summary>
            Initializes a new instance of the VerifierException class.
            </summary>
            <param name="pMessage"></param>
            <param name="pInnerException"></param>
            <param name="pVerifier">The verifier during whose execution this exception occurred</param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierException.Message">
            <summary>
            Gets a description of this exception.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierException.Verifier">
            <summary>
            Gets the verifier during whose execution this exception occurred.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierException.VerifierDescription">
            <summary>
            Gets a description of the verifier during whose execution this exception occurred.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierProviderAttribute">
            <summary>
            An <see cref="T:System.Attribute"/> used to mark a method to be
            called by the Verification Engine during automatic discovery 
            of verifiers.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierProviderAttribute.#ctor">
            <summary>
              Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierEngineCreatedEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.Verification.VerifierEngine.Created"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierEngineCreatedEventArgs.#ctor(IdeaBlade.Verification.VerifierEngine)">
            <summary>
            Initialize a new instance of this class.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierEngineCreatedEventArgs.VerifierEngine">
            <summary>
            Gets the VerifierEngine involved in this event.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.NamedRegexPattern">
            <summary>
            A property value verifier that verifies that a string property
            matches a specified Regex expression.
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.NamedRegexPattern.USPhone">
            <summary>
            Phone pattern.
            </summary>
            <remarks>
            A U.S. phone number must be formatted as (XXX)XXX-XXXX or XXX-XXX-XXXX to be valid. 
            There can be an optional space after the closing parenthesis on an area code and 
            the first digit of an area code or phone number must not be a 1
            </remarks>
        </member>
        <member name="F:IdeaBlade.Verification.NamedRegexPattern.SSN">
            <summary>
            Social Security Number pattern
            </summary>
        </member>
        <member name="F:IdeaBlade.Verification.NamedRegexPattern.Email">
            <summary>
            Email pattern
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.NamedRegexPattern.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the NamedRegexPattern class.
            </summary>
            <param name="pDisplayName"></param>
            <param name="pPattern"></param>
        </member>
        <member name="M:IdeaBlade.Verification.NamedRegexPattern.#ctor(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Initializes a new instance of the NamedRegexPattern class.
            </summary>
            <param name="pDisplayName"></param>
            <param name="pRegex"></param>
        </member>
        <member name="P:IdeaBlade.Verification.NamedRegexPattern.DisplayName">
            <summary>
            See <see cref="P:IdeaBlade.Verification.PropertyValueVerifier.DisplayName"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.NamedRegexPattern.Regex">
            <summary>
            The Regex pattern to match.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.DecimalRangeVerifier">
            <summary>
            A <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/> for properties of type Decimal.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.DecimalRangeVerifier.#ctor(System.Type,System.String,System.Boolean,System.Nullable{System.Decimal},System.Boolean,System.Nullable{System.Decimal},System.Boolean)">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pApplicableType"></param>
            <param name="pPropertyName"></param>
            <param name="pIsRequired"></param>
            <param name="pMinValue"></param>
            <param name="pIncludeMinEndpoint"></param>
            <param name="pMaxValue"></param>
            <param name="pIncludeMaxEndpoint"></param>
        </member>
        <member name="M:IdeaBlade.Verification.DecimalRangeVerifier.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,System.Nullable{System.Decimal},System.Boolean,System.Nullable{System.Decimal},System.Boolean)">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pDescriptor"></param>
            <param name="pIsRequired"></param>
            <param name="pMinValue"></param>
            <param name="pIncludeMinEndpoint"></param>
            <param name="pMaxValue"></param>
            <param name="pIncludeMaxEndpoint"></param>
        </member>
        <member name="M:IdeaBlade.Verification.DecimalRangeVerifier.#ctor(IdeaBlade.Verification.RangeVerifierArgs{System.Decimal})">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="T:IdeaBlade.Verification.DecimalRangeVerifierAttribute">
            <summary>
            Attribute class that corresponds to the <see cref="T:IdeaBlade.Verification.DecimalRangeVerifier"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.DecimalRangeVerifierAttribute.#ctor">
            <summary>
            Initializes a new instance of the DecimalRangeVerifierAttribute class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.DecimalRangeVerifierAttribute.BuildVerifierCore(System.Type,System.String)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.RangeVerifierAttribute.BuildVerifierCore``2(System.Type,System.String)"/>
            </summary>
            <param name="pApplicableType"></param>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.DecimalRangeVerifierAttribute.MinValue">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MinValue"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.DecimalRangeVerifierAttribute.MaxValue">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MaxValue"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.StringLengthVerifier">
            <summary>
            A <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/> for properties of type String.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.StringLengthVerifier.#ctor(System.Type,System.String,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.StringLengthVerifier.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.StringLengthVerifier.#ctor(IdeaBlade.Verification.RangeVerifierArgs{System.Int32})">
            <summary>
            See <see cref="T:IdeaBlade.Verification.RangeVerifier`1"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.StringLengthVerifier.VerifyValue(System.Object,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.PropertyValueVerifier.VerifyValue(System.Object,System.Object,IdeaBlade.Verification.TriggerContext,IdeaBlade.Verification.VerifierContext)"/>.
            </summary>
            <param name="pItemToVerify"></param>
            <param name="pValueToVerify"></param>
            <param name="pTriggerContext"></param>
            <param name="pVerifierContext"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Verification.StringLengthVerifier.Description">
            <summary>
            See <see cref="P:IdeaBlade.Verification.Verifier.Description"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.StringLengthVerifierAttribute">
            <summary>
            Attribute class that corresponds to the <see cref="T:IdeaBlade.Verification.StringLengthVerifier"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.StringLengthVerifierAttribute.#ctor">
            <summary>
            Initializes a new instance of the StringLengthVerifierAttribute class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.StringLengthVerifierAttribute.BuildVerifierCore(System.Type,System.String)">
            <summary>
            See <see cref="M:IdeaBlade.Verification.RangeVerifierAttribute.BuildVerifierCore``2(System.Type,System.String)"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.RangeVerifierArgs`1">
            <summary>
            Strongly typed subclass of <see cref="T:IdeaBlade.Verification.VerifierArgs"/> used to construct a <see cref="T:IdeaBlade.Verification.Verifier"/> 
            that determines if a given property falls within a specified range.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.RangeVerifierArgs`1.#ctor(System.Type,System.String,System.Boolean,System.String,System.Nullable{`0},System.Boolean,System.Nullable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the RangeVerifierArgs class.
            </summary>
            <param name="pApplicableType"></param>
            <param name="pPropertyName"></param>
            <param name="pIsRequired"></param>
            <param name="pDisplayName"></param>
            <param name="pMinValue"></param>
            <param name="pIncludeMinEndpoint"></param>
            <param name="pMaxValue"></param>
            <param name="pIncludeMaxEndpoint"></param>
        </member>
        <member name="M:IdeaBlade.Verification.RangeVerifierArgs`1.#ctor(System.ComponentModel.PropertyDescriptor,System.Boolean,System.String,System.Nullable{`0},System.Boolean,System.Nullable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the RangeVerifierArgs class.
            </summary>
            <param name="pPropertyDescriptor"></param>
            <param name="pIsRequired"></param>
            <param name="pDisplayName"></param>
            <param name="pMinValue"></param>
            <param name="pIncludeMinEndpoint"></param>
            <param name="pMaxValue"></param>
            <param name="pIncludeMaxEndpoint"></param>
        </member>
        <member name="M:IdeaBlade.Verification.RangeVerifierArgs`1.#ctor(IdeaBlade.Verification.RangeVerifierArgs{`0})">
            <summary>
            Initializes a new instance of the RangeVerifierArgs class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Verification.RangeVerifierArgs`1.#ctor(IdeaBlade.Verification.VerifierElement)">
            <summary>
            Initializes a new instance of the RangeVerifierArgs class.
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifierArgs`1.MinValue">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MinValue"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifierArgs`1.MaxValue">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.MaxValue"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifierArgs`1.IncludeMinEndpoint">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.IncludeMinEndpoint"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.RangeVerifierArgs`1.IncludeMaxEndpoint">
            <summary>
            See <see cref="P:IdeaBlade.Verification.RangeVerifier`1.IncludeMaxEndpoint"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierArgsElementCollection">
            <summary>
            Represents a <code>&lt;verifierArgs&gt;</code> element containing 
            a collection of <code>&lt;verifierArg&gt;</code> elements.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierArgsElementCollection.GetValue(System.String,System.Type)">
            <summary>
            Returns the value in the <code>&lt;verifierArgs&gt;</code> collection corresponding to the given name.
            If name does not exist, the default value for the given type is returned.
            </summary>
            <param name="pName">The name specified in the <code>&lt;verifierArg&gt;</code> element</param>
            <param name="pType">The type of the value in the <code>&lt;verifierArg&gt;</code> element</param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierErrorsResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierAnd">
            <summary>
              Looks up a localized string similar to {0} and {1}.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierBetween">
            <summary>
              Looks up a localized string similar to {0} must be between {1} and {2}.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierBetweenDate">
            <summary>
              Looks up a localized string similar to {0} must be between {1:d} and {2:d}.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierBetweenStringLength">
            <summary>
              Looks up a localized string similar to {0} must be between {1} and {2} character(s).
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierInList">
            <summary>
              Looks up a localized string similar to Value must be among the valid choices for {0}.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierMaxDate">
            <summary>
              Looks up a localized string similar to {0} must be on or before {1:d}.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierMaxDateExclusive">
            <summary>
              Looks up a localized string similar to {0} must be before {1:d}.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierMaxStringLength">
            <summary>
              Looks up a localized string similar to {0} cannot be longer than {1} characters(s).
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierMaxValue">
            <summary>
              Looks up a localized string similar to {0} must be less than or equal to {1}.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierMaxValueExclusive">
            <summary>
              Looks up a localized string similar to {0} must be less than {1}.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierMinDate">
            <summary>
              Looks up a localized string similar to {0} must be on or after {1:d}.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierMinDateExclusive">
            <summary>
              Looks up a localized string similar to {0} must be after {1:d}.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierMinStringLength">
            <summary>
              Looks up a localized string similar to {0} cannot be shorter than {1} character(s).
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierMinValue">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to {1}.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierMinValueExclusive">
            <summary>
              Looks up a localized string similar to {0} must be greater than {1}.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierNotRequired">
            <summary>
              Looks up a localized string similar to {0} is not required.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierRequired">
            <summary>
              Looks up a localized string similar to {0} is required.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierValid">
            <summary>
              Looks up a localized string similar to {0} must be a valid {1}.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierErrorsResource.VerifierValidPattern">
            <summary>
              Looks up a localized string similar to {0} must be a valid {1} pattern.
            </summary>
        </member>
        <member name="T:IdeaBlade.Verification.VerifierElement">
            <summary>
            Represents a <code>&lt;verifier&gt;</code> element within a configuration file.
            </summary>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierElement.GetValue(System.String,System.Type)">
            <summary>
            Returns the value in the <code>&lt;verifierArgs&gt;</code> collection corresponding to the given name.
            If name does not exist, the default value for the given type is returned.
            </summary>
            <param name="pName">The name specified in the <code>&lt;verifierArg&gt;</code> element</param>
            <param name="pType">The type of the value in the <code>&lt;verifierArg&gt;</code> element</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierElement.GetValue``1(System.String)">
            <summary>
            Returns the value in the <code>&lt;verifierArgs&gt;</code> collection corresponding to the given name.
            If name does not exist, the default value for the given type is returned.
            </summary>
            <param name="pName">The name specified in the <code>&lt;verifierArg&gt;</code> element</param>
            <param name="pType">The type of the value in the <code>&lt;verifierArg&gt;</code> element</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Verification.VerifierElement.GetType(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the fully-qualified type given its name; optionally throws an error 
            if no matching type can be found.
            </summary>
            <param name="pTypeName">A type name to locate</param>
            <param name="pThrowOnError">Whether to throw an error if a matching type cannot be found</param>
            <param name="pIgnoreCase">Whether to ignore case when attempting a match</param>
            <returns>The latest version of a type with the specified name</returns>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierElement.VerifierTypeName">
            <summary>Gets the VerifierType name setting.</summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierElement.ApplicableTypeName">
            <summary>Gets the ApplicableType name setting.</summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierElement.Description">
            <summary>Gets the Description setting.</summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierElement.SortValue">
            <summary>Gets the SortValue setting.</summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierElement.Tag">
            <summary>Gets the Tag setting.</summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierElement.ExecutionModes">
            <summary>Gets the ExecutionModes setting.</summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierElement.OnErrorMode">
            <summary>Gets the OnErrorMode setting.</summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierElement.VerifierArgs">
            <summary>Gets the VerifierArgs setting.</summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierElement.VerifierType">
            <summary>
            Gets the fully-qualified type corresponding to the <see cref="P:IdeaBlade.Verification.VerifierElement.VerifierTypeName"/>; 
            throws an error if no matching type can be found.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierElement.ApplicableType">
            <summary>
            Gets the fully-qualified type corresponding to the <see cref="P:IdeaBlade.Verification.VerifierElement.ApplicableTypeName"/>; 
            throws an error if no matching type can be found.
            </summary>
        </member>
        <member name="P:IdeaBlade.Verification.VerifierElement.Item(System.String)">
            <summary>
            Gets or sets a property, attribute, or child element of this VerifierElement.
            If pName is not found in VerifierElement, then VerifierArgs children are checked.
            </summary>
            <param name="pName">The name of the System.Configuration.ConfigurationProperty to access.</param>
            <returns>The specified property, attribute, or child element</returns>
        </member>
    </members>
</doc>
