<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IdeaBlade.Util</name>
    </assembly>
    <members>
        <member name="T:IdeaBlade.Util.TracePublisher">
            <summary>
            Publishes debugging and tracing messages generated by DevForce applications.
            </summary>
            <remarks>
            <b>TracePublisher</b> is an abstract class containing basic trace publishing functionality.  The
            two concrete implementations are technology-specific:  the <see cref="T:IdeaBlade.Util.RemotingTracePublisher"/> which
            uses .NET remoting to communicate with subscribers, and the <b>WcfTracePublisher</b> which uses
            Windows Communication Foundation.
            <para>
            Every DevForce application contains a local instance of a TracePublisher, and a TraceSubscriber 
            in the <see cref="T:IdeaBlade.Util.TraceFileXmlLogger"/> which is responsible for writing the <b>DebugLog</b>.
            The TracePublisher can be "remoted" - hosted as a service - in order for other subscribers, such 
            as the <b>Trace Viewer utility</b>, to communicate with the publisher.
            </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.Util.ITracePublisher">
            <summary>
            Interface to be implemented by any publisher of trace messages.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.ITracePublisher.Subscribe(IdeaBlade.Util.ITraceSubscriber)">
            <summary>
            Called by <see cref="T:IdeaBlade.Util.ITraceSubscriber"/> implementations in order to receive <see cref="M:IdeaBlade.Util.ITraceSubscriber.OnPublish(IdeaBlade.Util.TraceMessage)"/> notifications.
            </summary>
            <param name="pSubscriber"></param>
        </member>
        <member name="M:IdeaBlade.Util.ITracePublisher.Unsubscribe(IdeaBlade.Util.ITraceSubscriber)">
            <summary>
            Called by <see cref="T:IdeaBlade.Util.ITraceSubscriber"/> implementations when publication notice is no longer wanted.
            </summary>
            <param name="pSubscriber"></param>
        </member>
        <member name="M:IdeaBlade.Util.ITracePublisher.Publish(IdeaBlade.Util.TraceMessage)">
            <summary>
            Instructs the TracePublisher to publish a message.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.ITracePublisher.Ping">
            <summary>
            Determine if the service is active.
            </summary>
            <returns></returns>
        </member>
        <member name="F:IdeaBlade.Util.TracePublisher.DefaultPort">
            <summary>
            Default port.  Currently 9922, but may be overridden in <b>IdeaBlade.ibconfig</b>.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.TracePublisher.DefaultServiceName">
            <summary>
            Default service name.  Currently "TracePublisher", but may be overridden in <b>IdeaBlade.ibconfig</b>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TracePublisher.CreateInstance">
            <summary>
            Create a local instance of the TracePublisher.
            </summary>
            <returns></returns>
            <remarks>
            The setting of the <see cref="P:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo.CommunicationsTechnology"/> property in the IdeaBlade.ibconfig
            determines whether .NET remoting or Windows Communication Foundation will be used for
            communication between a publisher and its subscribers.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.TracePublisher.CreateInstance(IdeaBlade.Util.CommunicationsTechnology)">
            <summary>
            Create a local instance of the TracePublisher.
            </summary>
            <param name="pTechnology">Whether to use WCF or .NET remoting for communication between the publisher and subscribers</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.TracePublisher.GetPublisherUrl(System.String)">
            <summary>
            Returns the full Url.
            </summary>
            <param name="pBaseUrl"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.TracePublisher.MakeRemotable">
            <summary>
            Start the TracePublisher service using default logging information from IdeaBlade.ibconfig.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TracePublisher.MakeRemotable(System.Int32,System.String)">
            <summary>
            Start the TracePublisher service using the port and service name specified.
            </summary>
            <param name="pPort"></param>
            <param name="pServiceName"></param>
        </member>
        <member name="M:IdeaBlade.Util.TracePublisher.MakeRemotableCore">
            <summary>
            Implemented by concrete implementations to host the service.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TracePublisher.PublishCore(IdeaBlade.Util.TraceMessage)">
            <summary>
            Implemented by concrete implementations to publish the message to subscribers.
            </summary>
            <param name="pTraceMessage"></param>
        </member>
        <member name="M:IdeaBlade.Util.TracePublisher.IdeaBlade#Util#ITracePublisher#Subscribe(IdeaBlade.Util.ITraceSubscriber)">
            <summary>
            Do not use.  Call the Subscribe method for the concrete TracePublisher implementation.
            </summary>
            <param name="pSubscriber"></param>
        </member>
        <member name="M:IdeaBlade.Util.TracePublisher.IdeaBlade#Util#ITracePublisher#Unsubscribe(IdeaBlade.Util.ITraceSubscriber)">
            <summary>
            Do not use.  Call the Unsubscribe method for the concrete TracePublisher implementation.
            </summary>
            <param name="pSubscriber"></param>
        </member>
        <member name="M:IdeaBlade.Util.TracePublisher.Publish(IdeaBlade.Util.TraceMessage)">
            <summary>
            Instructs the TracePublisher to publish a message.
            </summary>
            <param name="pTraceMessage"></param>
            <remarks>The <see cref="M:IdeaBlade.Util.ITraceSubscriber.OnPublish(IdeaBlade.Util.TraceMessage)"/> method will be called
            on all subscribers for every message published.</remarks>
        </member>
        <member name="M:IdeaBlade.Util.TracePublisher.Ping">
            <summary>
            Determine if the service is active.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.TracePublisher.#ctor">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TracePublisher.InitializeLifetimeService">
            <summary>
            Obtain an infinite lease.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.TracePublisher.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.TracePublisher.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TracePublisher.Dispose(System.Boolean)">
            <summary>
            IDisposable implementation.
            </summary>
            <param name="pDisposing"></param>
        </member>
        <member name="F:IdeaBlade.Util.TracePublisher.mPort">
            <summary>
            Port in use by the service.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.TracePublisher.mServiceName">
            <summary>
            Service name.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.TracePublisher.mIsRemoted">
            <summary>
            Flag indicating if service is local or remote.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TracePublisher.LocalInstance">
            <summary>
            For backward compatibility - creates a local instance of the technology-specific TracePublisher,
            using the <b>communicationsTechnology</b> setting in IdeaBlade.ibconfig.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TracePublisher.Port">
            <summary>
            Port used by the service.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TracePublisher.ServiceName">
            <summary>
            Name of the service.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TracePublisher.ThreadKeepAliveMilliseconds">
            <summary>
            Milliseconds the publishing thread sleeps between checks of its queue. Default is 1000 milliseconds (1 second).
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TracePublisher.IsRemoted">
            <summary>
            Returns whether the current instance is already remoted.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TracePublisher.BaseUrl">
            <summary>
            Gets the default protocol and server used by the publisher.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.XmlMerger">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlMerger.Merge(System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            For internal use only.
            Merges two XmlDocuments. Fully qualified matches occur first on the value of the 
            'id' attribute if found, otherwise on the element name.
            </summary>
            <param name="pBaseDoc"></param>
            <param name="pOverrideDoc"></param>
        </member>
        <member name="M:IdeaBlade.Util.XmlMerger.MergeNodes(System.Xml.XmlNode,System.Xml.XmlElement,System.Xml.XmlElement)">
            This algorithm modifies the overrideChild
        </member>
        <member name="T:IdeaBlade.Util.IterSort">
            <summary>
            Iterate a collection in sorted order, either using the built-in ordering
            for the object or using a class implementing IComparer.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IterIsolate">
            <summary>
            Isolate this the iteration from the collection. Allows you to 
            modify the underlying collection while in the middle of a foreach
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IterIsolate.#ctor(System.Collections.IEnumerable)">
            <summary>
            Create an instance of the IterIsolate Class
            </summary>
            <param name="enumerable">A class that implements IEnumerable</param>
        </member>
        <member name="M:IdeaBlade.Util.IterIsolate.GetEnumerator">
            <summary>
            <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <returns></returns>
        </member>
        <member name="F:IdeaBlade.Util.IterIsolate.enumerable">
            <summary>
            IEnumerable internal member variable
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IterSort.#ctor(System.Collections.IEnumerable)">
            <summary>
            Create an instance of the IterIsolate Class
            </summary>
            <param name="enumerable">A class that implements IEnumerable</param>
        </member>
        <member name="M:IdeaBlade.Util.IterSort.#ctor(System.Collections.IEnumerable,System.Collections.IComparer)">
            <summary>
            Create an instance of the IterIsolate Class, using a different sort order
            </summary>
            <param name="enumerable">A class that implements IEnumerable</param>
            <param name="comparer">A class that implements IComparer</param>
        </member>
        <member name="M:IdeaBlade.Util.IterSort.GetEnumerator">
            <summary>
            <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.BindableList`1">
            <summary>
            A BindingList with support for DevForce data binding.
            </summary>
            <typeparam name="T">The Type of items in the list </typeparam>
            <remarks>
            The <b>BindableList</b> extends the .NET <see cref="T:System.ComponentModel.BindingList`1"/> to support dynamic management of 
            binding properties and creation of "live" managed lists. 
            The BindableList supports all of the list management features of the BindingList, with additional 
            support for adding and removing <see cref="T:System.ComponentModel.PropertyDescriptor"/>s, and use of a <see cref="P:IdeaBlade.Util.BindableList`1.ListManager"/>.
            <para>
            A <b>BindableList</b> will usually hold Entity objects, but any <see cref="P:IdeaBlade.Util.BindableList`1.ItemType"/>
            is supported, including interfaces and abstract types, allowing you
            to use DevForce data binding for any Type.
            </para>
            <para>
            In a WinForms application, you'll normally assign the BindableList to a 
            <see cref="P:System.ComponentModel.BindingSource`1.DataSource"/>, leaving the <see cref="P:System.ComponentModel.BindingSource`1.DataMember"/> unassigned.  
            When constructing a <see cref="T:IdeaBlade.UI.WinForms.BindingManager"/>, you can
            assign the BindableList to the <see cref="P:System.ComponentModel.BindingSource`1.DataSource"/>, or place the BindableList in a
            BindingSource and then set the <see cref="P:IdeaBlade.UI.WinForms.BindingManager.BindingSource"/> property.
            </para>
            <para>
            The <see cref="P:IdeaBlade.Util.BindableList`1.PropertyDescriptors"/> for a BindableList 
            contain the <see cref="T:System.ComponentModel.PropertyDescriptor"/>s appropriate for objects of the ItemType.
            By default the list's PropertyDescriptorList is one maintained globally by the <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/> class.
            You may choose to maintain a private PropertyDescriptorList instead
            by setting the list's <see cref="P:IdeaBlade.Util.BindableList`1.UsesGlobalPropertyDescriptors"/> property to false.  With a private
            PropertyDescriptorList only the item properties you choose will be exposed for data binding and custom
            properties may be added.
            </para>
            <para>
            Also see <see cref="T:IdeaBlade.Util.PropertyDescriptorFns"/> for functions to construct PropertyDescriptors.
            </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.Util.IHasListManager">
            <summary>
            Interface implemented by lists which can be managed by a <see cref="T:IdeaBlade.Util.IListManager"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IHasListManager.ListManager">
            <summary>
            Gets or sets the list the <see cref="T:IdeaBlade.Util.IListManager"/> for a list.
            </summary>
            <returns></returns>
            <example><code lang="C#">
// This sample uses a live list of customer orders for the current month.
private void TestLiveList() {
   PersistenceManager pm = PersistenceManager.DefaultManager;
   Customer cust  = pm.GetEntity&lt;Customer&gt;(new PrimaryKey(typeof(Customer), 1));
   EntityList&lt;Order&gt; custOrders = cust.OrdersForMonth;

   // See what's in list now.
   System.Diagnostics.Debug.WriteLine("Current orders");
   foreach (Order o in custOrders) {
      System.Diagnostics.Debug.WriteLine(o.Id + "," + o.OrderDate.Value.ToString());
   }

   // Add a few new orders.
   Order newOrder1 = Order.Create(cust);
   Order newOrder2 = Order.Create(cust);

   // Check list again.
   System.Diagnostics.Debug.WriteLine("After additions");
   foreach (Order o in custOrders) {
      System.Diagnostics.Debug.WriteLine(o.Id + "," + o.OrderDate.Value.ToString());
   }

   // Delete one order.
   newOrder1.Delete();

   // And check list again.
   System.Diagnostics.Debug.WriteLine("After deletions");
   foreach (Order o in custOrders) {
      System.Diagnostics.Debug.WriteLine(o.Id + "," + o.OrderDate.Value.ToString());
   }
}

// Sample property on the Customer class to return only orders for the current month.
public sealed class Customer : CustomerDataRow {
//...

    private EntityList&lt;Order&gt; mOrdersForMonth = null;

    public EntityList&lt;Order&gt; OrdersForMonth {
      get {
        if (this.mOrdersForMonth != null) return this.mOrdersForMonth;

        // Let's start with all customer orders (filter will be immediately applied to narrow the list for current month).

        // !!! Can't do this - it will copy the EntityListManager from the .Orders ReadOnlyEntityList too.
        //this.mOrdersForMonth = new EntityList&lt;Order&gt;(this.Orders);

        // !!! Do this instead.
        this.mOrdersForMonth = new EntityList&lt;Order&gt;();
        this.mOrdersForMonth.AddRange(this.Orders);

        // Define filtering criteria using an anonymous predicate - return true if OrderDate is for current month.
        Predicate&lt;Order&gt; filter = delegate(Order pOrder) {
          return pOrder.OrderDate.Value.Year == DateTime.Now.Year &amp;&amp; pOrder.OrderDate.Value.Month == DateTime.Now.Month;
        };

        // Add a ListManager to make this a "live" list.  The PM will use
        // the filter to keep the list current. Changes to OrderDate on existing objects or any
        // new customer orders or deletions will automatically be reflected in the list.
        this.mOrdersForMonth.ListManager = new EntityListManager&lt;Order&gt;(
          this.PersistenceManager,          // the PM which will watch the ELM
          filter,                           // the filter to be applied for items in the list
          new EntityColumn[] { Order.OrderDateEntityColumn },     // Changes to these column(s) cause filter to be applied
          );

        return this.mOrdersForMonth;
      }
    }
}

// A simple Create stub in the Order class.
public sealed class Order : OrderDataRow {
//...

    // Create a new Order for the specified customer (using Default PM).
    public static Order Create(Customer pCustomer) {
      PersistenceManager pm = PersistenceManager.DefaultManager;
      Order newOrder = pm.CreateEntity&lt;Order&gt;();
      pm.GenerateId(newOrder, Order.IdEntityColumn);
      newOrder.Customer = pCustomer;
      newOrder.OrderDate = DateTime.Today;
      newOrder.AddToManager();
      return newOrder;
    }
}
</code></example><example><code lang="VB">
' This sample uses a live list of customer orders for the current month.
Private Sub TestLiveList()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager
   Dim cust As Customer = pm.GetEntity(Of Customer)(New PrimaryKey(GetType(Customer), 1))
   Dim custOrders As EntityList(Of Order) = cust.OrdersForMonth

   ' See what's in list now.
   System.Diagnostics.Debug.WriteLine("Current orders")
   For Each o As Order In custOrders
      System.Diagnostics.Debug.WriteLine((o.Id + "," + o.OrderDate.Value.ToString()))
   Next o

   ' Add a few new orders.
   Dim newOrder1 As Order = Order.Create(cust)
   Dim newOrder2 As Order = Order.Create(cust)

   ' Check list again.
   System.Diagnostics.Debug.WriteLine("After additions")
   For Each o As Order In custOrders
      System.Diagnostics.Debug.WriteLine((o.Id + "," + o.OrderDate.Value.ToString()))
   Next o

   ' Delete one order.
   newOrder1.Delete()

   ' And check list again.
   System.Diagnostics.Debug.WriteLine("After deletions")
   For Each o As Order In custOrders
      System.Diagnostics.Debug.WriteLine((o.Id + "," + o.OrderDate.Value.ToString()))
   Next o
End Sub

Public NotInheritable Class Customer : Inherits CustomerDataRow 
'...

   ' Sample property on the Customer entity to returns only orders for the current month.
   Private mOrdersForMonth As EntityList(Of Order)

   ReadOnly Property OrdersForMonth() As EntityList(Of Order)
      Get
         If Not (Me.mOrdersForMonth Is Nothing) Then
            Return Me.mOrdersForMonth
         End If

         ' Let's start with all customer orders (filter will be immediately applied to narrow the list for current month).

         ' !!! Can't do this - it will copy the EntityListManager from the Orders ReadOnlyEntityList too.
         'Me.mOrdersForMonth = New EntityList(Of Order)(Me.Orders)

         ' !!! Do this instead.
         Me.mOrdersForMonth = New EntityList(Of Order)
         Me.mOrdersForMonth.AddRange(Me.Orders)

         ' Define filtering criteria using a predicate - returns true if OrderDate is for current month.
         Dim filter As New Predicate(Of Order)(AddressOf FilterOrdersByDate)

         ' Add a ListManager to make this a "live" list.  The PM will use
         ' the filter to keep the list current. Changes to OrderDate on existing objects or any
         ' new customer orders or deletions will automatically be reflected in the list.
         ' Parms:
         '   the PM which will watch the ELM
         '   the filter to be applied for items in the list
         '   Changes to these column(s) cause filter to be applied
         Me.mOrdersForMonth.ListManager = New EntityListManager(Of Order)( _
             PersistenceManager.DefaultManager, _
             filter, _
             New EntityColumn() {Order.OrderDateEntityColumn}, _
             )

         Return Me.mOrdersForMonth
      End Get
   End Property

   ' Define the filter predicate function
   Private Shared Function FilterOrdersByDate(ByVal pOrder As Order) As Boolean
      Return pOrder.OrderDate.Value.Year = DateTime.Now.Year And pOrder.OrderDate.Value.Month = DateTime.Now.Month
   End Function
End Class

' A simple Create stub in the Order class.
Public Class Order : inherits OrderDataRow 
' ...
  
   Public Shared Function Create(ByVal pCustomer As Customer) As Order
      Dim pm As PersistenceManager = PersistenceManager.DefaultManager
      Dim newOrder As Order = pm.CreateEntity (of Order )()
      pm.GenerateId(newOrder, Order.IdEntityColumn)
      newOrder.Customer = pCustomer
      newOrder.OrderDate = DateTime.Today
      newOrder.AddToManager()
      Return newOrder
   End Function

   	</code></example>
        </member>
        <member name="T:IdeaBlade.Util.IAdaptiveList">
            <summary>
            Interface implemented by lists supporting dynamic management of <see cref="T:System.ComponentModel.PropertyDescriptor"/>s.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IAdaptiveList.AddPropertyDescriptor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Add a <see cref="T:System.ComponentModel.PropertyDescriptor"/> to the implementor's list.
            </summary>
            <param name="pDescriptor">The PropertyDescriptor to add</param>
            <returns>True if the descriptor was added else false </returns>
        </member>
        <member name="M:IdeaBlade.Util.IAdaptiveList.RemovePropertyDescriptor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Remove the <see cref="T:System.ComponentModel.PropertyDescriptor"/> from the implementor's list.
            </summary>
            <param name="pDescriptor">PropertyDescriptor to remove</param>
            <returns>True if the descriptor was removed else false</returns>
        </member>
        <member name="M:IdeaBlade.Util.IAdaptiveList.GetPropertyDescriptor(System.String)">
            <summary>
            Get the <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the PropertyPath
            from the implementing list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>.
            </summary>
            <param name="pPropertyPath">Simple or nested PropertyPath such as "Customer.CompanyName"
            that identifies the PropertyDescriptor or helps the method construct one.</param>
            <returns>
            A PropertyDescriptor if the method can find or contruct a suitable PropertyDescriptor.
            </returns>
            <remarks>
            The PropertyPath search may be case sensitive; check with the implementor.
            Behavior when the PropertyPath is not found is implementation specific; it is usually null.
            The PropertyPath could be the name of a custom PropertyDescriptor, e.g. "Foo".
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IAdaptiveList.UsesGlobalPropertyDescriptors">
            <summary>
            Get and set whether implementor uses global PropertyDescriptors.
            <para>See also <seealso cref="T:IdeaBlade.Util.PropertyDescriptorList"/>.</para>
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <example><code lang="C#">
private void SampleBindableList() {
  // This example will bind Employee name, hire date and order count to a DataGridView.

  // Create a BindableList and a BindingManager.
  BindableList&lt;Employee&gt; empList = new BindableList&lt;Employee&gt;();
  DataGridViewBindingManager mgr = new DataGridViewBindingManager(this.dataGridView1, empList);

  // Add descriptors for the properties to be bound
  mgr.Descriptors.Add("Name", "FirstName");
  mgr.Descriptors.Add("Hire Date", "HireDate");
  mgr.Descriptors.Add("# Orders", "Orders.Count");

  // Add all employees to employee list.
  empList.AddRange(PersistenceManager.DefaultManager.GetEntities&lt;Employee&gt;());

  // Sort employees by hire date, ascending.
  empList.ApplySort("HireDate", ListSortDirection.Ascending, false);
}
</code></example><example><code lang="VB">
Private Sub SampleBindableList()
  ' This example will bind Employee name, hire date and order count to a DataGridView.

  ' Create a BindableList and a BindingManager.
  Dim empList As New BindableList(Of Employee)()
  Dim mgr As New DataGridViewBindingManager(Me.dataGridView1, empList)

  ' Add descriptors for the properties to be bound.
  mgr.Descriptors.Add("Name", "FirstName")
  mgr.Descriptors.Add("Hire Date", "HireDate")
  mgr.Descriptors.Add("# Orders", "Orders.Count")

  ' Add all employees to employee list.
  empList.AddRange(PersistenceManager.DefaultManager.GetEntities(Of Employee)())

  ' Sort employees by hire date, ascending.
  empList.ApplySort("HireDate", ListSortDirection.Ascending, False)
End Sub
  </code>
</example>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the class using a copy of the list passed in.
            </summary>
            <param name="pList">Enumerable collection</param>
            <remarks>
            If <paramref name="pList"/> has a <see cref="P:IdeaBlade.Util.BindableList`1.ListManager"/> assigned, the <b>ListManager</b>
            will manage this list also.
            </remarks>
            <example><code lang="C#">
private void SampleBindableList() {
  // This example will bind Employee name, hire date and order count to a DataGridView.

  // Create a BindableList and a BindingManager.
  BindableList&lt;Employee&gt; empList = new BindableList&lt;Employee&gt;();
  DataGridViewBindingManager mgr = new DataGridViewBindingManager(this.dataGridView1, empList);

  // Add descriptors for the properties to be bound
  mgr.Descriptors.Add("Name", "FirstName");
  mgr.Descriptors.Add("Hire Date", "HireDate");
  mgr.Descriptors.Add("# Orders", "Orders.Count");

  // Add all employees to employee list.
  empList.AddRange(PersistenceManager.DefaultManager.GetEntities&lt;Employee&gt;());

  // Sort employees by hire date, ascending.
  empList.ApplySort("HireDate", ListSortDirection.Ascending, false);
}
</code></example><example><code lang="VB">
Private Sub SampleBindableList()
  ' This example will bind Employee name, hire date and order count to a DataGridView.

  ' Create a BindableList and a BindingManager.
  Dim empList As New BindableList(Of Employee)()
  Dim mgr As New DataGridViewBindingManager(Me.dataGridView1, empList)

  ' Add descriptors for the properties to be bound.
  mgr.Descriptors.Add("Name", "FirstName")
  mgr.Descriptors.Add("Hire Date", "HireDate")
  mgr.Descriptors.Add("# Orders", "Orders.Count")

  ' Add all employees to employee list.
  empList.AddRange(PersistenceManager.DefaultManager.GetEntities(Of Employee)())

  ' Sort employees by hire date, ascending.
  empList.ApplySort("HireDate", ListSortDirection.Ascending, False)
End Sub
  </code>
</example>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.#ctor(System.Collections.Generic.IList{`0},System.Boolean)">
            <summary>
            Initializes a new instance of this class as a wrapper around the list passed in.
            </summary>
            <param name="pInnerList">The wrapped list</param>
            <param name="pUsesGlobalPropertyDescriptors">True if this list should the global 
            <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/> for the <see cref="P:IdeaBlade.Util.BindableList`1.ItemType"/>.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.AddNewCore">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.ClearItems">
            <summary>
            Clears the collection and removes event handlers from all the items in this collection. Does NOT
            call RemoveItem ( this is the same behavior as the underlying BindingList)
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item and adds an event handler to the item being inserted
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.RemoveItem(System.Int32)">
            <summary>
            Removes and item and removes an event handler from the item being removed
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.SetItem(System.Int32,`0)">
            <summary>
            Changes the item at the specified index and removes the event handler from the old item. Adds an
            event handler to the new item.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
              Occurs when any change occurs to the list
            </summary>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            
            </summary>
            <param name="pProperty"></param>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the first occurrence within the list. 
            </summary>
            <param name="pMatch">Find criteria</param>
            <returns>Found entity</returns>
            <example><code lang="C#">
private void SampleFind() {
   PersistenceManager pm = PersistenceManager.DefaultManager;

   // Retrieve all customers.
   EntityList&lt;Customer&gt; allCustomers = pm.GetEntities&lt;Customer&gt;();
   System.Diagnostics.Debug.WriteLine(allCustomers.Count.ToString());

   // Define find criteria - this looks for companies beginning with letter 'A'.
   Predicate&lt;Customer&gt; filter = delegate(Customer pCustomer) {
     return pCustomer.CompanyName.StartsWith("A");
   };

   // Find a subset of customers.
   List&lt;Customer&gt; AListCustomers = allCustomers.FindAll(filter);
   System.Diagnostics.Debug.WriteLine(AListCustomers.Count.ToString());
}
</code></example><example><code lang="VB">
Private Sub SampleFind()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager

   ' Retrieve all customers.
   Dim allCustomers As EntityList(Of Customer) = pm.GetEntities(Of Customer)()
   System.Diagnostics.Debug.WriteLine(allCustomers.Count.ToString())

   ' Define find criteria - this looks for companies beginning with letter 'A'.
   Dim filter As New Predicate(Of Customer)(AddressOf FindAListCustomers)

   ' Find a subset of customers.
   Dim AListCustomers As List(Of Customer) = allCustomers.FindAll(filter)
   System.Diagnostics.Debug.WriteLine(AListCustomers.Count.ToString())
End Sub

Private Function FindAListCustomers(Of Customer)(ByVal pCustomer As Customer) As Boolean
   Return pCustomer.CompanyName.StartsWith("A")
End Function
		</code>
	</example>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all list elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="pMatch">Find criteria</param>
            <returns>List of found entities</returns>
            <example><code lang="C#">
private void SampleFind() {
   PersistenceManager pm = PersistenceManager.DefaultManager;

   // Retrieve all customers.
   EntityList&lt;Customer&gt; allCustomers = pm.GetEntities&lt;Customer&gt;();
   System.Diagnostics.Debug.WriteLine(allCustomers.Count.ToString());

   // Define find criteria - this looks for companies beginning with letter 'A'.
   Predicate&lt;Customer&gt; filter = delegate(Customer pCustomer) {
     return pCustomer.CompanyName.StartsWith("A");
   };

   // Find a subset of customers.
   List&lt;Customer&gt; AListCustomers = allCustomers.FindAll(filter);
   System.Diagnostics.Debug.WriteLine(AListCustomers.Count.ToString());
}
</code></example><example><code lang="VB">
Private Sub SampleFind()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager

   ' Retrieve all customers.
   Dim allCustomers As EntityList(Of Customer) = pm.GetEntities(Of Customer)()
   System.Diagnostics.Debug.WriteLine(allCustomers.Count.ToString())

   ' Define find criteria - this looks for companies beginning with letter 'A'.
   Dim filter As New Predicate(Of Customer)(AddressOf FindAListCustomers)

   ' Find a subset of customers.
   Dim AListCustomers As List(Of Customer) = allCustomers.FindAll(filter)
   System.Diagnostics.Debug.WriteLine(AListCustomers.Count.ToString())
End Sub

Private Function FindAListCustomers(Of Customer)(ByVal pCustomer As Customer) As Boolean
   Return pCustomer.CompanyName.StartsWith("A")
End Function
		</code>
	</example>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            See <see cref="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            See <see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.AddPropertyDescriptor(System.String,System.String)">
            <summary>
            Create a new custom-named <see cref="T:System.ComponentModel.PropertyDescriptor"/> for a PropertyPath and add it 
            to this list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>. 
            </summary>
            <param name="pPropertyName">The name of the PropertyDescriptor</param>
            <param name="pPropertyPath">The simple or nested path that gets or sets the property value,
            such as the nested path "Customer.CompanyName".</param>
            <returns>True if the descriptor was added to the list's PropertyDescriptorList;
            false if the descriptor already exists in that PropertyDescriptorList</returns>
            <remarks>
            <para>
            The newly added PropertyDescriptor is not immediately accessible via this signature.
            Consider creating it first with one of the <see cref="T:IdeaBlade.Util.PropertyDescriptorFns"/>, 
            then use AddPropertyDescriptor(pDescriptor) to add it to the list.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.AddPropertyDescriptor(System.String)">
            <summary>
            Create a new standard-named <see cref="T:System.ComponentModel.PropertyDescriptor"/> for a nested PropertyPath and add it 
            to this list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>. 
            </summary>
            <param name="pNestedPropertyPath">Nested property path for this list's type, such as "Customer.CompanyName".</param>
            <returns>True if the descriptor was added to the list's PropertyDescriptorList;
            false if the descriptor already exists in that PropertyDescriptorList</returns>
            <remarks>
            DevForce generates a name for the property based on the nested property path.
            This is the standard, recommended way to add a PropertyDescriptor for a nested property path.
            <para>
            The newly added PropertyDescriptor is not immediately accessible via this signature.
            Consider creating it first with one of the <see cref="T:IdeaBlade.Util.PropertyDescriptorFns"/>, 
            then use AddPropertyDescriptor(pDescriptor) to add it to the list.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.AddPropertyDescriptor(System.String,System.Type,IdeaBlade.Util.GetterDelegate,IdeaBlade.Util.SetterDelegate)">
            <summary>
            Create a new custom-named <see cref="T:System.ComponentModel.PropertyDescriptor"/>, 
            based on a full definition of the property including its getter and setter delegates, and add it 
            to this list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>. 
            </summary>
            <param name="pPropertyName">The name of the property in the new PropertyDescriptor.</param>
            <param name="pComponentType">The type of object to which the property is bound.</param>
            <param name="pGetterDelegate">The delegate that retrieves the property value. No getter if null.</param>
            <param name="pSetterDelegate">The delegate that can set the property value. No setter if null.</param>
            <returns>True if the descriptor was added to the list's PropertyDescriptorList;
            false if the descriptor already exists in that PropertyDescriptorList</returns>
            <remarks>
            <para>
            Do not confuse the ComponentType with the PropertyType. 
            If the bound object is "Order" and the PropertyName is "Id",
            "Order" is the ComponentType and "Int64" is the PropertyType.
            The PropertyType is discovered later via reflection.
            </para>
            <para>
            The newly added PropertyDescriptor is not immediately accessible via this signature.
            Consider creating it first with one of the <see cref="T:IdeaBlade.Util.PropertyDescriptorFns"/>,
            then use AddPropertyDescriptor(pDescriptor) to add it to the list.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.AddPropertyDescriptor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Add a <see cref="T:System.ComponentModel.PropertyDescriptor"/>
            to this list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>. 
            </summary>
            <param name="pDescriptor">The PropertyDescriptor to add</param>
            <returns>True if the descriptor was added to the list's PropertyDescriptorList;
            false if the descriptor already exists in that PropertyDescriptorList</returns>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.RemovePropertyDescriptor(System.String)">
            <summary>
            Remove the <see cref="T:System.ComponentModel.PropertyDescriptor"/>
            that matches the specified nested PropertyPath
            from this list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>. 
            </summary>
            <param name="pNestedPropertyPath">Nested PropertyPath such as "Customer.CompanyName"</param>
            <returns>True if the descriptor was removed from the list's PropertyDescriptorList;
            false if the descriptor was not in that PropertyDescriptorList</returns>
            <remarks>
            <para>
            You cannot use this signature to remove a PropertyDescriptor defined for other than a Nested PropertyPath.
            Use <see cref="M:IdeaBlade.Util.BindableList`1.GetPropertyDescriptor(System.String)"/> as in:
            <code>
            // The case of "Foo" matters:
            RemovePropertyDescriptor(GetPropertyDescriptor("Foo"));  
            // Ignores case:
            RemovePropertyDescriptor(PropertyDescriptors.Find("Foo", true));  
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.RemovePropertyDescriptor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Remove the <see cref="T:System.ComponentModel.PropertyDescriptor"/> 
            from this list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>. 
            </summary>
            <param name="pDescriptor">The PropertyDescriptor to remove</param>
            <returns>True if the descriptor was removed from the list's PropertyDescriptorList;
            false if the descriptor was not in that PropertyDescriptorList</returns>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.GetPropertyDescriptor(System.String)">
            <summary>
            Get the <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the PropertyPath
            from the list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>.
            </summary>
            <param name="pPropertyPath">Simple or nested PropertyPath, such as "Customer.CompanyName".</param>
            <returns>The PropertyDescriptor if found; else null.</returns>
            <remarks>
            The PropertyPath search is case sensitive.
            The PropertyPath can be the name of a custom PropertyDescriptor, e.g. "Foo".
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.ApplySort(System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
            Sorts the elements in the list using the specified comparer.
            </summary>
            <param name="pComparer">The IComparer implementation to use when comparing elements. </param>
            <param name="pKeepListSorted">Whether to keep the list sorted</param>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.ApplySort(System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the list based on the natural comparator for the <see cref="P:IdeaBlade.Util.BindableList`1.ItemType"/>.
            </summary>
            <param name="pDirection">The sort direction</param>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.ApplySort(System.String,System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Sorts the list based on the property name and direction specified.
            </summary>
            <param name="pPropertyName">Name of the property on which to sort</param>
            <param name="pDirection">The sort direction</param>
            <param name="pKeepListSorted">Whether to keep the list sorted</param>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Sorts the list based on the <see cref="T:System.ComponentModel.PropertyDescriptor"/> and direction specified.
            </summary>
            <param name="pProperty">PropertyDescriptor on which to sort</param>
            <param name="pDirection">The sort direction</param>
            <param name="pKeepListSorted">Whether to keep the list sorted</param>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the list based on the <see cref="T:System.ComponentModel.PropertyDescriptor"/> and direction specified.
            </summary>
            <param name="pProperty">PropertyDescriptor on which to sort</param>
            <param name="pDirection">The sort direction</param>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.RemoveSort">
            <summary>
            Removes any sort applied to the list.
            </summary>
            <remarks>
            <b>RemoveSort</b> does not actually revert the list to its prior state, but does
             stop it from staying sorted from this point on.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.RemoveSortCore">
            <summary>
            Removes any sorting applied to the list.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Applies a sort to the list.
            </summary>
            <param name="pProperty"></param>
            <param name="pDirection"></param>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of a collection to the end of the list.
            </summary>
            <param name="pValues">The ICollection whose elements should be added to the end of the list</param>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes elements from the list starting at the specified index for the specified count.
            </summary>    
            <param name="pIndex">Index to start removing elements</param>
            <param name="pCount">Number of elements to remove</param>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.ReplaceRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clears the list and then adds elements from the specified collection. This performs a Clear
            followed by an AddRange.
            </summary>
            <param name="pValues">Collection to add</param>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.ResetItem(`0)">
            <summary>
            See <see cref="M:System.ComponentModel.BindingList.ResetItem"/>.
            </summary>
            <param name="pItem"></param>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.ToArray">
            <summary>
            Returns contents of this list as an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.DebuggerDisplayString">
            <summary>
            Display the contents of the collection in the debugger. This is intentionally private, it is called
            only from the debugger due to the presence of the DebuggerDisplay attribute. It is similar
            format to ToString(), but is limited to 250-300 characters or so, so as not to overload the debugger.
            </summary>
            <returns>The string representation of the items in the collection, similar in format to ToString().</returns>
        </member>
        <member name="M:IdeaBlade.Util.BindableList`1.Finalize">
            <summary>
            Finalizer. Removes all item event handlers
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.BindableList`1.ResetEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.BindableList`1.ItemType">
            <summary>
            Gets the type of objects in the list.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.BindableList`1.ListManager">
            <summary>
            Gets or sets the list's <see cref="T:IdeaBlade.Util.IListManager"/>.
            </summary>
            <value></value>
            <returns></returns>
            <remarks>
            Attaching a <b>ListManager</b> to a list turns the list into a "live" or managed list.  
            The ListManager will ensure that any changes, additions or deletions to entities meeting its filtering
            criteria are automatically reflected in the list.  
            </remarks>
            <example><code lang="C#">
// This sample uses a live list of customer orders for the current month.
private void TestLiveList() {
   PersistenceManager pm = PersistenceManager.DefaultManager;
   Customer cust  = pm.GetEntity&lt;Customer&gt;(new PrimaryKey(typeof(Customer), 1));
   EntityList&lt;Order&gt; custOrders = cust.OrdersForMonth;

   // See what's in list now.
   System.Diagnostics.Debug.WriteLine("Current orders");
   foreach (Order o in custOrders) {
      System.Diagnostics.Debug.WriteLine(o.Id + "," + o.OrderDate.Value.ToString());
   }

   // Add a few new orders.
   Order newOrder1 = Order.Create(cust);
   Order newOrder2 = Order.Create(cust);

   // Check list again.
   System.Diagnostics.Debug.WriteLine("After additions");
   foreach (Order o in custOrders) {
      System.Diagnostics.Debug.WriteLine(o.Id + "," + o.OrderDate.Value.ToString());
   }

   // Delete one order.
   newOrder1.Delete();

   // And check list again.
   System.Diagnostics.Debug.WriteLine("After deletions");
   foreach (Order o in custOrders) {
      System.Diagnostics.Debug.WriteLine(o.Id + "," + o.OrderDate.Value.ToString());
   }
}

// Sample property on the Customer class to return only orders for the current month.
public sealed class Customer : CustomerDataRow {
//...

    private EntityList&lt;Order&gt; mOrdersForMonth = null;

    public EntityList&lt;Order&gt; OrdersForMonth {
      get {
        if (this.mOrdersForMonth != null) return this.mOrdersForMonth;

        // Let's start with all customer orders (filter will be immediately applied to narrow the list for current month).

        // !!! Can't do this - it will copy the EntityListManager from the .Orders ReadOnlyEntityList too.
        //this.mOrdersForMonth = new EntityList&lt;Order&gt;(this.Orders);

        // !!! Do this instead.
        this.mOrdersForMonth = new EntityList&lt;Order&gt;();
        this.mOrdersForMonth.AddRange(this.Orders);

        // Define filtering criteria using an anonymous predicate - return true if OrderDate is for current month.
        Predicate&lt;Order&gt; filter = delegate(Order pOrder) {
          return pOrder.OrderDate.Value.Year == DateTime.Now.Year &amp;&amp; pOrder.OrderDate.Value.Month == DateTime.Now.Month;
        };

        // Add a ListManager to make this a "live" list.  The PM will use
        // the filter to keep the list current. Changes to OrderDate on existing objects or any
        // new customer orders or deletions will automatically be reflected in the list.
        this.mOrdersForMonth.ListManager = new EntityListManager&lt;Order&gt;(
          this.PersistenceManager,          // the PM which will watch the ELM
          filter,                           // the filter to be applied for items in the list
          new EntityColumn[] { Order.OrderDateEntityColumn },     // Changes to these column(s) cause filter to be applied
          );

        return this.mOrdersForMonth;
      }
    }
}

// A simple Create stub in the Order class.
public sealed class Order : OrderDataRow {
//...

    // Create a new Order for the specified customer (using Default PM).
    public static Order Create(Customer pCustomer) {
      PersistenceManager pm = PersistenceManager.DefaultManager;
      Order newOrder = pm.CreateEntity&lt;Order&gt;();
      pm.GenerateId(newOrder, Order.IdEntityColumn);
      newOrder.Customer = pCustomer;
      newOrder.OrderDate = DateTime.Today;
      newOrder.AddToManager();
      return newOrder;
    }
}
</code></example><example><code lang="VB">
' This sample uses a live list of customer orders for the current month.
Private Sub TestLiveList()
   Dim pm As PersistenceManager = PersistenceManager.DefaultManager
   Dim cust As Customer = pm.GetEntity(Of Customer)(New PrimaryKey(GetType(Customer), 1))
   Dim custOrders As EntityList(Of Order) = cust.OrdersForMonth

   ' See what's in list now.
   System.Diagnostics.Debug.WriteLine("Current orders")
   For Each o As Order In custOrders
      System.Diagnostics.Debug.WriteLine((o.Id + "," + o.OrderDate.Value.ToString()))
   Next o

   ' Add a few new orders.
   Dim newOrder1 As Order = Order.Create(cust)
   Dim newOrder2 As Order = Order.Create(cust)

   ' Check list again.
   System.Diagnostics.Debug.WriteLine("After additions")
   For Each o As Order In custOrders
      System.Diagnostics.Debug.WriteLine((o.Id + "," + o.OrderDate.Value.ToString()))
   Next o

   ' Delete one order.
   newOrder1.Delete()

   ' And check list again.
   System.Diagnostics.Debug.WriteLine("After deletions")
   For Each o As Order In custOrders
      System.Diagnostics.Debug.WriteLine((o.Id + "," + o.OrderDate.Value.ToString()))
   Next o
End Sub

Public NotInheritable Class Customer : Inherits CustomerDataRow 
'...

   ' Sample property on the Customer entity to returns only orders for the current month.
   Private mOrdersForMonth As EntityList(Of Order)

   ReadOnly Property OrdersForMonth() As EntityList(Of Order)
      Get
         If Not (Me.mOrdersForMonth Is Nothing) Then
            Return Me.mOrdersForMonth
         End If

         ' Let's start with all customer orders (filter will be immediately applied to narrow the list for current month).

         ' !!! Can't do this - it will copy the EntityListManager from the Orders ReadOnlyEntityList too.
         'Me.mOrdersForMonth = New EntityList(Of Order)(Me.Orders)

         ' !!! Do this instead.
         Me.mOrdersForMonth = New EntityList(Of Order)
         Me.mOrdersForMonth.AddRange(Me.Orders)

         ' Define filtering criteria using a predicate - returns true if OrderDate is for current month.
         Dim filter As New Predicate(Of Order)(AddressOf FilterOrdersByDate)

         ' Add a ListManager to make this a "live" list.  The PM will use
         ' the filter to keep the list current. Changes to OrderDate on existing objects or any
         ' new customer orders or deletions will automatically be reflected in the list.
         ' Parms:
         '   the PM which will watch the ELM
         '   the filter to be applied for items in the list
         '   Changes to these column(s) cause filter to be applied
         Me.mOrdersForMonth.ListManager = New EntityListManager(Of Order)( _
             PersistenceManager.DefaultManager, _
             filter, _
             New EntityColumn() {Order.OrderDateEntityColumn}, _
             )

         Return Me.mOrdersForMonth
      End Get
   End Property

   ' Define the filter predicate function
   Private Shared Function FilterOrdersByDate(ByVal pOrder As Order) As Boolean
      Return pOrder.OrderDate.Value.Year = DateTime.Now.Year And pOrder.OrderDate.Value.Month = DateTime.Now.Month
   End Function
End Class

' A simple Create stub in the Order class.
Public Class Order : inherits OrderDataRow 
' ...
  
   Public Shared Function Create(ByVal pCustomer As Customer) As Order
      Dim pm As PersistenceManager = PersistenceManager.DefaultManager
      Dim newOrder As Order = pm.CreateEntity (of Order )()
      pm.GenerateId(newOrder, Order.IdEntityColumn)
      newOrder.Customer = pCustomer
      newOrder.OrderDate = DateTime.Today
      newOrder.AddToManager()
      Return newOrder
   End Function

   	</code></example>
        </member>
        <member name="P:IdeaBlade.Util.BindableList`1.PropertyDescriptors">
            <summary>
            Gets the <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/> associated with this list.
            </summary>
            <remarks>
            Returns the global PropertyDescriptorList associated with the <see cref="P:IdeaBlade.Util.BindableList`1.ItemType"/>
            if the <see cref="P:IdeaBlade.Util.BindableList`1.UsesGlobalPropertyDescriptors"/> property is true;
            otherwise, it returns the list's private PropertyDescriptorList.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.BindableList`1.UsesGlobalPropertyDescriptors">
            <summary>
            Gets or sets whether this list uses the global <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/> for this <see cref="P:IdeaBlade.Util.BindableList`1.ItemType"/>.
            </summary>
            <remarks>
            Setting this property clears the list's private PropertyDescriptorList.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.BindableList`1.IsSorted">
            <summary>
            Gets whether this list is sorted.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.BindableList`1.IsSortMaintained">
            <summary>
            Gets whether the this list is kept in sorted order.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.BindableList`1.IsSortedCore">
            <summary>
            Returns whether the list is sorted.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.BindableList`1.SortDirectionCore">
            <summary>
            Gets the sort direction.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.BindableList`1.SortPropertyCore">
            <summary>
            Gets the property the list is sorted by.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.BindableList`1.SupportsSortingCore">
            <summary>
            Gets whether the list supports sorting.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.BindableList`1.InnerList">
            <summary>
            Gets the contained list of elements.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.BindingBrowsableAttribute">
            <summary>
            An <see cref="T:System.Attribute"/> used to indicate if a property or class
            can be displayed in the DevForce binding manager designers.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.BindingBrowsableAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BindingBrowsableAttribute class.
            </summary>
            <param name="pIsBrowsable">Whether the associated property or class is UI Bindable by default</param>
            <remarks>
            If <paramref name="pIsBrowsable"/> is false the associated property or class will not be visible
            in the DevForce designers.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.BindingBrowsableAttribute.IsBrowsable">
            <summary>
            Gets whether this class or property is BindingBrowsable by default.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.TypeTransformManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypeTransformManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TypeTransformManager"/> class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypeTransformManager.Register(IdeaBlade.Util.TypeTransformer)">
            <summary>
            Registers the specified transformer.
            </summary>
            <param name="pTransformer">transformer</param>
        </member>
        <member name="M:IdeaBlade.Util.TypeTransformManager.Register(System.Object,IdeaBlade.Util.TypeTransformer)">
            <summary>
            Registers the specified transformer.
            </summary>
            <param name="pKey">key</param>
            <param name="pTransformer">transformer</param>
        </member>
        <member name="M:IdeaBlade.Util.TypeTransformManager.Transform(System.Object,System.Type,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Transforms the specified input using a key to determine what transform to use.
            </summary>
            <param name="pInput">Input</param>
            <param name="pOutputType">The desired output type.</param>
            <param name="pAllowNull">if set to <c>true</c> allow null</param>
            <param name="pThrowOnError">if set to <c>true</c> throw on error</param>
            <param name="pContext">context</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.TypeTransformManager.GetTransformer(System.Type,System.Type,System.Object)">
            <summary>
            Gets the transformer.
            </summary>
            <param name="pInputType">Type of the input.</param>
            <param name="pOutputType">Type of the output.</param>
            <param name="pContext">context</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.TypeTransformManager.GetTransformer(System.Object)">
            <summary>
            Gets the transformer.
            </summary>
            <param name="pKey">key</param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.TypeTransformManager.Instance">
            <summary>
            Gets the singleton that represents 
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.WebServiceElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.WebServiceElement.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WebServiceElement.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WebServiceElement.RemoteBaseUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WebServiceElement.ServerPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WebServiceElement.ServiceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WebServiceElement.Authentication">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.ProbeAssemblyNameCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.ConfigStringCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.ConfigStringCollection.IsReadOnly">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.ConfigStringCollection.CreateNewElement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.ConfigStringCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.ConfigStringCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.ConfigStringCollection.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="pKey"></param>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.ConfigStringCollection.Add(System.String)">
            <summary>
            
            </summary>
            <param name="pKey"></param>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.ConfigStringCollection.CollectionType">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.ConfigStringCollection.ConfigStrings">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.Configuration.ProbeAssemblyNameCollection.msInstance">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.ProbeAssemblyNameCollection.ElementName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.ProbeAssemblyNameCollection.Default">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.AcceptFilterCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.Configuration.AcceptFilterCollection.msInstance">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.AcceptFilterCollection.ElementName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.AcceptFilterCollection.Default">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.RejectFilterCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.Configuration.RejectFilterCollection.msInstance">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RejectFilterCollection.ElementName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RejectFilterCollection.Default">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.OptionCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.Configuration.OptionCollection.msInstance">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.OptionCollection.ElementName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.OptionCollection.Default">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.ConfigStringElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.ConfigStringElement.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.ConfigStringElement.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="pText"></param>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.ConfigStringElement.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.ConfigStringElement.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.NamespaceDoc">
            <summary>
              Contains a set of utility classes used internally within the IdeaBlade framework,
              but which may also be used to facilitate many of the low level
              functions needed to build complex applications.  Services include debug
              logging and tracing, collection management, XML parsing, and
              file system access wrappers.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.ConsoleHandlerDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IConsoleService">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IConsoleService.ConsoleHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.WeakEventHandlerFast`1">
             <summary>
             Intended to be used in those cases where a publisher should not hold references to its subscribers
             as implicitly occurs via the regular event model
             so
               Publisher.Event += new xxxEventHandler(subscriberMethod)  // publisher has ref to subscriber
                 becomes
               Publisher.Event += new WeakEventHandlerFast&lt;xxxEventArgs&gt;(subscriberMethod, publisherEventName);
             
             we want to insure that if we see Publisher = null we want to make sure that it is not stopped
             from being garbage collected by subscribers still holding a ref to it.
            
             Use carefully!. All weak event handlers must be removed before the subscriber object 
             is garbage collected, otherwise the underlying WeakReferenceToEventHandler's will 
             accumulate in publishers
             an event.
             </summary>
             <typeparam name="TEventArgs"></typeparam>
        </member>
        <member name="M:IdeaBlade.Util.WeakEventHandlerFast`1.#ctor(System.EventHandler{`0},System.String)">
            <summary>
            
            </summary>
            <param name="pStrongEventHandler"></param>
            <param name="pEventName"></param>
        </member>
        <member name="M:IdeaBlade.Util.WeakEventHandlerFast`1.op_Implicit(IdeaBlade.Util.WeakEventHandlerFast{`0})~System.EventHandler{`0}">
            <summary>
            Implicit conversion allowing this object to be used in place of
            an event handler
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.WeakEventHandlerFast`1.mSubstituteHandler">
            <summary>
            Pre-calculated event handler for fast adding and removing of an event handler
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.WeakEventHandlerFast`1.WeakReferenceToEventHandler">
            <summary>
            Holds a weak reference to an event handler
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.WeakEventHandlerFast`1.WeakReferenceToEventHandler.#ctor(System.EventHandler{`0},System.String)">
            <summary>
            
            </summary>
            <param name="pEventHandler"></param>
            <param name="pEventName"></param>
        </member>
        <member name="M:IdeaBlade.Util.WeakEventHandlerFast`1.WeakReferenceToEventHandler.IntermediateEventDelegate(System.Object,`0)">
            <summary>
            This is an intermediate event handler that the event source
            has a strong reference to.
            </summary>
            <param name="pSender"></param>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Util.WeakEventHandlerFast`1.WeakReferenceToEventHandler.RemoveHandlerFrom(System.Object)">
            <summary>
            Removes the intermediate event handler from the event source object
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.WeakEventHandlerFast`1.WeakReferenceToEventHandler.mEventName">
            <summary>
            The name of the event in the event source (publisher). Stored so that the event
            handler can be removed.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.WeakEventHandlerFast`1.WeakReferenceToEventHandler.EventHandler">
            <summary>
            Gets the original event handler
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.WeakEventHandlerFast`1.WeakReferenceToEventHandler.EventName">
            <summary>
            Gets the event name
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Set`1">
            <summary>
               This class performs standard Set operations (Intersect and Union)
               Think of a Set as a Collection with no repeated elements
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Set`1.#ctor">
            <summary>
            Initialize a new instance of the Set class
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initialize a new instance of the Set class using a collection to prepopulate the Set.
            Any duplicates in the collection will be ignored.
            </summary>
            <param name="pCollection">The collection to use to prepopulate the Set</param>
        </member>
        <member name="M:IdeaBlade.Util.Set`1.Intersect(System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            Returns the intersection of this Set and all of the elements for an array of specified collections
            </summary>
            <param name="pCollections">An array of collections</param>
            <returns>A new Set that represents the intersection of this set and the specified array
            of collections</returns>
        </member>
        <member name="M:IdeaBlade.Util.Set`1.Union(System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            Returns the union of all of the parameter collections
            </summary>
            <param name="pCollections">An array of collections</param>
            <returns>A new Set that represents the union of this set and the specified array
            of collections</returns>
        </member>
        <member name="M:IdeaBlade.Util.Set`1.Subtract(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns the result of subtracting the contents of collection2 from collection1
            </summary>
            <param name="pCollection1"></param>
            <param name="pCollection2"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Set`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates this Set to represent the intersection of the current contents with  
            the contents of a specified collection
            </summary>
            <param name="pCollection">The collection</param>
        </member>
        <member name="M:IdeaBlade.Util.Set`1.Union(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates this Set to represent the union of the current contents with  
            the contents of a specified collection
            </summary>
            <param name="pCollection">The collection</param>
        </member>
        <member name="M:IdeaBlade.Util.Set`1.Subtract(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the contents of this collection from the current set
            </summary>
            <param name="pCollection"></param>
        </member>
        <member name="M:IdeaBlade.Util.Set`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Same operation as the Union method. See <see cref="M:IdeaBlade.Util.Set.Union(System.Collections.ICollection)"/>
            </summary>
            <param name="pCollection"></param>
        </member>
        <member name="M:IdeaBlade.Util.Set`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates this Set by removing all items from the specified collection
            </summary>
            <param name="pCollection"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Set`1.Add(`0)">
            <summary>
            Adds (Unions) an object with the current contents of this set
            </summary>
            <param name="pItem">The object to add to this set</param>
        </member>
        <member name="M:IdeaBlade.Util.Set`1.Remove(`0)">
            <summary>
            Removes an object from the set
            </summary>
            <param name="pItem"></param>
        </member>
        <member name="M:IdeaBlade.Util.Set`1.Clear">
            <summary>
            Empties this Set
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Set`1.Contains(`0)">
            <summary>
            Determines whether the set contains an object
            </summary>
            <param name="pItem"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Set`1.CopyTo(`0[],System.Int32)">
            <summary>
            See <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
            </summary>
            <param name="pArray"></param>
            <param name="pIndex"></param>
        </member>
        <member name="M:IdeaBlade.Util.Set`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.Set`1.Count">
            <summary>
            The number of elements in this Set. <see cref="P:System.Collections.ICollection.Count"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Set`1.Items">
            <summary>
            Returns the contents of this set as a <see cref="T:System.Collections.ICollection"/>Collection
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Set`1.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.InternalFns">
            <summary>
            A collection of static utility methods to assist in using the .NET reflection API.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.InternalFns.DynamicAssemblyNameSuffix">
            <summary>
            Suffix added to all dynamic assemblies constructed by the DevForce framework.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.InternalFns.IdeaBladeAssemblyExtn">
            <summary>
            Version, culture and PublicKeyToken for all IdeaBlade assemblies - should be concatenated
            to the end of a partially qualified assembly name to fully qualify it
            See GetIdeaBladeType
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.InternalFns.IdeaBladeProgramFilesFolderRegistryKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.InternalFns.GetIdeaBladeAssemblyName(System.String)">
            <summary>
            
            </summary>
            <param name="pAssemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.InternalFns.GetIdeaBladeExecutablesPath">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.InternalFns.GetIdeaBladeAssembly(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pAssemblyName"></param>
            <param name="pThrowOnError"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.InternalFns.GetIdeaBladeType(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pTypeName"></param>
            <param name="pThrowOnError"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.InternalFns.IsNet30Installed">
            <summary>
            Determines whether .NET 3.0 is installed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.TypedListPropertyAdapter">
            <summary>
            IPropertyAdapter that uses runtime reflection on an ITypedList and a property path
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IPropertyAdapter">
            <summary>
            Interface to allow a property of an object to be both set and retrieved
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IPropertyAdapter.GetValue(System.Object)">
            <summary>
            Get the value of the property of the specified object
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IPropertyAdapter.SetValue(System.Object,System.Object)">
            <summary>
            Set the value of the property
            </summary>
            <param name="pObject"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:IdeaBlade.Util.IPropertyAdapter.GetPropertyType">
            <summary>
            Gets the datatype of the property
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IPropertyAdapter.ReadOnly">
            <summary>
            Get whether or not the property can be set
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.TraceFns">
            <summary>
            A collection of static methods used to provide code assertions, tracing and logging
            functionality for release builds.  
            <seealso cref="T:IdeaBlade.Util.DebugFns"/>
            </summary>
            <remarks>
            <para>Both <b>TraceFns</b> and <see cref="T:IdeaBlade.Util.DebugFns"/> provide
            identical behavior except that calls to methods in this class are intended to always execute.
            In Visual Studio .NET projects, the conditional TRACE flag is enabled by default 
            for both release and debug builds.
            </para>
            <para>Output is to the <see cref="P:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo.LogFile"/>
            specified in the <b>IdeaBlade.ibconfig</b> file, and can also be viewed using the 
            <b>Trace Viewer</b> utility, or any class implementing <see cref="T:IdeaBlade.Util.ITraceSubscriber"/>.
            </para>
            <para>The <see cref="P:IdeaBlade.Util.TraceFns.Filters"/> property can be set using the
            <see cref="P:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo.RejectFilters"/> and 
            <see cref="P:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo.AcceptFilters"/> nodes in the IdeaBlade.ibconfig
            file to enable and disable logging from specific namespaces.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.TraceFns.Assert(System.Boolean)">
            <summary>
            Asserts that the specified condition is true; raises an exception if it is not.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceFns.Assert(System.Boolean,System.String)">
            <summary>
            Asserts that the specified condition is true; raises an exception if it is not.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceFns.Close">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceFns.Fail(System.String)">
            <summary>
            Force an exception.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceFns.Flush">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceFns.WriteLine(System.Object)">
            <summary>
            Write a string representation of an object to the log.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceFns.WriteLineIf(System.Boolean,System.Object)">
            <summary>
            Write a string representation of an object to the log if the specified condition is true.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceFns.#ctor">
            <summary>
            Initializes a new instance of the TraceFns class
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceFns.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceFns.StackAssert(System.Boolean,System.String)">
            <summary>
            Writes the message if the condition is false.
            </summary>
            <param name="pCondition"></param>
            <param name="pMessage"></param>
        </member>
        <member name="M:IdeaBlade.Util.TraceFns.StackFail(System.String)">
            <summary>
            Writes the message and throws an <see cref="T:IdeaBlade.Util.AssertionException"/>.
            </summary>
            <param name="pMessage"></param>
        </member>
        <member name="M:IdeaBlade.Util.TraceFns.StackWriteLineIf(System.Boolean,System.String)">
            <summary>
            Writes the message if the condition is true.
            </summary>
            <param name="pCondition"></param>
            <param name="pMessage"></param>
        </member>
        <member name="M:IdeaBlade.Util.TraceFns.StackWriteLine(System.Diagnostics.StackFrame,System.String)">
            <summary>
            Writes the message.
            </summary>
            <param name="pStackFrame"></param>
            <param name="pMessage"></param>
        </member>
        <member name="M:IdeaBlade.Util.TraceFns.GetNamespace(System.Diagnostics.StackFrame)">
            <summary>
            
            </summary>
            <param name="pStackFrame"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.TraceFns.PassesFilter(System.String)">
            <summary>
            Returns true if the specified namespace passes the <see cref="T:IdeaBlade.Util.NamespaceFilter"/>s.
            </summary>
            <param name="pNamespace"></param>
            <returns></returns>
        </member>
        <member name="F:IdeaBlade.Util.TraceFns.mFilters">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TraceFns.Filters">
            <summary>
            List of NamespaceFilters that determine which namespaces are written to the log
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IterReverse">
            <summary>
            Iterate a collection in the reverse order
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IterReverse.#ctor(System.Collections.IEnumerable)">
            <summary>
            Create an instance of the IterReverse Class
            </summary>
            <param name="enumerable">A class that implements IEnumerable</param>
        </member>
        <member name="M:IdeaBlade.Util.IterReverse.GetEnumerator">
            <summary>
            <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.IndexedListPropertyAdapter">
            <summary>
            Summary description for IndexedListPropertyAdapter
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IndexedListPropertyAdapter.#ctor(System.Type,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IndexedListPropertyAdapter.GetValue(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IndexedListPropertyAdapter.SetValue(System.Object,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IndexedListPropertyAdapter.GetPropertyType">
            <summary>
            Gets the datatype of the property
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IndexedListPropertyAdapter.ReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.WebServiceVisibleAttribute">
            <summary>
            An <see cref="T:System.Attribute"/> used to indicate when a business object property should
            be exposed when the business object is returned from a Web Method.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.WebServiceVisibleAttribute.#ctor">
            <summary>
            Initializes a new instance of the WebServiceVisibleAttribute class.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.DatabaseProduct">
            <summary>
            Describes the database product.
            </summary>
            <remarks>
            You can specify the database product in the <see cref="P:IdeaBlade.Util.IdeaBladeConfig.XmlRdbKey.DatabaseProduct"/>
            property for each RdbKey in your <b>IdeaBlade.ibconfig</b>.
            </remarks>
        </member>
        <member name="F:IdeaBlade.Util.DatabaseProduct.Unknown">
            <summary>
            Database is either unknown or not supported.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.DatabaseProduct.SqlServer">
            <summary>
            Microsoft SQL Server.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.DatabaseProduct.Oracle">
            <summary>
            Oracle Database.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.DatabaseProduct.DB2">
            <summary>
            IBM DB2 Universal Database.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.DatabaseProduct.AdaptiveServer">
            <summary>
            Sybase Adaptive Server.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.DatabaseProduct.SqlServerCe">
            <summary>
            Microsoft SQL Server Compact Edition.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.RemotingTraceSubscriber">
            <summary>
            Subscriber to a <see cref="T:IdeaBlade.Util.RemotingTracePublisher"/>.
            </summary>
            <remarks>
            This TraceSubscriber uses .NET remoting to communicate with a TracePublisher.
            </remarks>
            <seealso cref="T:IdeaBlade.Util.RemotingTracePublisher"/>
        </member>
        <member name="T:IdeaBlade.Util.TraceSubscriber">
            <summary>
            Abstract class providing common processing for an <see cref="T:IdeaBlade.Util.ITraceSubscriber"/> implementation.
            </summary>
            <remarks>
            The two concrete implementations of the <b>TraceSubscriber</b> are technology-specific:  
            the <see cref="T:IdeaBlade.Util.RemotingTraceSubscriber"/> which uses .NET remoting to communicate with a TracePublisher,
            and the <b>WcfTraceSubscriber</b> which uses Windows Communication Foundation.
            <para>
            DevForce provides two uses of the TraceSubscriber, the <see cref="T:IdeaBlade.Util.TraceFileXmlLogger"/> and the <b>Trace Viewer</b>.  
            These both use the appropriate technology-specific concrete implementation.
            </para>
            <para>
            This implementation of the <see cref="T:IdeaBlade.Util.ITraceSubscriber"/> interface allows its owning class to
            be technology-agnostic, with all knowledge of the publisher and the communication technology
            encapsulated within the class.
            </para>
            <para>
            For developers implementing a custom TraceSubscriber, you can extend this class or one
            of the concrete implementations, or implement either the <see cref="T:IdeaBlade.Util.ITraceSubscriber"/> or
            <b>IWcfTraceSubscriberCallback</b> interface.  Note that communication technologies cannot 
            be "mixed and matched":  the subscriber must use the same communication technology as its
            publisher.
            </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.Util.ITraceSubscriber">
            <summary>
            Interface that any subscriber to the <see cref="T:IdeaBlade.Util.TracePublisher"/> must implement.
            </summary>
            <remarks>
            IdeaBlade ships with two subscribers, the <see cref="T:IdeaBlade.Util.TraceFileXmlLogger"/> which generates
            the output log file, and the <b>Trace Viewer</b> utility.  To create your own subscriber, 
            <b>Subscribe</b> to the <see cref="T:IdeaBlade.Util.TracePublisher"/>
            and appropriately handle <see cref="M:IdeaBlade.Util.ITraceSubscriber.OnPublish(IdeaBlade.Util.TraceMessage)"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.ITraceSubscriber.OnPublish(IdeaBlade.Util.TraceMessage)">
            <summary>
            Implement to receive messages from the publisher.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceSubscriber.CreateInstance">
            <summary>
            Create a technology-specific TraceSubscriber instance.
            </summary>
            <returns></returns>
            <remarks>
            The setting of the <see cref="P:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo.CommunicationsTechnology"/> property in the IdeaBlade.ibconfig
            determines whether .NET remoting or Windows Communication Foundation will be used for
            communication between a publisher and its subscribers.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.TraceSubscriber.CreateInstance(IdeaBlade.Util.CommunicationsTechnology)">
            <summary>
            Create a technology-specific TraceSubscriber instance.
            </summary>
            <param name="pTechnology">Whether to use WCF or .NET remoting for communication between the publisher and subscribers</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.TraceSubscriber.StartSubscription">
            <summary>
            Start subscribing to a local TracePublisher.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceSubscriber.StartSubscription(System.String)">
            <summary>
            Start subscribing to a remote TracePublisher at the specified Url.
            </summary>
            <param name="pPublisherUrl"></param>
        </member>
        <member name="M:IdeaBlade.Util.TraceSubscriber.StartSubscription(IdeaBlade.Util.TracePublisher)">
            <summary>
            Start subscribing to the specified local TracePublisher instance.
            </summary>
            <param name="pTracePublisher"></param>
        </member>
        <member name="M:IdeaBlade.Util.TraceSubscriber.StopSubscription">
            <summary>
            Unsubscribe from the TracePublisher.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceSubscriber.PingPublisher">
            <summary>
            Ping the TracePublisher.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.TraceSubscriber.OnPublish(IdeaBlade.Util.TraceMessage)">
            <summary>
            Receive trace messages from the TracePublisher.
            </summary>
            <param name="pTraceMessage"></param>
            <remarks>
            Raises the <see cref="E:IdeaBlade.Util.TraceSubscriber.Publish"/> event.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.TraceSubscriber.OnSubscriptionError">
            <summary>
            Raise the <see cref="E:IdeaBlade.Util.TraceSubscriber.SubscriptionError"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceSubscriber.InitializeLifetimeService">
            <summary>
            Obtain an infinite lease.
            </summary>
            <returns></returns>
        </member>
        <member name="E:IdeaBlade.Util.TraceSubscriber.Publish">
            <summary>
            Event fired when a message is published.
            </summary>
        </member>
        <member name="E:IdeaBlade.Util.TraceSubscriber.SubscriptionError">
            <summary>
            Event fired when an error occurs.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TraceSubscriber.IsSubscribed">
            <summary>
            Returns whether the subscriber is currently subscribed to a publisher.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TraceSubscriber.Protocol">
            <summary>
            Returns the protocol used to communicate with a remote publisher.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.RemotingTraceSubscriber.StartSubscription">
            <summary>
            Start subscribing to a local TracePublisher.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.RemotingTraceSubscriber.StartSubscription(System.String)">
            <summary>
            Start subscribing to a remote TracePublisher at the specified Url.
            </summary>
            <param name="pPublisherUrl"></param>
        </member>
        <member name="M:IdeaBlade.Util.RemotingTraceSubscriber.StartSubscription(IdeaBlade.Util.TracePublisher)">
            <summary>
            Start subscribing to the specified local TracePublisher instance.
            </summary>
            <param name="pTracePublisher"></param>
        </member>
        <member name="M:IdeaBlade.Util.RemotingTraceSubscriber.StopSubscription">
            <summary>
            Unsubscribe from the TracePublisher.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.RemotingTraceSubscriber.PingPublisher">
            <summary>
            Ping the TracePublisher.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.RemotingTraceSubscriber.IsSubscribed">
            <summary>
            Returns whether the subscriber is currently subscribed to a publisher.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.RemotingTraceSubscriber.Protocol">
            <summary>
            Returns the protocol used to communicate with a remote publisher.
            </summary>
            <remarks>
            Always "tcp".
            </remarks>
        </member>
        <member name="T:IdeaBlade.Util.MaxTextLengthAttribute">
            <summary>
            An <see cref="T:System.Attribute"/> subclass that is used to mark up autogenerated
            business objects.  The maximum length of a database string column is not available
            via standard reflection mechanisms.  This attribute allows individual property accessors that are
            associated with these columns to describe the maximum length of the underlying datastore.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.MaxTextLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the MaxTextLengthAttribute class
            </summary>
            <param name="pMaxLength">The maximum length in characters of the underlying string
            database column</param>
        </member>
        <member name="P:IdeaBlade.Util.MaxTextLengthAttribute.MaxLength">
            <summary>
            The maximum length of the underlying database column.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.DBDataTypeAttribute">
            <summary>
            An <see cref="T:System.Attribute"/> that is used to mark up auto-generated
            business objects.  
            </summary>
            <remarks>
            <para>
            The explicit datatype of any nullable object is always 'Object'.  
            The <b>DBDataTypeAttribute</b> specifies the corresponding internal database datatype 
            of the object.
            </para>
            <para>This attribute may also be used to mark up properties on other objects for which
            you want to use the IdeaBlade designers to add bindings.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.DBDataTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the DBDataTypeAttribute class
            </summary>
            <param name="pDataType">The database datatype</param>
        </member>
        <member name="M:IdeaBlade.Util.DBDataTypeAttribute.GetPropertyType(System.ComponentModel.PropertyDescriptor)">
            <summary>
              Get the underlying data type for a property.
              Reads metadata, if present, for nullable value types.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.DBDataTypeAttribute.GetPropertyType(System.Reflection.PropertyInfo)">
            <summary>
              Get the underlying data type for a property.
              Reads metadata, if present, for nullable value types.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.DBDataTypeAttribute.DataType">
            <summary>
            The database datatype
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.StringFns">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.StringFns.ProperCase(System.String)">
            <summary>
            Proper cases (first letter uppercase) the incoming string
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.StringFns.CamelCase(System.String)">
            <summary>
            
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.StringFns.PropertyNameToDisplayName(System.String)">
            <summary>
            
            </summary>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.StringFns.StringToByteArray(System.String)">
            <summary>
            Converts a hex string to its byte array representation.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.StringFns.MakeValidIdentifier(System.String)">
            <summary>
            Converts a string to a valid identifier.
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.AdaptiveList">
            <summary>
            Adapter allowing any List to implement the <see cref="T:IdeaBlade.Util.IAdaptiveList"/> interface.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.Adapter(System.Collections.IList,System.Type)">
            <summary>
            Static method to create an AdaptiveList by wrapping the list specified.
            </summary>
            <param name="pList"></param>
            <param name="pItemType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.Adapter(System.Collections.IList)">
            <summary>
            Static method to create an AdaptiveList by wrapping the list specified.
            </summary>
            <param name="pList"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.Adapter(System.Collections.IList,System.Boolean)">
            <summary>
            Static method to create an AdaptiveList by wrapping the list specified.
            </summary>
            <param name="pList"></param>
            <param name="pUsesGlobalPropertyDescriptors"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.SetList(System.Collections.IList,System.Type)">
            <summary>
            Wraps the list provided.
            </summary>
            <param name="pList"></param>
            <param name="pItemType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            See <see cref="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            See <see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.AddPropertyDescriptor(System.String,System.String)">
            <summary>
            Create a new custom-named <see cref="T:System.ComponentModel.PropertyDescriptor"/> for a PropertyPath and add it 
            to this list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>. 
            </summary>
            <param name="pPropertyName">The name of the PropertyDescriptor</param>
            <param name="pPropertyPath">The simple or nested path that gets or sets the property value
            such as the nested path, "Customer.CompanyName".</param>
            <returns>True if the descriptor was added to the list's PropertyDescriptorList;
            false if the descriptor already exists in that PropertyDescriptorList</returns>
            <remarks>
            <para>
            The newly added PropertyDescriptor is not immediately accessible via this signature.
            Consider creating it first with one of the <see cref="T:IdeaBlade.Util.PropertyDescriptorFns"/>
            and use AddPropertyDescriptor(pDescriptor) to add it to the list.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.AddPropertyDescriptor(System.String,System.Type,IdeaBlade.Util.GetterDelegate,IdeaBlade.Util.SetterDelegate)">
            <summary>
            Add a property to the list of property descriptors maintained regarding the type of 
            item in the list.
            </summary>
            <param name="pPropertyName">The name of the property to add</param>
            <param name="pComponentType">The type of object to which the property is bound.</param>
            <param name="pGetterDelegate">The delegate that retrieves the property value. No getter if null.</param>
            <param name="pSetterDelegate">The delegate that can set the property value. No setter if null.</param>
            <returns>The newly added property descriptor</returns>
            <remarks>
            <para>
            Do not confuse the ComponentType with the PropertyType. 
            If the bound object is "Order" and the PropertyName is "Id",
            "Order" is the ComponentType and "Int64" is the PropertyType.
            The PropertyType is discovered later via reflection.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.AddPropertyDescriptor(System.String)">
            <summary>
            Create a new standard-named <see cref="T:System.ComponentModel.PropertyDescriptor"/> for a nested PropertyPath and add it 
            to this list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>. 
            </summary>
            <param name="pNestedPropertyPath">Nested property path for this list's type such as "Customer.CompanyName".</param>
            <returns>True if the descriptor was added to the list's PropertyDescriptorList;
            false if the descriptor already exists in that PropertyDescriptorList</returns>
            <remarks>
            DevForce generates a name for the property based on the nested PropertyPath.
            This is the standard, recommended way to add a nested PropertyPath PropertyDescriptor.
            <para>
            The newly added PropertyDescriptor is not immediately accessible via this signature.
            Consider creating it first with one of the <see cref="T:IdeaBlade.Util.PropertyDescriptorFns"/>
            and use AddPropertyDescriptor(pDescriptor) to add it to the list.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.AddPropertyDescriptor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Add a <see cref="T:System.ComponentModel.PropertyDescriptor"/>
            to this list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>. 
            </summary>
            <param name="pDescriptor">The PropertyDescriptor to add</param>
            <returns>True if the descriptor was added to the list's PropertyDescriptorList;
            false if the descriptor already exists in that PropertyDescriptorList</returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.RemovePropertyDescriptor(System.String)">
            <summary>
            Remove the <see cref="T:System.ComponentModel.PropertyDescriptor"/>
            that matches the specified nested PropertyPath
            from this list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>. 
            </summary>
            <param name="pNestedPropertyPath">Nested PropertyPath such as "Customer.CompanyName"</param>
            <returns>True if the descriptor was removed from the list's PropertyDescriptorList;
            false if the descriptor was not in that PropertyDescriptorList</returns>
            <remarks>
            <para>
            You cannot use this signature to remove a PropertyDescriptor defined for other than a nested PropertyPath.
            Use <see cref="M:IdeaBlade.Util.AdaptiveList.GetPropertyDescriptor(System.String)"/> as in:
            <code>
            RemovePropertyDescriptor(GetPropertyDescriptor("Foo"));          // The case of "Foo" matters
            RemovePropertyDescriptor(PropertyDescriptors.Find("Foo", true)); // Ignores case
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.RemovePropertyDescriptor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Remove the <see cref="T:System.ComponentModel.PropertyDescriptor"/> 
            from this list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>. 
            </summary>
            <param name="pDescriptor">The PropertyDescriptor to remove</param>
            <returns>True if the descriptor was removed from the list's PropertyDescriptorList;
            false if the descriptor was not in that PropertyDescriptorList</returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.RemoveAllPropertyDescriptors">
            <summary>
            Removes all of the property descriptors on this list. Side effect 
            is that UsesGlobalPropertyDescriptors becomes false if not already
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.GetPropertyDescriptor(System.String)">
            <summary>
            Get the <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the PropertyPath
            from the list's <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>.
            </summary>
            <param name="pPropertyName">Simple or nested PropertyPath such as "Customer.CompanyName".</param>
            <returns>The PropertyDescriptor if found; else null.</returns>
            <remarks>
            The PropertyPath search is case sensitive.
            The PropertyPath can be the name of a custom PropertyDescriptor, e.g. "Foo".
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.Add(System.Object)">
            <summary>
            Adds an item to the end of the list. See <see cref="M:System.Collections.IList.Add(System.Object)"/>.
            </summary>
            <param name="pValue">object to add; must be of the correct type</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.Clear">
            <summary>
            Clears the list see <see cref="M:System.Collections.IList.Clear"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.Contains(System.Object)">
            <summary>
            Determines whether the list contains a specfic object. See <see cref="M:System.Collections.IList.Contains(System.Object)"/>.
            </summary>
            <param name="pValue"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copies the entire list to a compatible one-dimensional Array, 
            starting at the specified index of the target array. 
            </summary>
            <param name="pArray">The one-dimensional Array that is the destination of the elements copied from the list</param>
            <param name="pIndex">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.IndexOf(System.Object)">
            <summary>
            Returns the zero-based index of the first occurrence of a value in the list.
            See <see cref="M:System.Collections.IList.IndexOf(System.Object)"/>
            </summary>
            <param name="pValue">Object to search for</param>
            <returns>The zero-based index of the first occurrence of value within the list if found; 
            otherwise, -1.
            </returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the list at the specified index. See <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/>.
            </summary>
            <param name="pIndex">The zero-based index at which value should be inserted. </param>
            <param name="pValue">The Object to insert</param>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the list. See <see cref="M:System.Collections.IList.Remove(System.Object)"/>.
            </summary>
            <param name="pValue">Object to remove</param>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.RemoveAt(System.Int32)">
            <summary>
            Removes item at indexed location. See <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/>.
            </summary>
            <param name="pIndex"></param>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.CopyTo(System.Array,System.Int32)">
            <summary>
            See <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>.
            </summary>
            <param name="pArray"></param>
            <param name="pIndex"></param>
        </member>
        <member name="M:IdeaBlade.Util.AdaptiveList.GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.AdaptiveList.ItemType">
            <summary>
            The type of objects in the list.
            </summary>
            <remarks>
            If the ItemType is null, it will be set by the type of the first object to be added to the list.  
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.AdaptiveList.PropertyDescriptors">
            <summary>
            Get the <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/> associated with this list.
            </summary>
            <remarks>
            Returns the item type's associated global PropertyDescriptorList
            if the <see cref="P:IdeaBlade.Util.AdaptiveList.UsesGlobalPropertyDescriptors"/> property is true;
            otherwise, it returns the list's private PropertyDescriptorList.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.AdaptiveList.UsesGlobalPropertyDescriptors">
            <summary>
            Gets or sets whether this list uses the global <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/> for this <see cref="P:IdeaBlade.Util.AdaptiveList.ItemType"/>.
            </summary>
            <remarks>
            Setting this property clears the list's private PropertyDescriptorList.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.AdaptiveList.InnerList">
            <summary>
            Gets the contained list of elements.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AdaptiveList.Item(System.Int32)">
            <summary>
            Indexed access to the list. See <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AdaptiveList.IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.IList.IsReadOnly"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AdaptiveList.IsFixedSize">
            <summary>
            See <see cref="P:System.Collections.IList.IsFixedSize"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AdaptiveList.Count">
            <summary>
            See <see cref="P:System.Collections.ICollection.Count"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AdaptiveList.IsSynchronized">
            <summary>
            See <see cref="P:System.Collections.ICollection.IsSynchronized"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AdaptiveList.SyncRoot">
            <summary>
            See <see cref="P:System.Collections.ICollection.SyncRoot"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.CodingFns">
            <summary>
             Helper class containing encoding / decoding and bitstream functions.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.CodingFns.PaddingChar">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.CodingFns.EncodingTable">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.CodingFns.NonBase64Char">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.CodingFns.EOF">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.CodingFns.EncodeBase64(System.Byte[])">
            <summary>
            Encodes a byte array as a string.
            </summary>
            <param name="pBytes">A byte array</param>
            <returns>The encoded string</returns>
        </member>
        <member name="M:IdeaBlade.Util.CodingFns.DecodeBase64(System.String)">
            <summary>
            Decodes a string back into a byte array.
            </summary>
            <param name="pChars">The string to decode</param>
            <returns>The decoded byte array</returns>
        </member>
        <member name="M:IdeaBlade.Util.CodingFns.GetOctets(System.Int32,System.Byte[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="pIndex"></param>
            <param name="pBytes"></param>
            <param name="pX"></param>
            <param name="pY"></param>
            <param name="pZ"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.CodingFns.ConvertOctets(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="pX"></param>
            <param name="pY"></param>
            <param name="pZ"></param>
            <param name="pA"></param>
            <param name="pB"></param>
            <param name="pC"></param>
            <param name="pD"></param>
        </member>
        <member name="M:IdeaBlade.Util.CodingFns.GetSextets(System.Int32,System.String,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="pIndex"></param>
            <param name="pChars"></param>
            <param name="pA"></param>
            <param name="pB"></param>
            <param name="pC"></param>
            <param name="pD"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.CodingFns.GetSextet(System.Int32@,System.String)">
            <summary>
            
            </summary>
            <param name="pIndex"></param>
            <param name="pChars"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.CodingFns.ConvertSextets(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <param name="pC"></param>
            <param name="pD"></param>
            <param name="pX"></param>
            <param name="pY"></param>
            <param name="pZ"></param>
        </member>
        <member name="M:IdeaBlade.Util.CodingFns.CalcDecodingTable(System.String)">
            <summary>
            
            </summary>
            <param name="pEncodingTable"></param>
            <returns></returns>
        </member>
        <member name="F:IdeaBlade.Util.CodingFns.DecodingTable">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IGrammarLibrary">
             <summary>
               IGrammarLibrary is a marker interface for classes that implement grammar rules
               for <see cref="T:IdeaBlade.Util.GrammarString"/>.  There are no methods defined here because
               they are all called reflectively.
            
               Methods on IGrammarLibrary should be compatible with following delegate
               public delegate String GrammarMethod(String[] pParams);
            
               e.g.
               public virtual String Plural(String[] pParams);
             </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.RemotingElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.RemotingElement.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RemotingElement.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RemotingElement.RemotePersistenceEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RemotingElement.RemoteBaseUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RemotingElement.ServerPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RemotingElement.ServiceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RemotingElement.ProxyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RemotingElement.ProxyPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RemotingElement.ServerDetectTimeoutMilliseconds">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RemotingElement.SessionEncryptionKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RemotingElement.CommunicationsTechnology">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.RdbKeyCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.RdbKeyCollection.CreateNewElement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.RdbKeyCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.RdbKeyCollection.IsReadOnly">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.RdbKeyCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.RdbKeyCollection.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="pRdbKey"></param>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.RdbKeyCollection.Remove(IdeaBlade.Util.Configuration.RdbKeyElement)">
            <summary>
            
            </summary>
            <param name="pRdbKey"></param>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.RdbKeyCollection.Add(IdeaBlade.Util.Configuration.RdbKeyElement)">
            <summary>
            
            </summary>
            <param name="pRdbKey"></param>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RdbKeyCollection.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RdbKeyCollection.CollectionType">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RdbKeyCollection.ElementName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RdbKeyCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RdbKeyCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.RdbKeyElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.RdbKeyElement.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RdbKeyElement.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RdbKeyElement.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RdbKeyElement.DatabaseProduct">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RdbKeyElement.DataProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RdbKeyElement.Connection">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RdbKeyElement.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RdbKeyElement.ProbeAssemblyNames">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.RdbKeyElement.Options">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.LoggingElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.LoggingElement.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.LoggingElement.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.LoggingElement.LogFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.LoggingElement.ArchiveLogs">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.LoggingElement.ServiceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.LoggingElement.Port">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.LoggingElement.UsesSeparateAppDomain">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.LoggingElement.NamespaceAcceptFilters">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.LoggingElement.NamespaceRejectFilters">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.ValidationSeverity">
            <summary>
            An enum used to describe the severity of a validation message.  
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.ValidationSeverity.Error">
            <summary>
            An error
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.ValidationSeverity.Warning">
            <summary>
            A warning 
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.ValidationSeverity.Info">
            <summary>
            Informational only
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.ValidationSeverity.NA">
            <summary>
            Not applicable
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.ValidationResult">
            <summary>
            Encapsulates information about the results of a call to <see cref="M:IdeaBlade.Persistence.Entity.Validate">RdbEntity.Validate</see>.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.ValidationResult.Ok">
            <summary>
            A constant representing a simple successfull validation
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.ValidationResult.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the ValidationResult class
            </summary>
            <param name="pIsOk">Whether the validation was ok or not</param>
            <param name="pMessage">An associated message</param>
        </member>
        <member name="M:IdeaBlade.Util.ValidationResult.#ctor(System.Boolean,System.String,IdeaBlade.Util.ValidationSeverity)">
            <summary>
            Initializes a new instance of the ValidationResult class
            </summary>
            <param name="pIsOk">Whether the validation was ok or not</param>
            <param name="pMessage">An associated message</param>
            <param name="pSeverity">The severity of the result</param>
        </member>
        <member name="M:IdeaBlade.Util.ValidationResult.#ctor(System.Boolean,System.String,IdeaBlade.Util.ValidationSeverity,System.String)">
            <summary>
            Initializes a new instance of the ValidationResult class
            </summary>
            <param name="pIsOk">Whether the validation was ok or not</param>
            <param name="pMessage">An associated message</param>
            <param name="pSeverity">The severity of the result</param>
            <param name="pPropertyName"></param>
        </member>
        <member name="P:IdeaBlade.Util.ValidationResult.IsOk">
            <summary>
            Whether this is a successfull validation result
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.ValidationResult.Message">
            <summary>
            The message associated with this validation result
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.ValidationResult.PropertyName">
            <summary>
            The name of the property that this validation result refers to
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.ValidationResult.Severity">
            <summary>
            The severity of this validation result
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.TypeFns">
            <summary>
            A collection of static methods used to provide additional <see cref="T:System.Type"/> related services
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypeFns.ConstructGenericInstance(System.Type,System.Type[])">
            <summary>
            
            </summary>
            <param name="pGenericType"></param>
            <param name="pArgTypes"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.TypeFns.ConstructGenericInstance(System.Type,System.Type[],System.Object[])">
            <summary>
            
            </summary>
            <param name="pGenericType"></param>
            <param name="pArgTypes"></param>
            <param name="pConstructorParams"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.TypeFns.GetTypeUnderlyingNullableType(System.Type)">
            <summary>
            Returns either the type itself or its underlying type if the
            type is nullable
            </summary>
            <param name="pType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.TypeFns.IsNumeric(System.Type)">
            <summary>
            Determines whether the specified type is a valid numeric type.
            </summary>
            <param name="pType">The type to check</param>
            <returns>true if the specified type is numeric; false otherwise</returns>
        </member>
        <member name="M:IdeaBlade.Util.TypeFns.IsNullable(System.Type)">
            <summary>Determines whether the specified type represents a Nullable type.</summary>
            <remarks>
            Calling <b>GetType</b> on a Nullable type causes a boxing operation to be 
            performed when the type is implicitly converted to Object. Therefore <b>GetType</b> 
            always returns a Type object that represents the underlying type, not the Nullable type.
            Therefore, this code always returns false if the specified type object was returned from 
            a call to <b>GetType</b>.
            </remarks>
            <param name="pType">The type to check</param>
            <returns>true if the specified type represents a Nullable type; false otherwise</returns>
        </member>
        <member name="M:IdeaBlade.Util.TypeFns.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for a specified type.
            </summary>
            <param name="pType">The type.</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.TypeFns.GetNullableType(System.Type)">
            <summary>
            Gets the nullabletype that corresponds to the given type.
            </summary>
            <param name="pType">Type of the p.</param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.TypeFns.NumericTypes">
            <summary>
            Gets the numeric types.
            </summary>
            <value>The numeric types.</value>
        </member>
        <member name="P:IdeaBlade.Util.TypeFns.IntegerTypes">
            <summary>
            Gets the integer types.
            </summary>
            <value>The integer types.</value>
        </member>
        <member name="P:IdeaBlade.Util.TypeFns.DecimalTypes">
            <summary>
            Gets the decimal types.
            </summary>
            <value>The decimal types.</value>
        </member>
        <member name="T:IdeaBlade.Util.PropertyComparer">
            <summary>
            An implementation of the <see cref="T:System.Collections.IComparer"/> interface that operates
            using <see cref="T:System.Reflection.PropertyInfo"/> and <see cref="T:System.ComponentModel.PropertyDescriptor"/> instances.
            This functionally allows IComparers to be dynamically constructed for any
            property of an object.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.PropertyComparer.#ctor(System.Reflection.PropertyInfo,System.ComponentModel.ListSortDirection)">
            <summary>
            Initialize a new instance of the PropertyComparer class
            </summary>
            <param name="pPropertyInfo">PropertyInfo metadata describing the property that will be 
            involved in comparison operations</param>
            <param name="pSortDirection">The sort direction for this comparer</param>
        </member>
        <member name="M:IdeaBlade.Util.PropertyComparer.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Initialize a new instance of the PropertyComparer class
            </summary>
            <param name="pPropertyDescriptor">PropertyDescriptor metadata describing the property that will be 
            involved in comparison operations</param>
            <param name="pSortDirection">The sort direction for this comparer</param>
        </member>
        <member name="M:IdeaBlade.Util.PropertyComparer.Compare(System.Object,System.Object)">
            <summary>
            See <see cref="M:System.Collections.IComparer.Compare(System.Object,System.Object)"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.PropertyComparer.GetValue(System.Object)">
            <summary>
            Returns the property value of an object 
            </summary>
            <param name="pObject">An object whose property value we want to retrieve</param>
            <returns>The property value that this comparer compares</returns>
        </member>
        <member name="T:IdeaBlade.Util.INamedCollection">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.INamedCollection.NameExists(IdeaBlade.Util.NamedCollectionItem)">
            <summary>
            
            </summary>
            <param name="pItem"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.NamedCollection`1">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.NamedCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="pIndex"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:IdeaBlade.Util.NamedCollection`1.ClearItems">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.NamedCollection`1.RemoveItem(System.Int32)">
            <summary>
            
            </summary>
            <param name="pIndex"></param>
        </member>
        <member name="M:IdeaBlade.Util.NamedCollection`1.NameExists(IdeaBlade.Util.NamedCollectionItem)">
            <summary>
            
            </summary>
            <param name="pItem"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.NamedCollection`1.ToString">
            <summary>
            List of keys.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.NamedCollection`1.Item(System.String)">
            <summary>
            Returns the item specified.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.FilterFns">
            <summary>
               This class contains a collection of static methods that perform a variety 
               of filtering operations on an Enumerable using a delegate
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.FilterFns.Include``1(System.Collections.IEnumerable,System.Predicate{``0})">
            <summary>
            Process a collection and return only those items in the collection that
            are accepted by the specified delegate
            </summary>
            <param name="pEnumerable">The collection to process</param>
            <param name="pPredicate">A delegate that will be called for each item in the specified
            collection to determine whether it should be accepted</param>
            <returns>A list of the accepted items from the specified collection</returns>
        </member>
        <member name="M:IdeaBlade.Util.FilterFns.Exclude``1(System.Collections.IEnumerable,System.Predicate{``0})">
            <summary>
            Process a collection and return only those items in the collection that
            are not rejected by the specified delegate
            </summary>
            <param name="pEnumerable">The collection to process</param>
            <param name="pPredicate">A delegate that will be called for each item in the specified
            collection to determine whether it should be rejected</param>
            <returns>A list of the not rejected items from the specified collection</returns>
        </member>
        <member name="M:IdeaBlade.Util.FilterFns.Convert``2(System.Collections.IEnumerable,System.Converter{``0,``1},System.Boolean)">
            <summary>
            Process a collection and process each item according to the specified delegate
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
            <param name="pEnumerable">The collection to process</param>
            <param name="pConverter">A delegate that will be called for each item in the specified
            collection that will return a 'processed' result object</param>
            <param name="pIncludeNullInOutput"></param>
            <returns>A list of the 'processed' result objects</returns>
        </member>
        <member name="T:IdeaBlade.Util.TypeTransformer">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypeTransformer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TypeTransformer&lt;TInput, TOutput&gt;"/> class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypeTransformer.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TypeTransformer"/> class.
            </summary>
            <param name="pInputType">Type of the p input.</param>
            <param name="pOutputType">Type of the p output.</param>
        </member>
        <member name="M:IdeaBlade.Util.TypeTransformer.AddTranformPair(System.Type,System.Type)">
            <summary>
            Adds the tranform pair.
            </summary>
            <param name="pInputType">Type of the input.</param>
            <param name="pOutputType">Type of the output.</param>
        </member>
        <member name="M:IdeaBlade.Util.TypeTransformer.AddTranformPair(IdeaBlade.Util.Pair{System.Type,System.Type})">
            <summary>
            Adds the tranform pair.
            </summary>
            <param name="pPair">pair</param>
        </member>
        <member name="M:IdeaBlade.Util.TypeTransformer.Transform(System.Object,System.Type)">
            <summary>
            Transforms the specified output type.
            </summary>
            <param name="pInput">input</param>
            <param name="pOutputType">Type of the p output.</param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.TypeTransformer.SupportedTransformPairs">
            <summary>
            Gets the supported transform pairs.
            </summary>
            <value>The supported transform pairs.</value>
        </member>
        <member name="T:IdeaBlade.Util.GuidTypeTransformer">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.GuidTypeTransformer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GuidTypeTransformer"/> class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.GuidTypeTransformer.Transform(System.Object,System.Type)">
            <summary>
            Transforms the specified input.
            </summary>
            <param name="pInput">input</param>
            <param name="pOutputType">Desired output type.</param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.IntTypeTransformer">
            <summary>
            Convert.ChangeType(int) returns 0 for "##.000" instead of ## 
            so we use Double.Parse instead followed by Convert.ChangeType
            Thus  String:"7.02"->Int:7 just like Decimal:7.02->Int:7.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IntTypeTransformer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GuidTypeTransformer"/> class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IntTypeTransformer.Transform(System.Object,System.Type)">
            <summary>
            Transforms input to the specified output type.
            </summary>
            <param name="pInput">input</param>
            <param name="pOutputType">Desired Output Type.</param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.PublishEventArgs">
            <summary>
            Event arguments for the <b>Publish</b>> event.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.PublishEventArgs.TraceMessage">
            <summary>
            Gets the published TraceMessage.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.RemotingTracePublisher">
            <summary>
            Publishes debugging and tracing messages generated by DevForce applications.
            </summary>
            <remarks>
            This TracePublisher uses .NET remoting when hosted as a service.
            </remarks>
            <seealso cref="T:IdeaBlade.Util.RemotingTraceSubscriber"/>
        </member>
        <member name="M:IdeaBlade.Util.RemotingTracePublisher.GetRemoteInstance(System.String)">
            <summary>
            Creates a proxy to the remote TracePublisher.
            </summary>
            <param name="pTracePublisherUrl">URL of the publisher</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.RemotingTracePublisher.MakeRemotableCore">
            <summary>
            Host the TracePublisher as a service.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.RemotingTracePublisher.PublishCore(IdeaBlade.Util.TraceMessage)">
            <summary>
            Call OnPublish method for all subscribers.
            </summary>
            <param name="pTraceMessage"></param>
        </member>
        <member name="M:IdeaBlade.Util.RemotingTracePublisher.Subscribe(IdeaBlade.Util.ITraceSubscriber)">
            <summary>
            Called by <see cref="T:IdeaBlade.Util.ITraceSubscriber"/> implementations in order to receive <see cref="M:IdeaBlade.Util.ITraceSubscriber.OnPublish(IdeaBlade.Util.TraceMessage)"/> notifications.
            </summary>
            <param name="pSubscriber"></param>
        </member>
        <member name="M:IdeaBlade.Util.RemotingTracePublisher.Unsubscribe(IdeaBlade.Util.ITraceSubscriber)">
            <summary>
            Called by <see cref="T:IdeaBlade.Util.ITraceSubscriber"/> implementations when publication notice is no longer wanted.
            </summary>
            <param name="pSubscriber"></param>
        </member>
        <member name="M:IdeaBlade.Util.RemotingTracePublisher.Dispose(System.Boolean)">
            <summary>
            All subscribers receive a shutdown notice when the publisher is disposing.
            </summary>
            <param name="pDisposing"></param>
        </member>
        <member name="P:IdeaBlade.Util.RemotingTracePublisher.LocalInstance">
            <summary>
            Returns the singleton instance for this class.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.RemotingTracePublisher.BaseUrl">
            <summary>
            Returns the default protocol and server for this publisher.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.RemotingFns">
            <summary>
            A collection of static methods that assist in developing applications utilizing 
            the .NET remoting framework.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.RemotingFns.PublishHttpService(System.MarshalByRefObject,System.Int32,System.String)">
            <summary>
            For internal use only.
            Publishes an HTTP service.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.RemotingFns.PublishService(System.MarshalByRefObject,System.Runtime.Remoting.Channels.IChannel,System.String)">
            <summary>
            For internal use only.
            Publishes a remote service.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.NamespaceFilterMode">
            <summary>
            An enum that is used to accept or reject logging from specific namespaces. 
            See <see cref="T:IdeaBlade.Util.NamespaceFilter"/>
            This enum supports IdeaBlade's internal infrastructure and is not intended to be used in your code.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.NamespaceFilterMode.Accept">
            <summary>
            Accept the namespace
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.NamespaceFilterMode.Reject">
            <summary>
            Reject the namespace
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.NamespaceFilter">
            <summary>
            Used in conjunction with the <see cref="T:IdeaBlade.Util.DebugFns"/> and
            <see cref="T:IdeaBlade.Util.TraceFns"/> classes to dynamically determine which calls to these methods
            will be ignored and which will actually be logged. 
            This class supports IdeaBlade's internal infrastructure and is not intended to be used in your code.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.NamespaceFilter.#ctor">
            <summary>
            Initializes a new instance of the NamespaceFilter class
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.NamespaceFilter.#ctor(IdeaBlade.Util.NamespaceFilterMode,System.String)">
            <summary>
            Initializes a new instance of the NamespaceFilter class
            </summary>
            <param name="pMode"></param>
            <param name="pNamespace"></param>
        </member>
        <member name="P:IdeaBlade.Util.NamespaceFilter.Mode">
            <summary>
            The NamespaceFilterMode associated with this filter
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.NamespaceFilter.Namespace">
            <summary>
            The namespace associated with this filter
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.EnglishGrammarRules">
            <summary>
              The EnglishGrammarRules provides a basic implementation of commonly used grammar
              functions such rules for pluralization, possessives, and articles.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.EnglishGrammarRules.Pluralize(System.String)">
            <summary>
              Returns the plural of a subject.
              Handles most cases of subjects ending in "s", "y", "ex", and "ix".
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.EnglishGrammarRules.MakePossessive(System.String)">
            <summary>
              Returns the possessive of a subject.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.EnglishGrammarRules.GetArticle(System.String)">
            <summary>
              Returns the proper article for a subject.  e.g. "a" or "an".
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.EnglishGrammarRules.PluralizeImpl(System.String)">
            <summary>
              Returns the plural of a subject.
              Handles most cases of subjects ending in "s", "y", "ex", and "ix".
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.EnglishGrammarRules.MakePossessiveImpl(System.String)">
            <summary>
              Returns the possessive of a subject.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.EnglishGrammarRules.GetArticleImpl(System.String)">
            <summary>
              Returns the proper article for a subject.  e.g. "a" or "an".
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.EnglishGrammarRules.StartsWithChar(System.String,System.String)">
            <summary>
              Helper method.
              Returns true if the token starts with any of the characters in pChars.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.EnglishGrammarRules.ReplaceSuffix(System.String,System.Int32,System.String)">
            <summary>
              Helper method.
              Truncates n characters off the end of pValue and appends pSuffix.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.EnglishGrammarRules.Instance">
            <summary>
              Used to get or set the instance used to process the grammar rules.
              Typically used to extend the class to handle complex rules (such as better
              pluralization) without affecting the callers of the methods.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.ConfigurationFns">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.ConfigurationFns.DeserializeFromSection(IdeaBlade.Util.Configuration.IdeaBladeSection)">
            <summary>
            
            </summary>
            <param name="pSection"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.ConfigurationFns.DeserializeFromSection(IdeaBlade.Util.IdeaBladeConfig,IdeaBlade.Util.Configuration.IdeaBladeSection)">
            <summary>
            
            </summary>
            <param name="pConfig"></param>
            <param name="pSection"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.ConfigurationFns.SafeCreateProperty(System.Configuration.ConfigurationPropertyCollection,System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="pProperties"></param>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.ConfigurationFns.SafeCreateProperty(System.Configuration.ConfigurationPropertyCollection,System.String,System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="pProperties"></param>
            <param name="name"></param>
            <param name="type"></param>
            <param name="defValue"></param>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.ConfigurationFns.ValidateProperty(System.Configuration.ConfigurationProperty,System.Configuration.ConfigurationProperty)">
            <summary>
            
            </summary>
            <param name="pReferenceProperty"></param>
            <param name="pTargetProperty"></param>
        </member>
        <member name="T:IdeaBlade.Util.XmlTemplateException">
            <summary>
            For internal use only.
            </summary>
               Exceptions raised in Xml Template replacement. 
               Added variable to hold outout document that includes error messages to facilitate debugging
        </member>
        <member name="T:IdeaBlade.Util.IdeaBladeException">
            <summary>
            Base class for exception types within the IdeaBlade DevForce framework.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeException.#ctor">
            <summary>
            Initializes a new instance of the IdeaBladeException class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the IdeaBladeException class.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the IdeaBladeException class.
            </summary>
            <param name="pMessage">A message added to describe the exception containing 0 or more format specifications. 
            See <see cref="M:System.String.Format(System.String,System.Object)"/></param>
            <param name="pMessageArgs">An Object array containing zero or more objects to be formatted.</param>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the IdeaBladeException class.
            </summary>
            <param name="pInnerException">An instance of Exception that describes the error that caused this exception</param>
            <param name="pMessage">A message added to describe the exception</param>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="pMessage"></param>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="pMessage"></param>
            <param name="pException"></param>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateException.#ctor(System.String,System.String)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.XmlTemplateException.mDocWithErrorMsgs">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.XmlTemplateException.DocWithErrorMsgs">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.TypedXmlDocument">
            <summary>
              An XmlDocument with helper methods that retrieve typed values.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.#ctor">
            <summary>
              Constructs a TypedXmlDocument.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.#ctor(System.Xml.XmlNameTable)">
            <summary>
              Constructs a TypedXmlDocument with the specified name table.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.CreateDocument(System.String)">
            <summary>
            Returns a new Typed XmlDocument with an XmlDeclaration section and a DocumentElement
            </summary>
            <param name="pRootNodeName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.GetString(System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as a String.
              The XPath expression is relative to the DocumentElement.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.GetBool(System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as a bool.
              The XPath expression is relative to the DocumentElement.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.GetInt(System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as an int.
              The XPath expression is relative to the DocumentElement.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.GetLong(System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as a long.
              The XPath expression is relative to the DocumentElement.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.GetFloat(System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as a float.
              The XPath expression is relative to the DocumentElement.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.GetDouble(System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as a double.
              The XPath expression is relative to the DocumentElement.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.GetType(System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as a Type.
              The XPath expression is relative to the DocumentElement.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.GetImage(System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as an Image.
              The XPath expression is relative to the DocumentElement.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.GetByteArray(System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as a byte[]
              Treats the node value as a standard base64 string when converting to byte[].
              The XPath expression is relative to the DocumentElement.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.GetObject(System.String,System.Type)">
            <summary>
              Gets the value of the node pointed to by the XPath expression and
              parses the string into an object of type pType.  Uses Convert.ChangeType
              for all primitive types.
              The XPath expression is relative to the DocumentElement.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.NodeExists(System.String)">
            <summary>
              Returns whether the node pointed to by the XPath expression exists.
              The XPath expression is relative to the DocumentElement.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.NodeExists(System.String,System.Xml.XmlNamespaceManager)">
            <summary>
              Returns whether the node pointed to by the XPath expression exists.
              Any prefixes found in the XPath expression are resolved using the supplied XmlNamespaceManager.
              The XPath expression is relative to the DocumentElement.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.GetNode(System.String)">
            <summary>
              Gets the XmlNode pointed to by the XPath expression.
              The XPath expression is relative to the DocumentElement.
              Returns null if not found
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.GetElement(System.String)">
            <summary>
              Gets the XmlElement pointed to by the XPath expression.
              The XPath expression is relative to the DocumentElement.
              Returns null if not found or not an XmlElement.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.GetNodes(System.String)">
            <summary>
              Gets the XmlNodes pointed to by the XPath expression.
              The XPath expression is relative to the DocumentElement.
              Returns an empty list if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.SetElementValue(System.String,System.String,System.Boolean)">
            <summary>
            Sets (and can create if needed) the innertext of an XmlElement given its xpath.
            Note that this will overwrite any existing values and children of the
            specified node
            </summary>
            <param name="pXPath"></param>
            <param name="pInnerText"></param>
            <param name="pCreateMissingElements"></param>
        </member>
        <member name="M:IdeaBlade.Util.TypedXmlDocument.SetAttributeValue(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sets (and can create any missing elements if needed) the value of an XmlAttribute 
            given its xpath. 
            </summary>
            <param name="pElementXPath"></param>
            <param name="pAttributeName"></param>
            <param name="pAttributeValue"></param>
            <param name="pCreateMissingElements"></param>
        </member>
        <member name="T:IdeaBlade.Util.Set">
            <summary>
               This class performs standard Set operations (Intersect and Union)
               Think of a Set as a Collection with no repeated elements
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Set.#ctor">
            <summary>
            Initialize a new instance of the Set class
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Set.#ctor(System.Collections.ICollection)">
            <summary>
            Initialize a new instance of the Set class using a collection to prepopulate the Set.
            Any duplicates in the collection will be ignored.
            </summary>
            <param name="pCollection">The collection to use to prepopulate the Set</param>
        </member>
        <member name="M:IdeaBlade.Util.Set.Intersect(System.Collections.ICollection[])">
            <summary>
            Returns the intersection of this Set and all of the elements for an array of specified collections
            </summary>
            <param name="pCollections">An array of collections</param>
            <returns>A new Set that represents the intersection of this set and the specified array
            of collections</returns>
        </member>
        <member name="M:IdeaBlade.Util.Set.Union(System.Collections.ICollection[])">
            <summary>
            Returns the union of all of the parameter collections
            </summary>
            <param name="pCollections">An array of collections</param>
            <returns>A new Set that represents the union of this set and the specified array
            of collections</returns>
        </member>
        <member name="M:IdeaBlade.Util.Set.Subtract(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Returns the result of subtracting the contents of collection2 from collection1
            </summary>
            <param name="pCollection1"></param>
            <param name="pCollection2"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Set.Intersect(System.Collections.ICollection)">
            <summary>
            Updates this Set to represent the intersection of the current contents with  
            the contents of a specified collection
            </summary>
            <param name="pCollection">The collection</param>
        </member>
        <member name="M:IdeaBlade.Util.Set.Union(System.Collections.ICollection)">
            <summary>
            Updates this Set to represent the union of the current contents with  
            the contents of a specified collection
            </summary>
            <param name="pCollection">The collection</param>
        </member>
        <member name="M:IdeaBlade.Util.Set.Subtract(System.Collections.ICollection)">
            <summary>
            Removes the contents of this collection from the current set
            </summary>
            <param name="pCollection"></param>
        </member>
        <member name="M:IdeaBlade.Util.Set.AddRange(System.Collections.ICollection)">
            <summary>
            Same operation as the Union method. See <see cref="M:IdeaBlade.Util.Set.Union(System.Collections.ICollection)"/>
            </summary>
            <param name="pCollection"></param>
        </member>
        <member name="M:IdeaBlade.Util.Set.RemoveRange(System.Collections.ICollection)">
            <summary>
            Updates this Set by removing all items from the specified collection
            </summary>
            <param name="pCollection"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Set.Add(System.Object)">
            <summary>
            Adds (Unions) an object with the current contents of this set
            </summary>
            <param name="pValue">The object to add to this set</param>
        </member>
        <member name="M:IdeaBlade.Util.Set.Remove(System.Object)">
            <summary>
            Removes an object from the set
            </summary>
            <param name="pValue"></param>
        </member>
        <member name="M:IdeaBlade.Util.Set.Clear">
            <summary>
            Empties this Set
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Set.Contains(System.Object)">
            <summary>
            Determines whether the set contains an object
            </summary>
            <param name="pValue"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Set.CopyTo(System.Array,System.Int32)">
            <summary>
            See <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
            </summary>
            <param name="pArray"></param>
            <param name="pIndex"></param>
        </member>
        <member name="M:IdeaBlade.Util.Set.ToArray(System.Type)">
            <summary>
            Returns the contents of this set as a typed array
            </summary>
            <param name="pType">The array type of the returned array</param>
            <returns>A typed array containing the contents of this Set</returns>
        </member>
        <member name="M:IdeaBlade.Util.Set.GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.Set.Count">
            <summary>
            The number of elements in this Set. <see cref="P:System.Collections.ICollection.Count"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Set.Items">
            <summary>
            Returns the contents of this set as a <see cref="T:System.Collections.ICollection"/>Collection
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Set.SyncRoot">
            <summary>
            See <see cref="P:System.Collections.ICollection.SyncRoot"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Set.IsSynchronized">
            <summary>
            See <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.GetterDelegate">
            <summary>
            Delegate to retrieve some property from another object
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.SetterDelegate">
            <summary>
            Delegate to set some property on another object
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.HttpFileInfo">
            <summary>
            Container for information about an HTTP file. 
            Used in association with the <see cref="T:IdeaBlade.Util.HttpFns"/> class.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.HttpFileInfo.Name">
            <summary>
            The name of the file
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.HttpFileInfo.Url">
            <summary>
            The URL used to reference the file
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.HttpFileInfo.IsFolder">
            <summary>
            Is this file a folder?
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.HttpFileInfo.LastModifiedTime">
            <summary>
            The last time this file was modified
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.EventsHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.EventsHelper.Fire(System.Delegate,System.Object[])">
            <summary>
            
            </summary>
            <param name="del"></param>
            <param name="args"></param>
        </member>
        <member name="M:IdeaBlade.Util.EventsHelper.FireAsync(System.Delegate,System.Object[])">
            <summary>
            
            </summary>
            <param name="del"></param>
            <param name="args"></param>
        </member>
        <member name="T:IdeaBlade.Util.CryptoFns">
            <summary>
            Static class that provides utility functions having to do with cryptography.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.CryptoFns.MD5Hash(System.Byte[])">
            <summary>
              Computes the MD5 hash of a byte array.
            </summary>
            <remarks>
              Returns a length 16 byte array containing the 128-bit hash.
              Endian order unknown.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.CryptoFns.MD5Hash(System.String,System.Text.Encoding)">
            <summary>
              Computes the MD5 hash of a string using the given encoding.
            </summary>
            <remarks>
              Returns a length 16 byte array containing the 128-bit hash.
              Endian order unknown.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.CryptoFns.MD5HashUTF16(System.String)">
            <summary>
              Computes the MD5 hash of a string in big endian UTF16 form.
            </summary>
            <remarks>
              Returns a length 16 byte array containing the 128-bit hash.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.CryptoFns.MD5HashUTF8(System.String)">
            <summary>
              Computes the MD5 hash of a string in UTF8 form.
            </summary>
            <remarks>
              Returns a length 16 byte array containing the 128-bit hash.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.CryptoFns.MD5HashToString(System.Byte[])">
            <summary>
              Computes the MD5 hash of a byte array.
            </summary>
            <remarks>
              Returns the hex string representation of the 128-bit hash.
              Endian order unknown.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.CryptoFns.MD5HashToString(System.String,System.Text.Encoding)">
            <summary>
              Computes the MD5 hash of a string using the given encoding.
            </summary>
            <remarks>
              Returns the hex string representation of the 128-bit hash.
              Endian order unknown.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.CryptoFns.MD5HashUTF16ToString(System.String)">
            <summary>
              Computes the MD5 hash of a string in big endian UTF16 form.
            </summary>
            <remarks>
              Returns the hex string representation of the 128-bit hash.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.CryptoFns.MD5HashUTF8ToString(System.String)">
            <summary>
              Computes the MD5 hash of a string in UTF8 form.
            </summary>
            <remarks>
              Returns the hex string representation of the 128-bit hash.
              Endian order unknown.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.CryptoFns.SimpleDESDecrypt(System.String,System.String)">
            <summary>
               Decrypts the particular string using the encryption key provided.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.CryptoFns.SimpleDESEncrypt(System.String,System.String)">
            <summary>
              Encrypts the specified string using the encryption key provided.
            </summary>
            <param name="pValueToEncrypt"></param>
            <param name="pEncryptionKey"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.CryptoFns.ByteArrayToHexString(System.Byte[])">
            <summary>
            Returns the hex string representation of a byte array
            </summary>
            <param name="pBytes"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.Locale">
            <summary>
              Locale is a fully functional subclass of CultureInfo, but extends it to
              accept an arbitrarily long list of subcultures and the time offset from GMT.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.Locale.DELIMITER">
            <summary>
              Delimiter used to separate culture hierarchies.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.Locale.Neutral">
            <summary>
              The neutral locale.  (i.e. no culture)
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Locale.#ctor">
            <summary>
              Constructs the Neutral Locale.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Locale.#ctor(System.String)">
            <summary>
              Constructs a Locale with the given culture name.
            </summary>
            <param name="pFullName">
              Dash delimited list of cultures of increasing specificity.
              e.g. en-US-nbc-seinfeld
            </param>
        </member>
        <member name="M:IdeaBlade.Util.Locale.#ctor(System.String,System.Single)">
            <summary>
              Constructs a Locale with the given culture name and GMT offset.
            </summary>
            <param name="pFullName">
              Dash delimited list of cultures of increasing specificity.
              e.g. en-US-nbc-seinfeld
            </param>
            <param name="pGmtOffset">
              Number of hours from Greenwich (Global) Mean Time.
            </param>
        </member>
        <member name="M:IdeaBlade.Util.Locale.ToString">
            <summary>
              Returs the FullName of the Locale.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Locale.GetFormat(System.Type)">
            <summary>
              Support for IFormatProvider.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Locale.FullName">
            <summary>
              Gets the FullName for this locale.
              Should never return null.
              Readonly because CultureInfo can't change cultures after construction.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Locale.GmtOffset">
            <summary>
              Gets the number of hours from Greenwich (Global) Mean Time.
              Readonly because CultureInfo can't change cultures after construction.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Locale.Parent">
            <summary>
              Gets the parent Locale.
              As defined by CultureInfo, the parent of the neutral culture is the neutral
              culture.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Locale.CurrentLocale">
            <summary>
              Gets or sets the Locale for the current thread.
              Should never return null.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.WsKeyCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.WsKeyCollection.CreateNewElement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.WsKeyCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.WsKeyCollection.IsReadOnly">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.WsKeyCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.WsKeyCollection.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="pWsKey"></param>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.WsKeyCollection.Remove(IdeaBlade.Util.Configuration.WsKeyElement)">
            <summary>
            
            </summary>
            <param name="pWsKey"></param>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.WsKeyCollection.Add(IdeaBlade.Util.Configuration.WsKeyElement)">
            <summary>
            
            </summary>
            <param name="pWsKey"></param>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.WsKeyCollection.Add(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="pWsKeyName"></param>
            <param name="pUrl"></param>
            <param name="pProbeAssemblyName"></param>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WsKeyCollection.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WsKeyCollection.CollectionType">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WsKeyCollection.ElementName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WsKeyCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WsKeyCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.WsKeyElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.WsKeyElement.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WsKeyElement.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WsKeyElement.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WsKeyElement.Url">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WsKeyElement.Wsdl">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WsKeyElement.EndpointName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WsKeyElement.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WsKeyElement.ProbeAssemblyNames">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.WsKeyElement.Options">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.IdeaBladeSection">
            <summary>
            Defined as an application configuration section which presents all IdeaBlade configuration information.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IConfigSerializer">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.Configuration.IdeaBladeSection.BaseFileName">
            <summary>
            Filename of the properties file.  Currently <b>app.config</b>.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.Configuration.IdeaBladeSection.CurrentName">
            <summary>
            Current section name.  Currently <b>ideaBlade</b>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IdeaBladeSection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IdeaBladeSection.#ctor(System.String)">
            <summary>
              Instantiates an IdeaBladeSection object using the XML string parameter.
              Used by Clone().
            </summary>
            <param name="pXmlString">Represents a serialized IdeaBladeSection XML string.</param>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IdeaBladeSection.#ctor(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="pStream"></param>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IdeaBladeSection.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IdeaBladeSection.ToXmlString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IdeaBladeSection.InitializeDefault">
            <summary>
              This will only be called once per ConfigurationManager.GetSection call.
              ConfigurationManager also have a set of property objects created via declarative method.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IdeaBladeSection.IsDefault">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IdeaBladeSection.Version">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IdeaBladeSection.UseDTC">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IdeaBladeSection.CopyLocal">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IdeaBladeSection.LoginManagerRequired">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IdeaBladeSection.UseDeclarativeTransactions">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IdeaBladeSection.EnforceDynamicTypeSecurityOnServer">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IdeaBladeSection.Remoting">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IdeaBladeSection.RdbKeys">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IdeaBladeSection.Logging">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IdeaBladeSection.NotificationService">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IdeaBladeSection.WebService">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IdeaBladeSection.WsKeys">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IdeaBladeSection.AppUpdater">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IdeaBladeSection.Options">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IdeaBladeSection.ProbeAssemblyNames">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Cardinality">
             <summary>
             The number of elements in a set or the relationship between two sets.
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.Cardinality.Zero">
             <summary>
             Zero elements.
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.Cardinality.One">
             <summary>
             One element.
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.Cardinality.MoreThanOne">
             <summary>
             More than one element.
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.Cardinality.ZeroOrOne">
             <summary>
             Zero or one elements.
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.Cardinality.ZeroOrMore">
             <summary>
             Zero or more elements.
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.Cardinality.OneOrMore">
             <summary>
             One or more elements.
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.EnumerableWrapper`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IdeaBlade.Util.EnumerableWrapper`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="pEnumerable"></param>
        </member>
        <member name="M:IdeaBlade.Util.EnumerableWrapper`1.#ctor(System.Collections.IEnumerable,System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="pEnumerable"></param>
            <param name="pPredicate"></param>
        </member>
        <member name="M:IdeaBlade.Util.EnumerableWrapper`1.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.EnumerableWrapper`1.ToList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.EnumerableWrapper`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.EnumerableWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.EnumerableWrapper`2">
            <summary>
            
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
        </member>
        <member name="M:IdeaBlade.Util.EnumerableWrapper`2.#ctor(System.Collections.IEnumerable,System.Converter{`0,`1})">
            <summary>
            
            </summary>
            <param name="pEnumerable"></param>
            <param name="pConverter"></param>
        </member>
        <member name="M:IdeaBlade.Util.EnumerableWrapper`2.#ctor(System.Collections.IEnumerable,System.Converter{`0,`1},System.Boolean)">
            <summary>
            
            </summary>
            <param name="pEnumerable"></param>
            <param name="pConverter"></param>
            <param name="pIncludeNullsInOutput"></param>
        </member>
        <member name="M:IdeaBlade.Util.EnumerableWrapper`2.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.EnumerableWrapper`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.PropertyDescriptorList">
            <summary>
            A strongly-typed BindingList of <see cref="T:System.ComponentModel.PropertyDescriptor"/>s.
            </summary>
            <remarks>
            A <b>PropertyDescriptorList</b> contains PropertyDescriptors for a particular <see cref="P:IdeaBlade.Util.PropertyDescriptorList.ItemType"/>.
            You may <b>Add</b> and <b>Remove</b> property descriptors from a PropertyDescriptorList.  
            Use <see cref="M:IdeaBlade.Util.PropertyDescriptorList.Find(System.String)"/> to search for  property descriptors.
            <para>
            This class also maintains a global map of all PropertyDescriptorLists created during the session.
            Each entry in the map is a PropertyDescriptorList for an item type.  Use <see cref="M:IdeaBlade.Util.PropertyDescriptorList.Get(System.Type)"/> to 
            return the global list for an item type.
            </para>
            <para>
            Many methods take a PropertyPath parameter, which can be either a simple or a nested property path.
            A <b>simple property path name</b> is a string which only has characters permitted in a .NET identifier name.
            A <b>nested property path name</b> is a string with a period in it
            representing a succession of property calls leading from an instance of a particular type.
            For example, "Order.Customer.CompanyName" is a path from an Order object through a Customer object to 
            a CompanyName string property of a Customer.
            </para>
            <para>
            DevForce constructs a standard PropertyDescriptor name from a nested PropertyPath using 
            the static (Shared in VB) method <see cref="M:IdeaBlade.Util.PropertyDescriptorFns.GetBindingName(System.String)"/>,
            defined in the <see cref="T:IdeaBlade.Util.PropertyDescriptorFns"/> helper class.
            </para>
            <para>
            Also see <see cref="T:IdeaBlade.Util.PropertyDescriptorFns"/> for functions to construct PropertyDescriptors.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorList.Get(System.Type)">
            <summary>
            Returns the global PropertyDescriptorList for the given Type.
            </summary>
            <param name="pType">Item type for which property descriptors are wanted</param>
            <remarks>
            A new PropertyDescriptorList will be created in this class's global map of PropertyDescriptorLists
            if a list is not found for <paramref name="pType"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorList.Reset(System.Type)">
            <summary>
            Used to reset the Global PropertyDescriptorList back to its initial definition. (i.e. no 
            added PropertyDescriptors).
            </summary>
            <param name="pType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorList.#ctor(System.Type)">
            <summary>
            Construct a PropertyDescriptorList for the given type
            and add it to the global map of PropertyDescriptorLists.
            </summary>
            <param name="pType">Item type of the PropertyDescriptorList</param>
            <remarks>
            <para>
            If there is already a list for this type 
            in the class's global map of PropertyDescriptorLists,
            this new instance becomes a copy of the found list, populated with
            the descriptors in that list.
            </para>
            <para>
            If constructor does not find a PropertyDescriptorList for this type
            it populates the new instance with descriptors derived from the item type
            and adds the list to the class's global map.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorList.#ctor(IdeaBlade.Util.PropertyDescriptorList)">
            <summary>
            Copy constructor
            </summary>
            <param name="pPropertyDescriptors"></param>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorList.Add(System.String,System.String)">
            <summary>
            Create a new <see cref="T:System.ComponentModel.PropertyDescriptor"/> and add it to this list.
            </summary>
            <param name="pPropertyName">The name of the property in the new PropertyDescriptor.</param>
            <param name="pPropertyPath">The simple or nested path that gets or sets the property value
            such as the nested path, "Customer.CompanyName".</param>
            <returns>True if the descriptor was added; false if the descriptor already exists in the list.</returns>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorList.Add(System.String)">
            <summary>
            Create or find a <see cref="T:System.ComponentModel.PropertyDescriptor"/> and add it to the list.
            </summary>
            <param name="pPropertyPath">Property path for this list's type.</param>
            <returns>True if the descriptor was added; false if the descriptor already exists in the list.</returns>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorList.Add(System.String,System.Type,IdeaBlade.Util.GetterDelegate,IdeaBlade.Util.SetterDelegate)">
            <summary>
            Create and add a new <see cref="T:System.ComponentModel.PropertyDescriptor"/> to the list 
            based on a full definition of the property including its getter and setter delegates. 
            </summary>
            <param name="pPropertyName">The name of the property in the new PropertyDescriptor.</param>
            <param name="pPropertyType">The type of the property value</param>
            <param name="pGetterDelegate">The delegate that retrieves the property value. No getter if null.</param>
            <param name="pSetterDelegate">The delegate that can set the property value. No setter if null.</param>
            <returns>True if the descriptor was added; false if the descriptor already exists in the list.</returns>
            <remarks>
            <para>
            The PropertyType is the type of the property.  For example, if the 
            PropertyName is "Id" and the list's ItemType is "Order", the PropertyType
            should be "Int64".
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorList.Add(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Add an existing <see cref="T:System.ComponentModel.PropertyDescriptor"/> to the list. 
            </summary>
            <param name="pDescriptor">A PropertyDescriptor applicable to the item type of this list.</param>
            <returns>True if the descriptor was added; false if the descriptor already exists in the list.</returns>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorList.Remove(System.String)">
            <summary>
            Remove the <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the specified nested property path.
            </summary>
            <param name="pNestedPropertyPath">Nested PropertyPath such as "Customer.CompanyName"</param>
            <returns>True if found and removed, else false</returns>
            <remarks>
            <para>
            This method will remove the PropertyDescriptor with the standard name for a
            nested PropertyPath PropertyDescriptor, if it can be found.
            </para>
            <para>
            Note that it will not discover and remove a custom PropertyDescriptor that has a name
            other than the standard DevForce binding name for a nested PropertyPath
            even if that PropertyDescriptor is effectively the same.</para>
            <para>
            You cannot use this signature to remove a PropertyDescriptor defined for other than a nested PropertyPath.
            Use <see cref="M:IdeaBlade.Util.PropertyDescriptorList.Find(System.String)"/> as in:
            <code>
            Remove(Find("Foo"));        // The case of "Foo" matters
            Remove(Find("Foo", true));  // Ignores the case of "Foo"
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorList.Remove(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Remove the specified <see cref="T:System.ComponentModel.PropertyDescriptor"/> from the list.
            </summary>
            <param name="pDescriptor">Property descriptor to be removed</param>
            <returns>True if found and removed, else false</returns>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorList.Find(System.String)">
            <summary>
            Get the <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the PropertyPath specified using a 
            case sensitive search.
            </summary>
            <param name="pPropertyPath">Simple or a nested property path such as "Customer.CompanyName"</param>
            <returns>The PropertyDescriptor if found; else null.</returns>
            <remarks>
            The PropertyPath can be the name of a custom PropertyDescriptor, e.g. "Foo".
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorList.Find(System.String,System.Boolean)">
            <summary>
            Get the <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the PropertyPath specified using a case insensitive search.
            </summary>
            <param name="pPropertyPath">Simple or a nested property path such as "Customer.CompanyName".</param>
            <param name="pIgnoreCase">True if search comparison should ignore case</param>
            <returns>The PropertyDescriptor if found; else null.</returns>
            <remarks>
            The PropertyPath can be the name of a custom PropertyDescriptor, e.g. "Foo".
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorList.AddRange(System.Collections.IEnumerable)">
            <summary>
            Add a range of <see cref="T:System.ComponentModel.PropertyDescriptor"/>s to this list.
            </summary>
            <param name="pEnumerable">PropertyDescriptors to add to this list</param>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorList.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the ListChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:IdeaBlade.Util.PropertyDescriptorList.ItemType">
            <summary>
            Gets the component type of this PropertyDescriptorList.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.PropertyDescriptorList.Version">
            <summary>
            Gets the item type name and list version for this PropertyDescriptorList.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.PropertyDescriptorList.PropertyDescriptorCollection">
            <summary>
            Gets the PropertyDescriptorList as a .NET <see cref="P:IdeaBlade.Util.PropertyDescriptorList.PropertyDescriptorCollection"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.PropertyChangedWeakEventHandler">
            <summary>
            Use carefully!. All weak event handlers must be removed before the subscriber object 
            is garbage collected, otherwise the underlying WeakReferenceToEventHandler's will 
            accumulate in publishers
            an event.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.PropertyChangedWeakEventHandler.#ctor(System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            
            </summary>
            <param name="pStrongEventHandler"></param>
        </member>
        <member name="M:IdeaBlade.Util.PropertyChangedWeakEventHandler.op_Implicit(IdeaBlade.Util.PropertyChangedWeakEventHandler)~System.ComponentModel.PropertyChangedEventHandler">
            <summary>
            Implicit conversion allowing this object to be used in place of
            an event handler
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.PropertyChangedWeakEventHandler.mSubstituteHandler">
            <summary>
            Pre-calculated event handler for fast adding and removing of an event handler
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.PropertyChangedWeakEventHandler.WeakReferenceToEventHandler">
            <summary>
            Holds a weak reference to an event handler
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.PropertyChangedWeakEventHandler.WeakReferenceToEventHandler.#ctor(System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            
            </summary>
            <param name="pEventHandler"></param>
        </member>
        <member name="M:IdeaBlade.Util.PropertyChangedWeakEventHandler.WeakReferenceToEventHandler.IntermediateEventDelegate(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This is an intermediate event handler that the event source
            has a strong reference to.
            </summary>
            <param name="pSender"></param>
            <param name="pArgs"></param>
        </member>
        <member name="M:IdeaBlade.Util.PropertyChangedWeakEventHandler.WeakReferenceToEventHandler.RemoveHandlerFrom(System.Object)">
            <summary>
            Removes the intermediate event handler from the event source object
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.XmlTemplateFormatter">
             <summary>
               Used to replace variables in an input document (template) with values from an XML file. 
             </summary>
             Will raise an exc if any errors and contain the output with embedded info, template exc
             fix up error entries in file
             
             This class replaces variables in an input document (template) with values from an XML file. 
             Additional capabilities are implemented to provide:
              1) Looping for cases where a variable may represent an array of values 
              2) Including or excluding parts of the document based on the values of variables
              
              Instructions are placed in the template file in the following format. (XML Processing Instruction format)
                <?target parameter ?>
                Currently the targets and parameters may be
                1) Insert - Xpath (relative or absolute) expression identifying an attribute in an XML file
                    DefaultValue="A Value" may be specified. If none is specified no value found is an error
                2) ForEach - Xpath (normally relative) expression identifying one or more elements in an XML file
                    MinOccurs="A number" may be specified. Default is 1. O indicates the selection may correctly select 
                    0 elements. Any other number will return an error if a selection selects no elements.
                    The value of a number other than 0 or >0 is all that is checked at this time
                3) IncludeIf - Xpath (relative or absolute) expression returning true or false
                4) EndForEach - Marks the end of ForEach
                5) EndIncludeIf - Marks the end of an IncludeIf
                
                Note: Xpath expressions within a ForEach block may be preceeded by any number of '^' characters
                Each '^' indicates to the Xpath parser that the expression following is to be interpreted 
                in the context of the ForEach block enclosing the current ForEach block. Multiple nested forEach
                block contexts can be referenced in this fashion.
                
                These instructions are implemented in the class ProcessingInstruction and its subclasses. 
                
                Example Follows: Template
            
                   Paternity facts:
                     Location: <?insert /Story/@NurseryName ?>
                     Children (shown below)
                     <?Foreach /Story/Child MinOccurs=0 ?>
                 
                     Child:  <?insert ./@Name ?>  Nickname: <?insert ./@Name2 ?>
                     <?IncludeIf not(./@FatherName='NA') ?>
                     Father: <?insert ./@FatherName DefaultValue="Tom"?>
                     <?EndIncludeIf not(./@FatherName='NA')?>
                     Mother: <?insert ./@MotherName ?> 
                     <?EndForEach /Story/Child ?>
                 
                  Prepared on: <?insert /Story/@PreparedDate ?>
            
               Output:
                  
                   Paternity facts:
                     Location: Sleepy Hills
                     Children (shown below)
                 
                     Child:  Jim Adams  Nickname: JimBob
                     Father: John Adams
                     Mother: Abigail Jones 
                 
                     Child:  Hilary Scott  Nickname: Hilary
                     Father: Frank Scott
                     Mother: Betsy Thomas 
                 
                     Child:  Millard Smith  Nickname: Milly
                     Mother: Jane Smith 
                 
                   Prepared on: May 30 2001
            
              XML used follows:
            
              <!--<?xml version="1.0" encoding="utf-8" ?>-->
              <Story NurseryName="Sleepy Hills" PreparedDate="May 30 2001">
               <Child Name="Jim Adams" FatherName="John Adams" MotherName="Abigail Jones" Name2="JimBob" />
               <Child Name="Hilary Scott" FatherName="Frank Scott" MotherName="Betsy Thomas" Name2="Hilary" />
               <Child Name="Millard Smith" FatherName="NA" MotherName="Jane Smith" Name2="Milly" />
              </Story>
             
              The class returns an exception of type XMLTemplateException which provides access to a partially
              completed document with embedded error messages.
             
              Commented out code is included to check endblocks against begin blocks but this has not
              been fully implemented.
             
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.Format(System.String,System.Xml.XmlDocument,System.String)">
            <summary>
            TBD
            </summary>
            <param name="pTemplate"></param>
            <param name="pXmlDoc"></param>
            <param name="pOutputFileName"></param>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.Format(System.String,System.String)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.Format(System.String,System.Xml.XmlDocument)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.#ctor(System.String,System.String)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.#ctor(System.String,System.Xml.XmlDocument)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.Format">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.XmlTemplateFormatter.ProcessingInstruction">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.ProcessingInstruction.BuildElement(System.String,System.Int32)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.ProcessingInstruction.Setup(System.String,System.Int32)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.XmlTemplateFormatter.ProcessingInstruction.mStartingPosition">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.XmlTemplateFormatter.ProcessingInstruction.mEndingPosition">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.XmlTemplateFormatter.ProcessingInstruction.mParameter">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.XmlTemplateFormatter.ProcessingInstruction.mInstruction">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.XmlTemplateFormatter.ProcessingInstruction.OpenTag">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.XmlTemplateFormatter.ProcessingInstruction.EndTag">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.XmlTemplateFormatter.ProcessingInstruction.StartingPosition">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.XmlTemplateFormatter.ProcessingInstruction.EndingPosition">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.XmlTemplateFormatter.ProcessingInstruction.Instruction">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.XmlTemplateFormatter.InvalidInstruction">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.InvalidInstruction.#ctor(System.String,System.Int32)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.XmlTemplateFormatter.Insert">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.Insert.#ctor(System.String,System.Int32)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.Insert.LocateText(System.Collections.Stack)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.XmlTemplateFormatter.Insert.XPathExpression">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.XmlTemplateFormatter.BeginBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.XmlTemplateFormatter.Loop">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.XmlTemplateFormatter.ForEach">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.ForEach.#ctor(System.String,System.Int32)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.ForEach.AreChildrenMandatory">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.ForEach.XmlNodeArray(System.Collections.Stack)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.XmlTemplateFormatter.ForEach.Separator">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.XmlTemplateFormatter.Include">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.XmlTemplateFormatter.IncludeIf">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.IncludeIf.#ctor(System.String,System.Int32)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.IncludeIf.DetermineResult(System.Collections.Stack)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.XmlTemplateFormatter.EndBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.XmlTemplateFormatter.EndIncludeIf">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.EndIncludeIf.#ctor(System.String,System.Int32)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.XmlTemplateFormatter.EndForEach">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlTemplateFormatter.EndForEach.#ctor(System.String,System.Int32)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Pair`2">
            <summary>
            
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:IdeaBlade.Util.Pair`2.#ctor(`0,`1)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:IdeaBlade.Util.Pair`2.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Pair`2.GetHashCode">
            
        </member>
        <member name="M:IdeaBlade.Util.Pair`2.CompareTo(IdeaBlade.Util.Pair{`0,`1})">
            <summary>
            
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Pair`2.System#IComparable#CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.Pair`2.First">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Pair`2.Second">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Pair`2.T1Comparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Pair`2.T1Comparer.Compare(IdeaBlade.Util.Pair{`0,`1},IdeaBlade.Util.Pair{`0,`1})">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.Pair`2.T2Comparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Pair`2.T2Comparer.Compare(IdeaBlade.Util.Pair{`0,`1},IdeaBlade.Util.Pair{`0,`1})">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.NotificationServiceElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.NotificationServiceElement.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.NotificationServiceElement.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.NotificationServiceElement.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.NotificationServiceElement.ServerPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.NotificationServiceElement.ClientPort">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.HttpFns">
            <summary>
            A collection of static utility functions all involved with the manipulation of HTTP files and streams
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.HttpFns.EquivalentUrls(System.String,System.String)">
            <summary>
            Determines if the URL's refer to the same location.
            </summary>
            <param name="pUrl1">The first URL to compare</param>
            <param name="pUrl2">The seconf URL to compare</param>
            <returns>true if both URL's refer to the same location; false otherwise</returns>
        </member>
        <member name="M:IdeaBlade.Util.HttpFns.GetUrlTextFile(System.String,System.String,System.Int32)">
            <summary>
            Retrieves the contents of a URL as a stream
            </summary>
            <param name="pUrl">The URL to read</param>
            <param name="pProxyName">The name of the proxy host.</param>
            <param name="pProxyPort">The port used by the proxy server.</param>
            <returns>The contents of the URL as a string</returns>
        </member>
        <member name="M:IdeaBlade.Util.HttpFns.CopyFile(System.String,System.String,System.String,System.Int32)">
            <summary>
            Copies the contents of a URL to a file.
            </summary>
            <param name="pUrl">The URL to copy</param>
            <param name="pFilePath">The destination file name</param>
            <param name="pProxyName">The name of the proxy host.</param>
            <param name="pProxyPort">The port on the proxy host to use.</param>
        </member>
        <member name="M:IdeaBlade.Util.HttpFns.ConditionalCopyFile(System.String,System.String,System.DateTime,System.String,System.Int32)">
            <summary>
            Copies the contents of a URL to a file if the URL timestamp is after 
            <paramref name="pLastWriteTime"/>
            </summary>
            <param name="pUrl">The URL to copy</param>
            <param name="pFilePath">The destination file name</param>
            <param name="pLastWriteTime">A timestamp that will be compared to the URL timestamp</param>
            <param name="pProxyName">The name of the proxy host.</param>
            <param name="pProxyPort">The port on the proxy host to use.</param>
        </member>
        <member name="M:IdeaBlade.Util.HttpFns.CopyFolder(System.String,System.String,System.String,System.Int32)">
            <summary>
            Copy all of the files under a URL folder to a specified file system path
            </summary>
            <param name="pUrl">The URL to copy from</param>
            <param name="pFolderPath">The destination folder name</param>
            <param name="pProxyName">The name of the proxy host.</param>
            <param name="pProxyPort">The port on the proxy host to use.</param>
        </member>
        <member name="M:IdeaBlade.Util.HttpFns.CopyFolder(System.String,System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            Copy all of the files under a URL folder to a specified file system path with the
            option to avoid copying files that are already up to date.
            </summary>
            <param name="pUrl">The URL to copy from</param>
            <param name="pFolderPath">The destination folder name</param>
            <param name="pCheckTimestamps">Whether to check the timestamps of the files to
            determine if they are already up to date and thus do not require copying</param>
            <param name="pProxyName">The name of the proxy host.</param>
            <param name="pProxyPort">The port on the proxy host to use.</param>
        </member>
        <member name="M:IdeaBlade.Util.HttpFns.GetFolderContents(System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            Returns a list of HttpFileInfo instances about the contents of a URL folder. The
            option to return info about all subdirectories of the specified folder is also provided.
            </summary>
            <param name="pUrl">The URL folder to search</param>
            <param name="pDeep">Whether to traverse all of the specified folders subdirectories</param>
            <param name="pProxyName">The name of the proxy host.</param>
            <param name="pProxyPort">The port on the proxy host to use.</param>
            <returns>A list of HttpFileInfo instances each corresponding to a single file</returns>
        </member>
        <member name="M:IdeaBlade.Util.HttpFns.PingServer(System.String)">
            <summary>
            Determine if the server exists and is responding.
            </summary>
            <param name="pUrl">URL to ping</param>
            <remarks>
            A timeout value of 100 seconds is used when pinging the server.
            <para>
            <c>False</c> is returned if the server request failed due to a timeout or DNS failure; <c>true</c> is returned otherwise.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.HttpFns.PingServer(System.String,System.Int32)">
            <summary>
            Determine if the server exists and is responding.
            </summary>
            <param name="pUrl">URL to ping</param>
            <param name="pTimeoutMilliseconds">The timeout in milliseconds.</param>
            <returns>True if the server responded</returns>
            <remarks>
            A <paramref name="pTimeoutMilliseconds"/> of 0 indicates that the .NET connection default of 100 seconds should be used.
            If a negative timeout value is provided, then the server is not pinged.
            <para>
            <c>False</c> is returned if the server request failed due to a timeout or DNS failure; <c>true</c> is returned otherwise.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.HttpFns.PingServer(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Determine if the server exists and is responding.
            </summary>
            <param name="pUrl">URL to ping</param>
            <param name="pTimeoutMilliseconds">The timeout in milliseconds.</param>
            <param name="pProxyName">The name of the proxy host.</param>
            <param name="pProxyPort">The port on the proxy host to use.</param>
            <returns>True if the server responded</returns>
            <remarks>
            A <paramref name="pTimeoutMilliseconds"/> of 0 indicates that the .NET connection default of 100 seconds should be used.
            If a negative timeout value is provided, then the server is not pinged.
            <para>
            <c>False</c> is returned if the server request failed due to a timeout or DNS failure; <c>true</c> is returned otherwise.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.HttpFns.PingServer(System.String,System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Internal ping server - throw exception for failures.
            </summary>
            <param name="pUrl"></param>
            <param name="pTimeoutMilliseconds"></param>
            <param name="pProxyName"></param>
            <param name="pProxyPort"></param>
            <param name="pThrowOnError"></param>
            <returns></returns>
            <exception cref="T:System.Net.WebException">Thrown if pThrowOnError is true and the server cannot be contacted</exception>
        </member>
        <member name="T:IdeaBlade.Util.PropertyComparer`1">
            <summary>
            An implementation of the <see cref="T:System.Collections.IComparer"/> interface that operates
            using <see cref="T:System.Reflection.PropertyInfo"/> and <see cref="T:System.ComponentModel.PropertyDescriptor"/> instances.
            This functionally allows IComparers to be dynamically constructed for any
            property of an object.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.PropertyComparer`1.#ctor(System.Reflection.PropertyInfo,System.ComponentModel.ListSortDirection)">
            <summary>
            Initialize a new instance of the PropertyComparer class
            </summary>
            <param name="pPropertyInfo">PropertyInfo metadata describing the property that will be 
            involved in comparison operations</param>
            <param name="pSortDirection">The sort direction for this comparer</param>
        </member>
        <member name="M:IdeaBlade.Util.PropertyComparer`1.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Initialize a new instance of the PropertyComparer class
            </summary>
            <param name="pPropertyDescriptor">PropertyDescriptor metadata describing the property that will be 
            involved in comparison operations</param>
            <param name="pSortDirection">The sort direction for this comparer</param>
        </member>
        <member name="M:IdeaBlade.Util.PropertyComparer`1.#ctor(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Initialize a new instance of the PropertyComparer class
            </summary>
            <param name="pPropertyName"></param>
            <param name="pSortDirection"></param>
        </member>
        <member name="M:IdeaBlade.Util.PropertyComparer`1.Compare(`0,`0)">
            <summary>
            See <see cref="M:System.Collections.IComparer.Compare(System.Object,System.Object)"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.PropertyComparer`1.GetValue(`0)">
            <summary>
            Returns the property value of an object 
            </summary>
            <param name="pObject">An object whose property value we want to retrieve</param>
            <returns>The property value that this comparer compares</returns>
        </member>
        <member name="T:IdeaBlade.Util.StreamFns">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.StreamFns.ToStream(System.String)">
            <summary>
            
            </summary>
            <param name="pString"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.StreamFns.ToStream(System.Byte[])">
            <summary>
            
            </summary>
            <param name="pBytes"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.StreamFns.ToStream(System.Drawing.Image)">
            <summary>
            
            </summary>
            <param name="pImage"></param>
            <returns></returns>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.Any">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.AssemblyBindingRedirect">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.Asynch">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.BOS">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.IIS">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.Checkpointing">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.Disconnected">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.DTC">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.DynamicTypes">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.RPC">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.SSCE">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.ServerPush">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.ServerSideEvents">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.StoredProcs">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.ThirdPartyControls">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.ThirdPartyDatabases">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.UserDefinedColumns">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.VerificationEngine">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationRight.WebServices">
            <summary/>
        </member>
        <member name="P:IdeaBlade.Util.AuthorizationRight.AuthorizationCode">
            <summary>
            Gets the AutorizationCode.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AuthorizationRight.Description">
            <summary>
            Gets the Description.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.AuthorizationCode">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationCode.Error">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationCode.Enterprise">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationCode.DateRestriction">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationCode._Legacy_Express">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationCode._Legacy_Professional">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationCode._Legacy_EnterpriseNoBOS">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationCode._Legacy_EnterpriseLanOnly">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationCode.Standard">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationCode.Professional">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationCode.Express">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationCode.X_Any">
            <summary/>
        </member>
        <member name="F:IdeaBlade.Util.AuthorizationCode.X_AllEnterprise">
            <summary></summary>
        </member>
        <member name="T:IdeaBlade.Util.AuthHelper">
            <summary>
            Summary description for AuthHelper.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.AuthHelper.DaysAuthorized">
            <summary>
            Max number of days for Date-Restricted keys.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.AuthHelper.MaxExpressEntityTypes">
            <summary>
            Max number of entity types for the Express version.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.AuthHelper.PermutationVector">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.AuthHelper.IsAuthorizedFor(IdeaBlade.Util.AuthorizationRight)">
            <summary>
            
            </summary>
            <param name="pAuthorizationRight"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AuthHelper.WarnIfNotAuthorizedFor(IdeaBlade.Util.AuthorizationRight)">
            <summary>
            Returns true if authorized, false otherwise.
            </summary>
            <param name="pAuthorizationRight"></param>
        </member>
        <member name="M:IdeaBlade.Util.AuthHelper.FailIfNotAuthorizedFor(IdeaBlade.Util.AuthorizationRight)">
            <summary>
            
            </summary>
            <param name="pAuthorizationRight"></param>
        </member>
        <member name="M:IdeaBlade.Util.AuthHelper.LoadRuntimeLicense">
            <summary>
            Called by IdeaBladeConfig during initialization.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.AuthHelper.IsRevokedProductKey(System.String)">
            <summary>
            Returns true if product key has been revoked; false otherwise.
            </summary>
            <param name="pProductKey"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AuthHelper.IsAuthorized(IdeaBlade.Util.AuthorizationRight)">
            <summary>
            
            </summary>
            <param name="pAuthorizationRight"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AuthHelper.WarnIfNotAuthorized(IdeaBlade.Util.AuthorizationRight)">
            <summary>
            Returns true if authorized, false otherwise.
            </summary>
            <param name="pAuthorizationRight"></param>
        </member>
        <member name="M:IdeaBlade.Util.AuthHelper.FailIfNotAuthorized(IdeaBlade.Util.AuthorizationRight)">
            <summary>
            
            </summary>
            <param name="pAuthorizationRight"></param>
        </member>
        <member name="M:IdeaBlade.Util.AuthHelper.Install(System.String)">
            <summary>
            
            </summary>
            <param name="pProductKey"></param>
        </member>
        <member name="M:IdeaBlade.Util.AuthHelper.InitializeFromAssembly(System.Reflection.Assembly)">
            <summary>
            
            </summary>
            <param name="pAssembly"></param>
        </member>
        <member name="M:IdeaBlade.Util.AuthHelper.InitializeFromRegistry">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.AuthHelper.RemoveFromRegistry">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.AuthHelper.BuildLicenseKey(System.String)">
            <summary>
            
            </summary>
            <param name="pGuid"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AuthHelper.ConvertProductKeyToAuthorizationCode(System.String)">
            <summary>
            Called from Install process as well as internally. 
            </summary>
            <param name="pProductKey"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AuthHelper.CheckAuthorization">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.AuthHelper.SetNullRegistration">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AuthHelper.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AuthHelper.InstalledDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AuthHelper.AuthorizationCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AuthHelper.ProductKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AuthHelper.RevokedProductKeys">
            <summary>
            Gets a list of revoked product keys.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AuthHelper.AuthorizationMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AuthHelper.IsExpress">
            <summary>
            Returns true if the product is an Express version; false otherwise.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IdeaBladeLicenseAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeLicenseAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="pLicenseKey"></param>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeLicenseAttribute.LicenseKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IdeaBladeLicenseException">
            <summary>
            Exception used for violation of product license.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeLicenseException.#ctor">
            <summary>
            Initializes a new instance of the LicenseException class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeLicenseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the LicenseException class.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeLicenseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the LicenseException class.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
            <param name="pInnerException">An instance of Exception that describes the error that caused this exception</param>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeLicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeLicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="T:IdeaBlade.Util.IDataSourceKey">
            <summary>
            Interface implemented by all data source key types.
            </summary>
            <remarks>
            Each data source supported (currently relational databases and web services) has a concrete
            implementation of <b>IDataSourceKey</b>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.IDataSourceKey.CheckConnection">
            <summary>
            Returns whether the data source connection is available.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IDataSourceKey.Name">
            <summary>
            Returns the key name.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IDataSourceKey.ProbeAssemblyNames">
            <summary>
            Gets or sets the list of assembly names to be probed for dynamically loaded types.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IDataSourceKey.Tag">
            <summary>
            Gets or sets an implementation-specific tag for developers' custom use.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.GrammarString">
            <summary>
              GrammarString is a static class that extends the functionality of Strng.Format().
              The format string passed to GrammarString.Format() can understand grammatical
              rules that are reflectively called in the GrammarString.Library instance.
              The default library supports the English rules for pluralization, possessives,
              and articles.  For example, the statement
              GrammarString.Format("You have {1} new {plural({0},{1})}", "message", 3)
              results in the string "You have 3 new messages".
              See <see cref="T:IdeaBlade.Util.GrammarLibrary"/> for a list of supported rules.
              Additional rules can be added by extending GrammarLibrary and setting
              the GrammarString.Library instance to point to that library.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.GrammarString.Format(System.String,System.Object[])">
            <summary>
              Same syntax as String.Format().  The format string additionally understands
              grammatical rules that are reflectively called to the
              GrammarString.Library instance.  See <see cref="T:IdeaBlade.Util.GrammarLibrary"/> for a
              list of default rules and their syntax.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.GrammarString.Format(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Same syntax as String.Format().  The format string additionally understands
              grammatical rules that are reflectively called to the
              GrammarString.Library instance.  See <see cref="T:IdeaBlade.Util.GrammarLibrary"/> for a
              list of default rules and their syntax.
            </summary>    
        </member>
        <member name="P:IdeaBlade.Util.GrammarString.Library">
            <summary>
              Gets or sets the GrammarLibrary instance used to implement the grammar rules.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.ReflectivePropertyAdapter">
            <summary>
            PropertyPathAdapter that uses runtime reflection and PropertyInfo.GetValue calls
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IListManager">
            <summary>
            An implementor of the IListManager interface
            holds one IList (or many ILists collectively) 
            under the control of a manager of some sort.
            </summary>
            <remarks>
            The manager is expected to control how items are added and removed from the list(s).
            <see cref="T:IdeaBlade.Persistence.EntityListManager`1"/> is the primary example of an IListManager implementor.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.IListManager.ManageList(System.Collections.IList,System.Boolean)">
            <summary>
            Add pList to the set of the manager's lists.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IListManager.UnmanageList(System.Collections.IList)">
            <summary>
            Remove pList from the set of the manager's lists.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IListManager.ContainsList(System.Collections.IList)">
            <summary>
            Return true if pList is in the set of the manager's lists.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.CollectionFns">
            <summary>
            A <c>static</c> (<c>Shared</c> in Visual Basic) class of utility functions for collection management.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.CollectionFns.GetFirst(System.Collections.IEnumerable)">
            <summary>
            Returns the first element of any kind of collection.
            </summary>
            <param name="pEnumerable">The collection from which to retrieve the first element</param>
            <returns>The first element</returns>
        </member>
        <member name="M:IdeaBlade.Util.CollectionFns.GetFirst``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element of any kind of collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pEnumerable"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.CollectionFns.Equals(System.Object,System.Object)">
            <summary>
            Determines if two collections contain the same elements in the same order, or if two objects 
            are equal if either parameter is not a collection.
            </summary>
            <param name="pA">The first collection or object</param>
            <param name="pB">The second collection or object</param>
            <returns>Ture if equal; false if not</returns>
        </member>
        <member name="M:IdeaBlade.Util.CollectionFns.Equals(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Determines if two collections contain the same elements in the same order.
            </summary>
            <param name="pA">The first collection</param>
            <param name="pB">The second collection</param>
            <returns>True if each item in pA equals its corresponding item in pB;
            otherwise false</returns>
        </member>
        <member name="M:IdeaBlade.Util.CollectionFns.GetHashCode(System.Object)">
            <summary>
            Returns a usable hashcode for both scalar objects as well as collections.
            </summary>
            <param name="pValue">The object for which a hashcode is desired</param>
            <returns>A hashcode</returns>
            <remarks>
            A collection hashcode will be an XOR'd hashcode of all of the objects in the collection.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.CollectionFns.GetHashCode(System.Collections.IEnumerable)">
            <summary>
            Returns a hashcode for a collection that is the 
            XOR'd hashcode of all of the objects in the collection.
            </summary>
            <param name="pEnumerable">The collection for which a hashcode is desired</param>
            <returns>A hashcode</returns>
        </member>
        <member name="M:IdeaBlade.Util.CollectionFns.ToArray(System.Array,System.Type)">
            <summary>
            Creates a new strongly typed array that is a copy of the elements in the
            original array.
            </summary>
            <param name="pArray">Array to copy elements from</param>
            <param name="pType">The strong type for the elements in the new array</param>
            <returns>A new strongly typed array</returns>
        </member>
        <member name="M:IdeaBlade.Util.CollectionFns.ToArray(System.Collections.ICollection,System.Type)">
            <summary>
            Creates a new strongly typed array that is a copy of the elements in the
            original collection.
            </summary>
            <param name="pCollection">Collection to copy elements from</param>
            <param name="pType">The strong type for the elements in the new array</param>
            <returns>A new strongly typed array</returns>
        </member>
        <member name="M:IdeaBlade.Util.CollectionFns.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new strongly typed array that contains the elements in the
            original collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pEnumerable"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.CollectionFns.ToList``1(System.Collections.IEnumerable)">
            <summary>
            Creates a new strongly typed List containing the elements in the
            original collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pEnumerable"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.CollectionFns.ToString(System.Collections.IEnumerable,System.String)">
            <summary>
            Concatenates the string version of each element in a collection using the delimiter provided.
            </summary>
            <param name="pEnumerable">The enumerated items whose string formated elements will be concatenated</param>
            <param name="pDelimiter">Delimiter</param>
            <returns>A delimited string</returns>
        </member>
        <member name="M:IdeaBlade.Util.CollectionFns.PartitionByType(System.Collections.IEnumerable)">
            <summary>
            Partitions the input <paramref name="pItems"/> by type into a List of strongly typed
            sublists.
            </summary>
            <param name="pItems"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.CollectionFns.AreAllItemsOfType(System.Collections.IEnumerable,System.Type)">
            <summary>
            
            </summary>
            <param name="pItems"></param>
            <param name="pType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.CollectionFns.AreAllItemsOfSameType(System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="pItems"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.AssertionException">
            <summary>
            Any Debug.Assert or Trace.Assert errors encountered will raise this exception type
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.AssertionException.#ctor">
            <summary>
            Initializes a new instance of the AssertionException class
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.AssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssertionException class. See <see cref="T:IdeaBlade.Util.IdeaBladeException"/>
            </summary>
            <param name="pMessage"></param>
        </member>
        <member name="M:IdeaBlade.Util.AssertionException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="pMessage"></param>
            <param name="pException"></param>
        </member>
        <member name="M:IdeaBlade.Util.AssertionException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the AssertionException class. See <see cref="T:IdeaBlade.Util.IdeaBladeException"/>
            </summary>
            <param name="pMessage"></param>
            <param name="pMessageArgs"></param>
        </member>
        <member name="M:IdeaBlade.Util.AssertionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="T:IdeaBlade.Util.TopoSort">
            <summary>
            Static class for Topological Sort of Vertices based on their Edges
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TopoSort.Sort``1(System.Collections.Generic.ICollection{IdeaBlade.Util.IEdge{``0}},System.Boolean@)">
            <summary>
            Topological Sort of Vertices based on their edges in a Digraph
            </summary>
            <remarks>
            Wrote to support calculation of PersistenceOrder where
            EntityRelations are the edges and their parent and class entities are the vertices
            
            Based on algorithm and analysis in PowerPoint slide "Directed Graphs Algorithms: CSE  373, Lecture 14"
            from  http://www.lazyi.net/classdata/CSE373/Lecture%20Slides/lecture14.ppt
            
            Sort is undefined for cyclic graphs but this is modified to keep going so all vertices are returned
            Only considers a list of edges.
            Does not consider nor allow definition of any vertex (Entity Type) not on an edge (in an EntityRelation)
            </remarks>
            <param name="pEdgeList">Edges are directed links (Parent -> Child) such as EntityRelations </param>
            <param name="pIsAcyclic">True if the EdgeList defines an acyclic graph</param>
            <returns>TopoSort of vertices in all edges (all Parents and Children)</returns>
        </member>
        <member name="M:IdeaBlade.Util.TopoSort.Sort``1(System.Collections.Generic.ICollection{IdeaBlade.Util.IEdge{``0}})">
            <summary>
            Topological sort that eats the Acyclic flag
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TopoSort.EdgesToString``1(System.Collections.Generic.ICollection{IdeaBlade.Util.IEdge{``0}})">
            <summary>
            Return formatted string of StringEdge names
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TopoSort.BreakNextCycle``1(System.Collections.Generic.Queue{IdeaBlade.Util.TopoSort.Vertex{``0}},System.Collections.Generic.IDictionary{``0,IdeaBlade.Util.TopoSort.Vertex{``0}})">
            <summary>
            Break next cycle by clearing link count of the next vertex w/ least parent links
            </summary>
            <param name="pQueue">Queue of vertices w/ no parent links left</param>
            <param name="pVertices">Dictionary of vertices</param>
        </member>
        <member name="T:IdeaBlade.Util.TopoSort.Vertex`1">
            <summary>
            Vertex of an edge. Private internal class of TopoSort
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TopoSort.Vertex`1.ParentLinkCount">
            <summary>
            Get or set the ParentLinkCount
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TopoSort.Vertex`1.Node">
            <summary>
            Get just the vertex's node
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TopoSort.Vertex`1.Children">
            <summary>
            Get or set the Child vertices (edges)
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IEdge`1">
            <summary>
            IEdge interface for directed edges in a Digraph 
            </summary>
            <remarks>
            Implementors can be sorted topologically.
            EntityList should implement this
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IEdge`1.Child">
            <summary>
            Gets the child.
            </summary>
            <value>The child.</value>
        </member>
        <member name="P:IdeaBlade.Util.IEdge`1.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="T:IdeaBlade.Util.StringEdge">
            <summary>
            StringEdge is an example IEdge implementor
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.StringEdge.#ctor(System.String)">
            <summary>
            Test edge based on syntax "A.B"
            </summary>
            <param name="pStringEdge">String with single period in it, e.g. "A.B"</param>
        </member>
        <member name="M:IdeaBlade.Util.StringEdge.CreateTestEdgeList(System.String)">
            <summary>
            Return list of test edges based on string edge spec
            </summary>
            <param name="pEdgeListText">StringEdge spec like "A.B, A.C, A.A, B.C"</param>
            <returns>List of edges</returns>
        </member>
        <member name="P:IdeaBlade.Util.StringEdge.Parent">
            <summary>
            Get the Parent
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.StringEdge.Child">
            <summary>
            Get the Child
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.IbConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.#ctor">
            <summary>
            Public constructor required for Xml serialization.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.Clone">
            <summary>
            Clone the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.SerializeToString">
            <summary>
            Serialize the current instance to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.ProbeAssemblyNames">
            <summary>
            Gets or sets the names of assemblies to search for dynamically loaded types - Applicable to both Client and Server.
            </summary>
            <remarks>
            Assembly names listed here are not specific to a data source key.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.Options">
            <summary>
            Gets or sets a property bag of user and DevForce-defined options - Applicable to both Client and Server.
            </summary>
            <remarks>
            You may add your own user-defined options to this collection.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.UseDTC">
            <summary>
            Gets or sets whether the <b>PersistenceServer</b> should 
            use a .NET <see cref="T:System.Transactions.TransactionScope"/> to manage transactions during save processing - Applicable to server only.
            </summary>
            <remarks>
            If you will be saving entities to multiple data sources within a single <b>PersistenceManager.SaveChanges()</b>
            call you may want to set <b>UseDTC</b> to <c>true</c> so that the changes will be committed or rolled back together.
            <para>
            The <b>TransactionSettings</b> specified with the <b>SaveOptions</b> used for save processing can override
            this setting.
            </para>
            <para>DTC may only be used in the Enterprise versions of DevForce.</para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.Version">
            <summary>
            Version of this editor.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.CopyLocal">
            <summary>
            Determines whether an embedded version of the this file should be copied as a loose file
             to the executable directory.  
            </summary>
            <remarks>Note that the copy will only occur if a loose version of the file does not already exist.  
             Applicable to client only.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.LoginManagerRequired">
            <summary>
            Gets or sets whether a LoginManager is required for user authentication - Applicable to Server only.
            </summary>
            <remarks>The default is false.</remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.EnforceDynamicTypeSecurityOnServer">
            <summary>
            Determines whether security checks should be performed on the server when querying and saving Dynamic entities - Applicable to server only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.Logging">
            <summary>
            Logging Info - Applicable to both Client and Server.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.RdbKeys">
            <summary>
            Database Info - Applicable to both Client and Server.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.WsKeys">
            <summary>
            Web Service Info - Applicable to Server Only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.Remoting">
            <summary>
            Remoting Info - Applicable to both Client and Server.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.NotificationService">
            <summary>
            Notification Service Info.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.WebService">
            <summary>
            Web Service Info - Applicable to Server only for non-IIS web service hosting.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.AppUpdater">
            <summary>
            App Updater Info - Applicable to Client Only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.IbConfig.LoggingInfo">
            <summary>
            Represents configuration information for debug and trace logging.
            </summary>
            <remarks>Corresponds to the <b>logging</b> element in IdeaBlade.ibconfig.</remarks>  
            <!-- No matching elements were found for the following include tag --><include file="IdeaBladeConfig.Examples.xml" path="//Class[@name=&quot;IbConfig&quot;]/method[@name=&quot;LoggingInfo&quot;]/*"/>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.LoggingInfo.#ctor">
            <summary>
            Create an instance of this class.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.LoggingInfo.ToString">
            <summary>
            Gets the name of the log file.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.LoggingInfo.ArchiveLogs">
            <summary>
            Gets or sets whether to archive old log files.
            </summary>
            <remarks>
            If <c>false</c> then the previous log file is overwritten.
            <para>
            Archive file names consist of the base log file name + ".bak" + timestamp.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.LoggingInfo.LogFile">
            <summary>
            Gets or sets the path and file name where the log file should be written. 
            </summary>
            <remarks>
            If no path is provided the file will be written to the executable's directory.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.LoggingInfo.FullyQualifiedLogFile">
            <summary>
            Gets the fully-qualified name of the log file.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.LoggingInfo.UsesSeparateAppDomain">
            <summary>
            Gets or sets whether to use a separate AppDomain for trace file logging purposes - defaults to false.
            </summary>
            <remarks>Using a separate AppDomain for the <see cref="T:IdeaBlade.Util.TracePublisher"/> helps ensure the integrity
            of your PersistenceServer processing; the PersistenceServer will still function 
            if the TracePublisher has failed. 
            <para>
            See the <see cref="T:IdeaBlade.Util.TracePublisher"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.LoggingInfo.ServiceName">
            <summary>
            Gets or sets the name for the Trace Publisher Service - will default to 'TracePublisher' if not specified.
            </summary>
            <remarks>
            See the <see cref="T:IdeaBlade.Util.TracePublisher"/> for more information.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.LoggingInfo.Port">
            <summary>
            Gets or sets the port for the Trace Publisher Service - will default to '9922' if not specified.
            </summary>
            <remarks>
            See the <see cref="T:IdeaBlade.Util.TracePublisher"/> for more information.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.LoggingInfo.AcceptFilters">
            <summary>
            Gets or sets the namespaces for which logging should be turned on.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.LoggingInfo.RejectFilters">
            <summary>
            Gets or sets the namespaces for which logging should be turned off.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.IbConfig.XmlRdbKey">
            <summary>
            Represents database configuration information.
            </summary>
            <remarks>Corresponds to the <b>rdbKey</b> element in IdeaBlade.ibconfig.</remarks>  
            <!-- No matching elements were found for the following include tag --><include file="IdeaBladeConfig.Examples.xml" path="//Class[@name=&quot;IbConfig&quot;]/method[@name=&quot;XmlRdbKey&quot;]/*"/>
        </member>
        <member name="T:IdeaBlade.Util.NamedCollectionItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.NamedCollectionItem.MustBeValidIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.NamedCollectionItem.UniqueName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.NamedCollectionItem.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.NamedCollectionItem.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.NamedCollectionItem.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.XmlRdbKey.#ctor">
            <summary>
            Creates an instance of this class for the "Default" rdbKey.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.XmlRdbKey.#ctor(System.String)">
            <summary>
            Creates an instance of this class for the given rdbKey name.  Internal use only.
            </summary>
            <param name="pName"></param>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.XmlRdbKey.ToString">
            <summary>
            Connection string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.XmlRdbKey.Name">
            <summary>
            Gets or sets the name (moniker) by which this database will be referenced in code.  
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.XmlRdbKey.DataProvider">
            <summary>
            Gets or sets the name of the Data Provider for this datasource.
            </summary>
            <remarks>
            Examples of Data Providers include System.Data.OleDb, System.Data.SqlClient, System.Data.OracleClient, etc.
            <para>
            The Data Provider is used to call the <see cref="M:System.Data.Common.DbProviderFactories.GetFactory(System.String)"/>
            method to determine the <see cref="T:System.Data.Common.DbProviderFactory"/> to use in accessing the data source.  If not 
            specified, DevForce will use the connection string and DatabaseProduct to determine the Data Provider.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.XmlRdbKey.Connection">
            <summary>
            Gets or sets the provider-specific connection string needed to connect to a database.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.XmlRdbKey.ProbeAssemblyNames">
            <summary>
            Gets of sets the names of assemblies to search for dynamically loaded types - Applicable to both Client and Server.
            </summary>
            <remarks>If you have implemented <see cref="T:IdeaBlade.Persistence.IIdGenerator"/> 
            or <see cref="T:IdeaBlade.Persistence.IPersistenceLoginManaager"/> you can specify
            the assembly name(s) to probe here.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.XmlRdbKey.Options">
            <summary>
            Gets or sets the property bag of options available for the RdbKey - applicable to both Client and Server.
            </summary>
            <remarks>
            The property bag can include both DevForce-defined and user-defined options.  
            <para>
            Currently the only DevForce-defined option is "UseSqlIdentityProc", which is used to indicate that
            a stored procedure should be used for SQL Server Identity column processing.  
            </para>
            <list type="table">
            <item>
            <term>UseSqlIdentityProc</term>
            <description>
            Applicable only to SQL Server 2005 databases.  By default, ID processing for tables containing identity
            columns is handled through DevForce code, with the requirement that the database user have
            elevated permission levels.  If this poses a security risk you can instead use the 
            "usp_IdeaBlade_SqlIdentityGenerator" stored procedure provided with DevForce and include this option in
            the server-side IdeaBlade.ibconfig.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.XmlRdbKey.DatabaseProduct">
            <summary>
            Gets or sets the Database Product for this database (SqlServer, Oracle, etc.).
            </summary>
            <remarks>
            See <see cref="F:IdeaBlade.Rdb.DatabaseProduct"/> for possible values.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.XmlRdbKey.Tag">
            <summary>
            A free-form field for developer's custom use.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.IbConfig.XmlRdbKeyCollection">
            <summary>
            The collection of <see cref="T:IdeaBlade.Util.Configuration.IbConfig.XmlRdbKey"/> elements.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.IbConfig.XmlWsKey">
            <summary>
            Represents web service configuration information.
            </summary>
            <remarks>Corresponds to the <b>wsKey</b> element in IdeaBlade.ibconfig.</remarks>  
            <!-- No matching elements were found for the following include tag --><include file="IdeaBladeConfig.Examples.xml" path="//Class[@name=&quot;IbConfig&quot;]/method[@name=&quot;XmlWsKey&quot;]/*"/>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.XmlWsKey.#ctor">
            <summary>
            Creates an instance of this class for the "Default" wsKey.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.XmlWsKey.#ctor(System.String)">
            <summary>
            Creates an instance of this class for the given wsKey name.  Internal use only.
            </summary>
            <param name="pName"></param>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.XmlWsKey.ToString">
            <summary>
            String representation of this wsKey.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.XmlWsKey.Name">
            <summary>
            Gets or sets the name (moniker) by which this web service  will be referenced in code.  
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.XmlWsKey.Url">
            <summary>
            Gets or sets the URL to invoke the web service.
            </summary>
            <remarks>Not required at design-time.</remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.XmlWsKey.Wsdl">
            <summary>
            Gets or sets the location of the web service description (WSDL).
            </summary>
            <remarks>Not required at run-time.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.XmlWsKey.EndpointName">
            <summary>
            Gets or sets the name of the endpoint element in the app.config file to use
            when configuring communications to the service.
            </summary>
            <remarks>
            Applicable only when using a WCF service.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.XmlWsKey.ProbeAssemblyNames">
            <summary>
            Gets or sets the names of assemblies to search for dynamically loaded types - Applicable to both Client and Server.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.XmlWsKey.Options">
            <summary>
            Gets or sets the property bag of options available for the wsKey - applicable to both Client and Server.
            </summary>
            <remarks>
            The property bag can include both DevForce-defined and user-defined options.  
            <para>
            Currently there are no DevForce-defined options for the WsKey.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.XmlWsKey.Tag">
            <summary>
            A free-form field for developer's custom use.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.IbConfig.XmlWsKeyCollection">
            <summary>
            The collection of <see cref="T:IdeaBlade.Util.Configuration.IbConfig.XmlWsKey"/> elements.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.IbConfig.RemotingInfo">
            <summary>
            Represents configuration information for a remote PersistenceServer.
            </summary>
            <remarks>Corresponds to the <b>remoting</b> element in IdeaBlade.ibconfig.</remarks>
            <!-- No matching elements were found for the following include tag --><include file="IdeaBladeConfig.Examples.xml" path="//Class[@name=&quot;IbConfig&quot;]/method[@name=&quot;RemotingInfo&quot;]/*"/>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.RemotingInfo.#ctor">
            <summary>
            Creates a new instance of this class.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.RemotingInfo.ToString">
            <summary>
            String representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.RemotingInfo.RemotePersistenceEnabled">
            <summary>
            Gets or sets whether or not a remote persistence server should be enabled - Applicable to client only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.RemotingInfo.CommunicationsTechnology">
            <summary>
            Gets or sets the communication technology used.
            </summary>
            <remarks>
            This setting determines a) how the client application communicates with the
            Business Object Server, and b) how the Trace Publisher communicates with subscribers.
            Currently, you may choose between .NET Remoting, and Windows Communication Foundation (WCF).
            If you choose WCF you must have the .NET 3.0 assemblies installed.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.RemotingInfo.RemoteBaseUrl">
            <summary>
            Gets or sets the URL where the remote server is located - Applicable to client only if using .NET Remoting, 
            applicable to both client and server if using WCF.
            </summary>
            <remarks>
            <![CDATA[
            The endpoint address is formed as follows: <RemoteBaseUrl>:<ServerPort>/<ServiceName>.
            ]]>
            <para>
            If using <see cref="F:IdeaBlade.Util.CommunicationsTechnology.Wcf"/> and an app.config is not used,
            the protocol scheme portion of the <b>RemoteBaseUrl</b> will be used to set the 
            transport binding.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.RemotingInfo.ServerPort">
            <summary>
            Gets or sets the server port that is listening for client requests. 
            </summary>
            <remarks>
            This value must be the same for both Client and Server configurations.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.RemotingInfo.ServiceName">
            <summary>
            Gets or sets the name of the service on the remote server. 
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.RemotingInfo.ServerDetectTimeoutMilliseconds">
            <summary>
            Gets or sets the number of milliseconds to wait while detecting the existence of the remote server.  
            </summary>
            <remarks>
            0 indicates the .NET default. A negative number suppresses the ping attempt.
            Default is -1.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.RemotingInfo.ProxyName">
            <summary>
            Gets or sets the proxy name that the client makes requests through. 
            </summary>
            <remarks>
            This value must be set on the client if the client is behind a proxy server.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.RemotingInfo.ProxyPort">
            <summary>
            Gets or sets the proxy port that the client makes requests through. 
            </summary>
            <remarks>
            This value must be set on the client if the client is behind a proxy server.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.RemotingInfo.SessionEncryptionKey">
            <summary>
            Gets or sets the encryption key used to encrypt and decrypt the <see cref="T:IdeaBlade.Persistence.SessionBundle"/> passed
            between a client and PersistenceServer.
            </summary>
            <remarks>
            This <b>SessionEncryptionKey</b>key is only needed when using a remote PersistenceServer.
            The encryption key must be the same for all PersistenceServers 
            hosting the same client application. 
            <para>
            A default encryption key is used if not supplied in the IdeaBlade.ibconfig.
            </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.IbConfig.NotificationServiceInfo">
            <summary>
            Represents configuration information for a remote PersistenceServer.
            </summary>
            <remarks>Corresponds to the <b>remoting</b> element in IdeaBlade.ibconfig.</remarks>
            <!-- No matching elements were found for the following include tag --><include file="IdeaBladeConfig.Examples.xml" path="//Class[@name=&quot;IbConfig&quot;]/method[@name=&quot;RemotingInfo&quot;]/*"/>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.NotificationServiceInfo.#ctor">
            <summary>
            Creates a new instance of this class.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.NotificationServiceInfo.ToString">
            <summary>
            String representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.NotificationServiceInfo.Enabled">
            <summary>
            Gets or sets whether the NotificationService should be used.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.NotificationServiceInfo.ServerPort">
            <summary>
            Gets or sets the server port used by the NotificationService.
            </summary>
            <remarks>
            This value must be the same for both Client and Server configurations.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.NotificationServiceInfo.ClientPort">
            <summary>
            Gets or sets the client port used with the NotificationService when using http.
            </summary>
            <remarks>
            When using an http channel to the NotificationService a client port number must be specified.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.IbConfig.WebServiceInfo">
            <summary>
            Represents configuration information for a non-IIS web service.
            </summary>
            <remarks>Corresponds to the <b>webService</b> element in IdeaBlade.ibconfig.
            <para>
            Web Service information is needed on the server side only, and only if hosting
            a web service in the WebServerConsole or WsServerService.
            Non-IIS web service hosting is available only on computers running the Windows XP SP2 or
            Windows Server 2003 operating systems.
            </para>
            </remarks>
            <!-- No matching elements were found for the following include tag --><include file="IdeaBladeConfig.Examples.xml" path="//Class[@name=&quot;IbConfig&quot;]/method[@name=&quot;WebServiceInfo&quot;]/*"/>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.WebServiceInfo.#ctor">
            <summary>
            Creates a new instance of this class.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.WebServiceInfo.ToString">
            <summary>
            String representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.WebServiceInfo.WebServiceEnabled">
            <summary>
            Gets a flag indicating if web service information has been provided.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.WebServiceInfo.RemoteBaseUrl">
            <summary>
            Gets or sets the protocol scheme and host for the web service.
            </summary>
            <remarks>
            If not specified, will default to "http://*".  Combined with the ServerPort
            and ServiceName to determine the full URI (%RemoteBaseURL%:%ServerPort%/%ServiceName%/).
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.WebServiceInfo.ServerPort">
            <summary>
            Gets or sets the port used by the web service.
            </summary>
            <remarks>
            Do not use port 80 if IIS or another web server is already using this port.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.WebServiceInfo.ServiceName">
            <summary>
            Gets or sets the name of the virtual directory for the web service.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.WebServiceInfo.Authentication">
            <summary>
            Gets or sets the authentication scheme(s) used by the web service.
            </summary>
            <remarks>
            Defaults to anonymous.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.IbConfig.AppUpdaterInfo">
            <summary>
            Represents configuration information for automatic application update.
            </summary>
            <remarks>Corresponds to the <b>appUpdater</b> element in IdeaBlade.ibconfig.</remarks>    
            <!-- No matching elements were found for the following include tag --><include file="IdeaBladeConfig.Examples.xml" path="//Class[@name=&quot;IbConfig&quot;]/method[@name=&quot;AppUpdaterInfo&quot;]/*"/>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.IbConfig.AppUpdaterInfo.ToString">
            <summary>
            String representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.AppUpdaterInfo.UpdateUrl">
            <summary>
            Gets or sets the URL where application updates are hosted.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.AppUpdaterInfo.VersionFileName">
            <summary>
            Gets or sets the name of the file containing versioning information.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.IbConfig.AppUpdaterInfo.AppLauncher">
            <summary>
            Gets or sets the name of the process performing the auto-update.
            </summary>
            <remarks><b>AppLauncher.exe</b> is provided with the DevForce installation.</remarks>
        </member>
        <member name="T:IdeaBlade.Util.Configuration.AppUpdaterElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Configuration.AppUpdaterElement.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.AppUpdaterElement.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.AppUpdaterElement.UpdateUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.AppUpdaterElement.AppLauncher">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Configuration.AppUpdaterElement.VersionFileName">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.CommunicationsTechnology">
            <summary>
            The technology used for communications in a distributed environment.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.CommunicationsTechnology.Remoting">
            <summary>
            Use .NET Remoting.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.CommunicationsTechnology.Wcf">
            <summary>
            Use Windows Communication Foundation.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.XmlFns">
            <summary>
            A collection of static methods that supplement the .NET frameworks XML libraries
            Most of the methods in this class reference the <see cref="T:System.Xml.XmlDocument"/> class.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.CreateDocument(System.String)">
            <summary>
            Create a new XmlDocument with the specified root node name
            </summary>
            <param name="pRootNodeName">The name of the root node in the new XmlDocument</param>
            <returns>A new XmlDocument</returns>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.ReadXmlFile(System.String)">
            <summary>
            Creates a new XmlDocument from a specified file.
            </summary>
            <param name="pFileName">The name of the file to use to create a new XmlDocument</param>
            <returns>A new XmlDocument</returns>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.WriteXmlFile(System.String,System.Xml.XmlDocument)">
            <summary>
            Writes an XmlDocument to a file
            </summary>
            <param name="pFileName">The name of the file to write to</param>
            <param name="pXmlDoc">The XmlDocument to write to a file</param>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.GetString(System.Xml.XmlNode,System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.GetBool(System.Xml.XmlNode,System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as a bool.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.GetInt(System.Xml.XmlNode,System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as an int.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.GetLong(System.Xml.XmlNode,System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as a long.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.GetFloat(System.Xml.XmlNode,System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as a float.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.GetDouble(System.Xml.XmlNode,System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as a double.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.GetType(System.Xml.XmlNode,System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as a Tyoe.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.GetImage(System.Xml.XmlNode,System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as an Image.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.GetByteArray(System.Xml.XmlNode,System.String)">
            <summary>
              Gets the value of the node pointed to by the XPath expression as a byte[].
              Treats the node value as a standard base64 string when converting to byte[].
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.GetObject(System.Xml.XmlNode,System.String,System.Type)">
            <summary>
              Gets the value of the node pointed to by the XPath expression and
              parses the string into an object of type pType.  Uses Convert.ChangeType
              for all primitive types.
              Throws exception if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.NodeExists(System.Xml.XmlNode,System.String)">
            <summary>
              Returns whether the node pointed to by the XPath expression exists.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.NodeExists(System.Xml.XmlNode,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
              Returns whether the node pointed to by the XPath expression exists. 
              Any prefixes found in the XPath expression are resolved using the supplied XmlNamespaceManager.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.GetNode(System.Xml.XmlNode,System.String)">
            <summary>
              Gets the XmlNode pointed to by the XPath expression.
              Returns null if not found
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.GetElement(System.Xml.XmlNode,System.String)">
            <summary>
              Gets the XmlElement pointed to by the XPath expression.
              Returns null if not found or not an XmlElement
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.GetNodes(System.Xml.XmlNode,System.String)">
            <summary>
              Gets the XmlNodes pointed to by the XPath expression.
              Returns an empty list if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.SetElementValue(System.Xml.XmlNode,System.String,System.String,System.Boolean)">
            <summary>
            Sets (and creates if needed) the innertext of an XmlElement given its xpath.
            Note that this will overwrite any existing values and children of the
            specified node
            </summary>
            <param name="pNode"></param>
            <param name="pXPath"></param>
            <param name="pInnerText"></param>
            <param name="pCreateMissingElements"></param>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.SetAttributeValue(System.Xml.XmlNode,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sets (and creates if needed) the value of an XmlAttribute given its xpath.
            both the element and the attribute will be created if needed
            </summary>
            <param name="pNode"></param>
            <param name="pElementXPath"></param>
            <param name="pAttributeName"></param>
            <param name="pAttributeValue"></param>
            <param name="pCreateMissingElements"></param>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.CreateElement(System.Xml.XmlNode,System.String)">
            <summary>
            Creates and returns an element given its xpath.
            </summary>
            <param name="pNode"></param>
            <param name="pElementXPath"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.XmlFns.ValidateAttribute(System.Xml.XmlElement,System.String,System.String,System.String[])">
            <summary>
            Validates that an <see cref="T:System.Xml.XmlElement"/>'s specified attribute is one of list of valid values or null
            If it is not then raise an exception.
            If the attribute does not exist - set it with a default value
            </summary>
            <param name="pElement">The element to validation</param>
            <param name="pAttributeName">The specific attribute to validate</param>
            <param name="pDefaultValue">The default value to be used if the attribute does not exist</param>
            <param name="pValidValues">An array of valid attribute values</param>
        </member>
        <member name="T:IdeaBlade.Util.OrderedHashMap">
            <summary>
            A version of the <see cref="T:System.Collections.Hashtable"/> that retains the
            order that entries are added to the map.
            All entries, keys, and values are enumerated in the order in which they were
            initially added to the map.  Keys and Values collections are live and
            will reflect changes that are made to the map.  Enumeration of any of the 
            collections while the map is changing will result in an InvalidOperationException
            during enumeration.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.#ctor">
            <summary>
            Initialize a new instance of the OrderedHashMap class
            <see cref="T:System.Collections.Hashtable"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the OrderedHashMap class
            <see cref="T:System.Collections.Hashtable"/>
            </summary>
            <param name="pCapacity"></param>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.#ctor(System.Int32,System.Single)">
            <summary>
            Initialize a new instance of the OrderedHashMap class
            <see cref="T:System.Collections.Hashtable"/>
            </summary>
            <param name="pCapacity"></param>
            <param name="pLoadFactor"></param>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.#ctor(System.Collections.IDictionary)">
            <summary>
            Initialize a new instance of the OrderedHashMap class
            <see cref="T:System.Collections.Hashtable"/>
            </summary>
            <param name="pDictionary"></param>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.#ctor(System.Collections.IDictionary,System.Single)">
            <summary>
            Initialize a new instance of the OrderedHashMap class
            <see cref="T:System.Collections.Hashtable"/>    /// 
            </summary>
            <param name="pDictionary"></param>
            <param name="pLoadFactor"></param>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)">
            <summary>
            Initialize a new instance of the OrderedHashMap class
            <see cref="T:System.Collections.Hashtable"/>
            </summary>
            <param name="pDictionary"></param>
            <param name="pLoadFactor"></param>
            <param name="pComparer"></param>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)">
            <summary>
            Initialize a new instance of the OrderedHashMap class
            <see cref="T:System.Collections.Hashtable"/>
            </summary>
            <param name="pDictionary"></param>
            <param name="pComparer"></param>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.#ctor(System.Collections.IEqualityComparer)">
            <summary>
            Initialize a new instance of the OrderedHashMap class
            <see cref="T:System.Collections.Hashtable"/>
            </summary>
            <param name="pComparer"></param>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.#ctor(System.Int32,System.Collections.IEqualityComparer)">
            <summary>
            Initialize a new instance of the OrderedHashMap class
            <see cref="T:System.Collections.Hashtable"/>
            </summary>
            <param name="pCapacity"></param>
            <param name="pComparer"></param>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)">
            <summary>
            Initialize a new instance of the OrderedHashMap class
            <see cref="T:System.Collections.Hashtable"/>
            </summary>
            <param name="pCapacity"></param>
            <param name="pLoadFactor"></param>
            <param name="pComparer"></param>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialize a new instance of the OrderedHashMap class
            <see cref="T:System.Collections.Hashtable"/>
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.Add(System.Object,System.Object)">
            <summary>
            <see cref="M:System.Collections.Hashtable.Add(System.Object,System.Object)"/>
            </summary>
            <param name="pKey"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.Insert(System.Int32,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="pIndex"></param>
            <param name="pKey"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.IndexOfKey(System.Object)">
            <summary>
            
            </summary>
            <param name="pKey"></param>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.Clear">
            <summary>
            <see cref="M:System.Collections.Hashtable.Clear"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.Clone">
            <summary>
            <see cref="M:System.Collections.Hashtable.Clone"/>. Not yet implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.CopyTo(System.Array,System.Int32)">
            <summary>
            <see cref="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)"/>
            </summary>
            <param name="pArray"></param>
            <param name="pIndex"></param>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.GetEnumerator">
            <summary>
            <see cref="M:System.Collections.Hashtable.GetEnumerator"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="M:System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.Util.OrderedHashMap.Remove(System.Object)">
            <summary>
            <see cref="M:System.Collections.Hashtable.Remove(System.Object)"/>
            Note: O(n) for now 
            </summary>
            <param name="pKey"></param>
        </member>
        <member name="F:IdeaBlade.Util.OrderedHashMap.mOrderedKeys">
            <summary>
            List of ordered keys
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.OrderedHashMap.Item(System.Object)">
            <summary>
            <see cref="P:System.Collections.Hashtable.Item(System.Object)"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.OrderedHashMap.Keys">
            <summary>
            <see cref="P:System.Collections.Hashtable.Keys"/>
            Keys collection is live.  Will reflect changes as map changes.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.OrderedHashMap.Values">
            <summary>
            <see cref="P:System.Collections.Hashtable.Values"/>
            Values collection is live.  Will reflect changes as map changes.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.PropertyDescriptorFns">
            <summary>
            Utility functions for managing .NET <see cref="T:System.ComponentModel.PropertyDescriptor"/>s.
            </summary>
            <remarks>
            Many methods take a PropertyPath parameter, which can be either a simple or a nested property path.
            A <b>simple property path name</b> is a string which only has characters permitted in a .NET identifier name.
            A <b>nested property path name</b> is a string with a period in it
            representing a succession of property calls leading from an instance of a particular type.
            For example, "Order.Customer.CompanyName" is a path from an Order object through a Customer object to 
            a CompanyName string property of a Customer.
            <para>
            Construct a standard <b>PropertyDescriptor</b> name from a nested property path using <see cref="M:IdeaBlade.Util.PropertyDescriptorFns.GetBindingName(System.String)"/>.
            DevForce uses the <see cref="F:IdeaBlade.Util.PropertyDescriptorFns.SelfPropertyName"/> string constant as a pseudo-property name to refer to 
            an instance of the object itself.
            </para>
            <para>
            PropertyDescriptors created by methods of this class are actually instances of a
            DevForce subclass of PropertyDescriptor, <see cref="T:IdeaBlade.Util.AdaptedPropertyDescriptor"/>.
            The PropertyDescriptorList delegates much of its discovery to this class.
            </para>
            </remarks>
        </member>
        <member name="F:IdeaBlade.Util.PropertyDescriptorFns.SelfPropertyName">
            <summary>
            Name of the property that returns the item itself.
            </summary>
            <remarks>
            <para>That name is "__Self" in the current implementation but it may change in future versions.
            You must not make your code dependent upon this particular format. Refer to this string constant instead.
            </para>
            <para>Also see <see cref="T:IdeaBlade.Util.SelfPropertyAdapter"/>.</para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorFns.GetSelfPropertyDescriptor(System.Type)">
            <summary>
            Returns the <see cref="F:IdeaBlade.Util.PropertyDescriptorFns.SelfPropertyName"/> property descriptor for the specified type.
            </summary>
            <param name="pComponentType">The type of the object for which this property is defined.</param>
            <remarks>
            <para>
            Creates only one "Self" descriptor for each type encountered;
            this same PropertyDescriptor will be returned on subsequent calls for that type.
            </para>
            <para>The PropertyDescriptor's name is "__Self" in the current implementation
            but it may change in future versions.
            You must not make your code dependent upon this particular format. Refer to <see cref="F:IdeaBlade.Util.PropertyDescriptorFns.SelfPropertyName"/> instead.
            </para>
            <para>Also see <see cref="T:IdeaBlade.Util.SelfPropertyAdapter"/>.</para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorFns.GetBindingName(System.String)">
            <summary>
            Gets the DevForce standard binding name for a PropertyPath. 
            </summary>
            <param name="pPropertyPath">A string representing a PropertyPath</param>
            <returns>The DevForce standard binding name for the PropertyPath</returns>
            <remarks>
            <para>
            <b>GetBindingName</b> returns a string with the DevForce standard binding name for the PropertyPath.
            The name returned will be a valid .NET identifier name and as such
            will not contain special characters such as periods.
            </para>
            <para>
            Simple PropertyPath names (e.g., "Foo") are returned from this method unaltered.
            </para>
            <para>
            A nested PropertyPath is a string with a period (".") in it, such as "Customer.CompanyName", and
            is not a valid .NET identifier name.  
            Accordingly, this method reformats nested PropertyPath strings into valid property identifiers.
            The current format of a "BindingName" for a nested property path consists of a
            2 character prefix of underscores ("__") followed by the PropertyPath with periods replaced by underscores.
            Thus "Customer.CompanyName" becomes "__Customer_CompanyName".
            </para>
            <para><b>Note:</b> This format for the binding name is an implementation detail of the current DevForce version and may change in future versions.
            </para>
            <para>
            You can call this method at any time to see how DevForce translates a PropertyPath string into
            a property name suitable for binding.
            You might do so, for example, in order to find in a <see cref="T:IdeaBlade.Util.PropertyDescriptorList"/>
            the PropertyDescriptor that corresponds to a nested PropertyPath.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorFns.BuildPropertyDescriptor(System.String,System.Type,System.Type,IdeaBlade.Util.GetterDelegate,IdeaBlade.Util.SetterDelegate)">
            <summary>
            Builds a <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <param name="pPropertyName">The name of the property in the new PropertyDescriptor name.</param>
            <param name="pComponentType">The type of object to which the property is bound.</param>
            <param name="pPropertyType">The type of the property value</param>
            <param name="pGetterDelegate">The delegate that retrieves the property value. No getter if null.</param>
            <param name="pSetterDelegate">The delegate that can set the property value. No setter if null.</param>
            <returns>The created property descriptor</returns>
            <remarks>
            <para>
            Do not confuse the ComponentType with the PropertyType. 
            If the bound object is "Order" and the PropertyName is "Id",
            "Order" is the ComponentType and "Int64" is the PropertyType.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorFns.IsSimplePropertyPath(System.String)">
            <summary>
            Return true if pPropertyPath is not a nested property name.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorFns.GetPropertyDescriptor(System.Type,System.String)">
            <summary>
            Returns a <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the specified Type and property path.
            </summary>
            <param name="pComponentType">The type of object to which the property is bound.</param>
            <param name="pPropertyPath">Simple, or nested PropertyPath such as "Customer.CompanyName",
            that identifies the PropertyDescriptor or helps the method construct one.</param>
            <returns>
            A property descriptor if the method can find or contruct a suitable PropertyDescriptor;
            else throws an exception.
            </returns>
            <remarks>
            <para>If <paramref name="pPropertyPath"/> is a nested PropertyPath or translates to the "SelfPropertyName", 
            this method returns an appropriate, corresponding PropertyDescriptor.
            </para>
            <para>If <paramref name="pPropertyPath"/> is a simple path name, the method looks for the PropertyDescriptor with this exact name
            in the PropertyDescriptorCollection extracted from <paramref name="pComponentType"/>.
            </para>
            <para>
            Do not confuse the ComponentType with the PropertyType. 
            If the bound object is "Order" and the PropertyName is "Id",
            "Order" is the ComponentType and "Int64" is the PropertyType.
            The PropertyType is discovered later via reflection.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorFns.GetPropertyDescriptor(System.Type,System.ComponentModel.ITypedList,System.String)">
            <summary>
            Returns a <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the specified Type and PropertyPath, using an ITypedList.
            </summary>
            <param name="pComponentType">The type of object to which the property is bound.</param>
            <param name="pTypedList">A .NET ITypedList with PropertyDescriptors to use for this pComponentType</param>
            <param name="pPropertyPath">Simple, or nested PropertyPath such as "Customer.CompanyName",
            that identifies the PropertyDescriptor or helps the method construct one.</param>
            <returns>
            A property descriptor if the method can find or contruct a suitable PropertyDescriptor;
            else throws an exception.
            </returns>
            <remarks>
            <para><paramref name="pTypedList"/> provides a list of bindable properties different from the public properties of the 
            <paramref name="pComponentType"/>.
            </para>
            <para>If <paramref name="pPropertyPath"/> is a nested PropertyPath or translates to the "SelfPropertyName", 
            this method returns an appropriate, corresponding PropertyDescriptor.
            </para>
            <para>If <paramref name="pPropertyPath"/> is a simple path name, the method looks in the
            in the <paramref name="pTypedList"/> for the PropertyDescriptor with this exact property path.
            </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.Util.IPropertyChanged">
            <summary>
              Interface that allows listeners to determine when a property has changed
              on an object.
            </summary>
        </member>
        <member name="E:IdeaBlade.Util.IPropertyChanged.PropertyChanged">
            <summary>
              Occurs when a property has changed value on an object.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.ConfigFileFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.ConfigFileFormat.IbConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.ConfigFileFormat.AppConfig">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IdeaBladeConfig">
            <summary>
             Used to manage application-level properties within the DevForce framework.
            </summary>
            <remarks>
            <b>IdeaBladeConfig</b> is the in-memory representation of the <b>IdeaBlade.ibconfig</b>
            properties file.  The probing sequence for this file is as follows:
            <para>
            1) Look for a loose file located in the same directory as the application executable.
            </para>
            <para>
            2) If not found then the framework attempts to locate an embedded version of the file 
            in the entry assembly.
            </para>
            <para>
            3) If not found then an attempt is made to locate
              an embedded version of the file in an assembly called 'AppHelper'.
            </para>
            <para>
            4) If the file can still not be found then a generic default is supplied by 
              the framework.
            </para>
            <para>This search can be short-circuited by specifying either
              the <see cref="P:IdeaBlade.Util.IdeaBladeConfig.ConfigFileLocation"/> or the <see cref="P:IdeaBlade.Util.IdeaBladeConfig.ConfigFileAssembly"/> property,
               which will cause the search to start at the specified directory location or assembly.
            </para>
            </remarks>
        </member>
        <member name="F:IdeaBlade.Util.IdeaBladeConfig.IsolatedAssemblyName">
            <summary>
            Default Assembly name for any separate assembly containing the ibconfig file.  Currently <b>AppHelper</b>.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.IdeaBladeConfig.BaseFileName">
            <summary>
            Filename of the properties file.  Currently <b>IdeaBlade.ibconfig</b>.
            Required by several other assemblies.
            </summary>    
        </member>
        <member name="F:IdeaBlade.Util.IdeaBladeConfig.CurrentVersion">
            <summary>
            Current ibconfig file version.
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.IdeaBladeConfig.DefaultDataSourceKeyName">
            <summary>
            Default DataSourceKeyName.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.#ctor">
            <summary>
            Public constructor required for Xml serialization.
            </summary>
            <remarks>
            Do not directly call this constructor, but instead use the static <see cref="P:IdeaBlade.Util.IdeaBladeConfig.Instance"/>
            property to probe for and load the IdeaBlade.ibconfig file.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.AssertNonDefaultVersion">
            <summary>
            Asserts that a non-default version of the IdeaBlade.ibconfig file can be found.
            </summary>
            <exception cref="T:IdeaBlade.Util.IdeaBladeException">File not found</exception>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.DeserializeFromAssembly(System.Reflection.Assembly)">
            <summary>
            Used to deserialize an embedded IdeaBlade.ibconfig file.  Internal use only.
            </summary>
            <param name="pAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.DeserializeFromFile(System.String)">
            <summary>
            Used to deserialize a loose app.config, web.config, or IdeaBlade.ibconfig file.  Internal use only.
            </summary>
            <param name="pFileName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.DeserializeFromLocation(System.String)">
            <summary>
            Used to discover and deserialize one of the loose configuration files in the specified directory.  Internal use only.
            </summary>
            <param name="pFileDir"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.DeserializeFromStream(System.IO.Stream)">
            <summary>
            Used to deserialize an IdeaBlade.ibconfig. Internal use only.
            </summary>
            <param name="pStream"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.Clone">
            <summary>
            Clone the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.SerializeToFile(System.String)">
            <summary>
            Serialize the current instance to a file.
            </summary>
            <param name="pFileName"></param>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.CreateClientVersion">
            <summary>
            Creates a client-side version of the IdeaBlade.ibconfig.
            </summary>
            <returns></returns>
            <remarks>A client-side version has no rdbKey elements, and remotePersistenceEnabled is true.</remarks>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.CreateServerVersion">
            <summary>
            Creates a server-side version of the IdeaBlade.ibconfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.SerializeToString">
            <summary>
            Serialize the current instance to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.SerializeToByteArray">
            <summary>
            Serialize the current instance to a byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.InitializeFromSource">
            <summary>
              Locates and parses the IdeaBlade.ibconfig file, and initializes platform services
              such as logging.  Any reference to IdeaBladeConfig.Instance also achieves the
              same effect.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.Instance">
            <summary>
              Returns the Singleton instance of this class.
            </summary>
            <remarks>
            Automatically loads and initializes the properties file if it has not already done so.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.BaseAppDirectory">
            <summary>
              Gets the base application directory.  
            </summary>
            <remarks>
            This is typically the location of the entry assembly (the first assembly used to execute the application).
              If the entry assembly is null, then returns the base directory of the
              current application domain.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.ConfigFileName">
            <summary>
              Gets the local path and filename of the application configuration file.
              Returns null if none exists.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.ConfigFileLocation">
            <summary>
              Gets or sets the directory that should be
              searched first when probing for the IdeaBlade.ibconfig file.  
            </summary>
            <remarks>
              If the file is not found, then the standard probing behavior is followed.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.ConfigFileAssembly">
            <summary>
              Gets or sets the assembly that should be
              searched first for an embedded file when probing for the IdeaBlade.ibconfig file.  
              followed.
            </summary>
            <remarks>
              If the file is not found, then the standard probing behavior is followed.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.Initialized">
            <summary>
              Gets whether or not the Instance has been initialized.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.FileName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.ConfigFileFormat">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.TryList">
            <summary>
            List of probe attempts.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.LoadedFrom">
            <summary>
            Returns either the Assembly or a file name where this configuration was
            actually loaded from. 
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.ProbeAssemblyNames">
            <summary>
            Gets or sets the names of assemblies to search for dynamically loaded types - Applicable to both Client and Server.
            </summary>
            <remarks>
            Assembly names listed here are not specific to a data source key.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.Options">
            <summary>
            Gets or sets a property bag of user and DevForce-defined options - Applicable to both Client and Server.
            </summary>
            <remarks>
            You may add your own user-defined options to this collection.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.UseDTC">
            <summary>
            Gets or sets whether the <b>PersistenceServer</b> should 
            use a .NET <see cref="T:System.Transactions.TransactionScope"/> to manage transactions during save processing - Applicable to server only.
            </summary>
            <remarks>
            If you will be saving entities to multiple data sources within a single <b>PersistenceManager.SaveChanges()</b>
            call you may want to set <b>UseDTC</b> to <c>true</c> so that the changes will be committed or rolled back together.  
            If using multiple data sources, you should also start the Distributed Transaction Coordinator system service.
            <para>
            The <b>TransactionSettings</b> specified with the <b>SaveOptions</b> used for save processing can override
            this setting.
            </para>
            <para>DTC may only be used in the Enterprise versions of DevForce.</para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.UseDeclarativeTransactions">
            <summary>
            Do not use - Whether the <b>PersistenceServer</b> should use COM+ during save processing - Applicable to server only.
            </summary>
            <remarks>
            If <c>true</c> save processing will be done using the <b>DeclarativeTransactionManager</b> COM+ component.
            A COM+ application called "IdeaBlade.Persistence.Server" will be registered automatically on first
            activation if not already registered.  You can use regsvcs.exe (the .NET Services Installation Tool) to manually
            register the component.
            <para>May only be used in the Enterprise versions of DevForce.</para>
            <para>
            This property is no longer supported.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.IsDefaultVersion">
            <summary>
            Returns whether this instance is the default fall-thru version.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.Version">
            <summary>
            Version of this editor.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.CopyLocal">
            <summary>
            Determines whether an embedded version of the this file should be copied as a loose file
             to the executable directory.  
            </summary>
            <remarks>Note that the copy will only occur if a loose version of the file does not already exist.  
             Applicable to client only.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.LoginManagerRequired">
            <summary>
            Gets or sets whether a LoginManager is required for user authentication - Applicable to Server only.
            </summary>
            <remarks>The default is false.</remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.EnforceDynamicTypeSecurityOnServer">
            <summary>
            Determines whether security checks should be performed on the server when querying and saving Dynamic entities - Applicable to server only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.Logging">
            <summary>
            Logging Info - Applicable to both Client and Server.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.RdbKeys">
            <summary>
            Database Info - Applicable to both Client and Server.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.WsKeys">
            <summary>
            Web Service Info - Applicable to Server Only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.Remoting">
            <summary>
            Remoting Info - Applicable to both Client and Server.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.NotificationService">
            <summary>
            NotificationService Info - Applicable to both Client and Server.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.WebService">
            <summary>
            Web Service Info - Applicable to Server only for non-IIS web service hosting.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.AppUpdater">
            <summary>
            App Updater Info - Applicable to Client Only.
            </summary>
            <remarks>
            The Automatic Application Update feature has been deprecated in favor of Microsoft ClickOnce.  The
            AppUpdater is still available for use, but we recommend using ClickOnce with DevForce applications.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo">
            <summary>
            Represents configuration information for debug and trace logging.
            </summary>
            <remarks>Corresponds to the <b>logging</b> element in IdeaBlade.ibconfig.</remarks>  
            <example><code><![CDATA[
// Sample logging element in IdeaBlade.ibconfig

<logging>
    <archiveLogs>true</archiveLogs>
    <logFile>c:\logfiles\myAppLog.xml</logFile>
    <namespaceRejectFilter>myApp.Entities</namespaceRejectFilter>
    <namespaceAcceptFilter>myApp.Entities.Utils</namespaceAcceptFilter>
    <usesSeparateAppDomain>false</usesSeparateAppDomain>
    <serviceName>myAppTracePublisher</serviceName>
    <port>9904</port>
</logging>
]]>
	</code></example>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo.#ctor">
            <summary>
            Create an instance of this class.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo.ToString">
            <summary>
            Gets the name of the log file.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo.ArchiveLogs">
            <summary>
            Gets or sets whether to archive old log files.
            </summary>
            <remarks>
            If <c>false</c> then the previous log file is overwritten.
            <para>
            Archive file names consist of the base log file name + ".bak" + timestamp.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo.LogFile">
            <summary>
            Gets or sets the path and file name where the log file should be written. 
            </summary>
            <remarks>
            If no path is provided the file will be written to the executable's directory.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo.FullyQualifiedLogFile">
            <summary>
            Gets the fully-qualified name of the log file.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo.UsesSeparateAppDomain">
            <summary>
            Gets or sets whether to use a separate AppDomain for trace file logging purposes - defaults to false.
            </summary>
            <remarks>Using a separate AppDomain for the <see cref="T:IdeaBlade.Util.TracePublisher"/> helps ensure the integrity
            of your PersistenceServer processing; the PersistenceServer will still function 
            if the TracePublisher has failed. 
            <para>
            See the <see cref="T:IdeaBlade.Util.TracePublisher"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo.ServiceName">
            <summary>
            Gets or sets the name for the Trace Publisher Service - will default to 'TracePublisher' if not specified.
            </summary>
            <remarks>
            See the <see cref="T:IdeaBlade.Util.TracePublisher"/> for more information.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo.Port">
            <summary>
            Gets or sets the port for the Trace Publisher Service - will default to '9922' if not specified.
            </summary>
            <remarks>
            See the <see cref="T:IdeaBlade.Util.TracePublisher"/> for more information.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo.AcceptFilters">
            <summary>
            Gets or sets the namespaces for which logging should be turned on.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo.RejectFilters">
            <summary>
            Gets or sets the namespaces for which logging should be turned off.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IdeaBladeConfig.XmlRdbKey">
            <summary>
            Represents database configuration information.
            </summary>
            <remarks>Corresponds to the <b>rdbKey</b> element in IdeaBlade.ibconfig.</remarks>  
            <example><code><![CDATA[
// Sample rdbKey element in IdeaBlade.ibconfig

<rdbKey name="Default">
    <connection>Provider=SQLOLEDB.1;Integrated Security=SSPI;Initial Catalog=IdeaBladeNorthwind;Data Source=localhost</connection>
    <probeAssemblyName>myApp.Entities</probeAssemblyName>
</rdbKey>
]]>
	</code></example>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.XmlRdbKey.#ctor">
            <summary>
            Creates an instance of this class for the "Default" rdbKey.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.XmlRdbKey.#ctor(System.String)">
            <summary>
            Creates an instance of this class for the given rdbKey name.  Internal use only.
            </summary>
            <param name="pName"></param>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.XmlRdbKey.ToString">
            <summary>
            Connection string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.XmlRdbKey.Name">
            <summary>
            Gets or sets the name (moniker) by which this database will be referenced in code.  
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.XmlRdbKey.DataProvider">
            <summary>
            Gets or sets the name of the Data Provider for this datasource.
            </summary>
            <remarks>
            Examples of Data Providers include System.Data.OleDb, System.Data.SqlClient, System.Data.OracleClient, etc.
            <para>
            The Data Provider is used to call the <see cref="M:System.Data.Common.DbProviderFactories.GetFactory(System.String)"/>
            method to determine the <see cref="T:System.Data.Common.DbProviderFactory"/> to use in accessing the data source.  If not 
            specified, DevForce will use the connection string and DatabaseProduct to determine the Data Provider.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.XmlRdbKey.Connection">
            <summary>
            Gets or sets the provider-specific connection string needed to connect to a database.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.XmlRdbKey.ProbeAssemblyNames">
            <summary>
            Gets of sets the names of assemblies to search for dynamically loaded types - Applicable to both Client and Server.
            </summary>
            <remarks>If you have implemented <see cref="T:IdeaBlade.Persistence.IIdGenerator"/> 
            or <see cref="T:IdeaBlade.Persistence.IPersistenceLoginManaager"/> you can specify
            the assembly name(s) to probe here.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.XmlRdbKey.Options">
            <summary>
            Gets or sets the property bag of options available for the RdbKey - applicable to both Client and Server.
            </summary>
            <remarks>
            The property bag can include both DevForce-defined and user-defined options.  
            <para>
            Currently the only DevForce-defined option is "UseSqlIdentityProc", which is used to indicate that
            a stored procedure should be used for SQL Server Identity column processing.  
            </para>
            <list type="table">
            <item>
            <term>UseSqlIdentityProc</term>
            <description>
            Applicable only to SQL Server 2005 databases.  By default, ID processing for tables containing identity
            columns is handled through DevForce code, with the requirement that the database user have
            elevated permission levels.  If this poses a security risk you can instead use the 
            "usp_IdeaBlade_SqlIdentityGenerator" stored procedure provided with DevForce and include this option in
            the server-side IdeaBlade.ibconfig.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.XmlRdbKey.DatabaseProduct">
            <summary>
            Gets or sets the Database Product for this database (SqlServer, Oracle, etc.).
            </summary>
            <remarks>
            See <see cref="F:IdeaBlade.Rdb.DatabaseProduct"/> for possible values.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.XmlRdbKey.Tag">
            <summary>
            A free-form field for developer's custom use.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IdeaBladeConfig.XmlRdbKeyCollection">
            <summary>
            The collection of <see cref="T:IdeaBlade.Util.IdeaBladeConfig.XmlRdbKey"/> elements.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IdeaBladeConfig.XmlWsKey">
            <summary>
            Represents web service configuration information.
            </summary>
            <remarks>Corresponds to the <b>wsKey</b> element in IdeaBlade.ibconfig.</remarks>  
            <example><code><![CDATA[
// Sample wsKey element in IdeaBlade.ibconfig

<wsKey name="Amazon">
    <url>http://soap.amazon.com/onca/soap?Service=AWSECommerceService</url>
    <probeAssemblyName>myApp.Entities</probeAssemblyName>
</wsKey>
]]>
	</code></example>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.XmlWsKey.#ctor">
            <summary>
            Creates an instance of this class for the "Default" wsKey.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.XmlWsKey.#ctor(System.String)">
            <summary>
            Creates an instance of this class for the given wsKey name.  Internal use only.
            </summary>
            <param name="pName"></param>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.XmlWsKey.ToString">
            <summary>
            String representation of this wsKey.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.XmlWsKey.Name">
            <summary>
            Gets or sets the name (moniker) by which this web service  will be referenced in code.  
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.XmlWsKey.Url">
            <summary>
            Gets or sets the URL to invoke the web service.
            </summary>
            <remarks>Not required at design-time.</remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.XmlWsKey.Wsdl">
            <summary>
            Gets or sets the location of the web service description (WSDL).
            </summary>
            <remarks>Not required at run-time.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.XmlWsKey.EndpointName">
            <summary>
            Gets or sets the name of the endpoint element in the app.config file to use
            when configuring communications to the service.
            </summary>
            <remarks>
            Applicable only when using a WCF service.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.XmlWsKey.ProbeAssemblyNames">
            <summary>
            Gets or sets the names of assemblies to search for dynamically loaded types - Applicable to both Client and Server.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.XmlWsKey.Options">
            <summary>
            Gets or sets the property bag of options available for the wsKey - applicable to both Client and Server.
            </summary>
            <remarks>
            The property bag can include both DevForce-defined and user-defined options.  
            <para>
            Currently there are no DevForce-defined options for the WsKey.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.XmlWsKey.Tag">
            <summary>
            A free-form field for developer's custom use.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IdeaBladeConfig.XmlWsKeyCollection">
            <summary>
            The collection of <see cref="T:IdeaBlade.Util.IdeaBladeConfig.XmlWsKey"/> elements.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo">
            <summary>
            Represents configuration information for a remote PersistenceServer.
            </summary>
            <remarks>Corresponds to the <b>remoting</b> element in IdeaBlade.ibconfig.</remarks>
            <example><code><![CDATA[
// Sample remoting element in IdeaBlade.ibconfig

<remoting>
    <remotePersistenceEnabled>true</remotePersistenceEnabled>
    <remoteBaseURL>http://myAppServer</remoteBaseURL>
    <serverPort>8002</serverPort>
    <serviceName>myRemoteServer/PersistenceServer.rem</serviceName>
    <serverDetectTimeoutMilliseconds>5000</serverDetectTimeoutMilliseconds>
</remoting>
]]>
	</code></example>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo.#ctor">
            <summary>
            Creates a new instance of this class.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo.ToString">
            <summary>
            String representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo.RemotePersistenceEnabled">
            <summary>
            Gets or sets whether or not a remote persistence server should be enabled - Applicable to client only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo.CommunicationsTechnology">
            <summary>
            Gets or sets the communication technology used.
            </summary>
            <remarks>
            This setting determines a) how the client application communicates with the
            Business Object Server, and b) how the Trace Publisher communicates with subscribers.
            Currently, you may choose between .NET Remoting, and Windows Communication Foundation (WCF).
            If you choose WCF you must have the .NET 3.0 assemblies installed.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo.RemoteBaseUrl">
            <summary>
            Gets or sets the URL where the remote server is located - Applicable to client only if using .NET Remoting, 
            applicable to both client and server if using WCF.
            </summary>
            <remarks>
            <![CDATA[
            The endpoint address is formed as follows: <RemoteBaseUrl>:<ServerPort>/<ServiceName>.
            ]]>
            <para>
            If using <see cref="F:IdeaBlade.Util.CommunicationsTechnology.Wcf"/> and an app.config is not used,
            the protocol scheme portion of the <b>RemoteBaseUrl</b> will be used to set the 
            transport binding.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo.ServerPort">
            <summary>
            Gets or sets the server port that is listening for client requests. 
            </summary>
            <remarks>
            This value must be the same for both Client and Server configurations.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo.ServiceName">
            <summary>
            Gets or sets the name of the service on the remote server. 
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo.ServerDetectTimeoutMilliseconds">
            <summary>
            Gets or sets the number of milliseconds to wait while detecting the existence of the remote server.  
            </summary>
            <remarks>
            0 indicates the .NET default. A negative number suppresses the ping attempt.
            Default is -1.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo.ProxyName">
            <summary>
            Gets or sets the proxy name that the client makes requests through. 
            </summary>
            <remarks>
            This value must be set on the client if the client is behind a proxy server.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo.ProxyPort">
            <summary>
            Gets or sets the proxy port that the client makes requests through. 
            </summary>
            <remarks>
            This value must be set on the client if the client is behind a proxy server.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.RemotingInfo.SessionEncryptionKey">
            <summary>
            Gets or sets the encryption key used to encrypt and decrypt the <see cref="T:IdeaBlade.Persistence.SessionBundle"/> passed
            between a client and PersistenceServer.
            </summary>
            <remarks>
            This <b>SessionEncryptionKey</b>key is only needed when using a remote PersistenceServer.
            The encryption key must be the same for all PersistenceServers 
            hosting the same client application. 
            <para>
            A default encryption key is used if not supplied in the IdeaBlade.ibconfig.
            </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.Util.IdeaBladeConfig.NotificationServiceInfo">
            <summary>
            Represents configuration information for a remote PersistenceServer.
            </summary>
            <remarks>Corresponds to the <b>remoting</b> element in IdeaBlade.ibconfig.</remarks>
            <!-- No matching elements were found for the following include tag --><include file="IdeaBladeConfig.Examples.xml" path="//Class[@name=&quot;IbConfig&quot;]/method[@name=&quot;RemotingInfo&quot;]/*"/>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.NotificationServiceInfo.#ctor">
            <summary>
            Creates a new instance of this class.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.NotificationServiceInfo.ToString">
            <summary>
            String representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.NotificationServiceInfo.Enabled">
            <summary>
            Gets or sets whether the NotificationService should be used.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.NotificationServiceInfo.ServerPort">
            <summary>
            Gets or sets the server port used by the NotificationService.
            </summary>
            <remarks>
            This value must be the same for both Client and Server configurations.  The port number
            may be the same as is used by the PersistenceService.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.NotificationServiceInfo.ClientPort">
            <summary>
            Gets or sets the client port used with the NotificationService when using http.
            </summary>
            <remarks>
            When using an http channel to the NotificationService a client port number must be specified.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Util.IdeaBladeConfig.WebServiceInfo">
            <summary>
            Represents configuration information for a non-IIS web service.
            </summary>
            <remarks>Corresponds to the <b>webService</b> element in IdeaBlade.ibconfig.
            <para>
            Web Service information is needed on the server side only, and only if hosting
            a web service in the WebServerConsole or WsServerService.
            Non-IIS web service hosting is available only on computers running the Windows XP SP2 or
            Windows Server 2003 operating systems.
            </para>
            </remarks>
            <example><code><![CDATA[
// Sample webService element in IdeaBlade.ibconfig
	
<webService>
    <remoteBaseURL>http://localhost</remoteBaseURL>
    <serverPort>8081</serverPort>
    <serviceName>IdeaBladeWebService</serviceName>
    <authentication>Anonymous</authentication>
</webService>
]]>
	</code></example>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.WebServiceInfo.#ctor">
            <summary>
            Creates a new instance of this class.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.WebServiceInfo.ToString">
            <summary>
            String representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.WebServiceInfo.WebServiceEnabled">
            <summary>
            Gets a flag indicating if web service information has been provided.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.WebServiceInfo.RemoteBaseUrl">
            <summary>
            Gets or sets the protocol scheme and host for the web service.
            </summary>
            <remarks>
            If not specified, will default to "http://*".  Combined with the ServerPort
            and ServiceName to determine the full URI (%RemoteBaseURL%:%ServerPort%/%ServiceName%/).
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.WebServiceInfo.ServerPort">
            <summary>
            Gets or sets the port used by the web service.
            </summary>
            <remarks>
            Do not use port 80 if IIS or another web server is already using this port.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.WebServiceInfo.ServiceName">
            <summary>
            Gets or sets the name of the virtual directory for the web service.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.WebServiceInfo.Authentication">
            <summary>
            Gets or sets the authentication scheme(s) used by the web service.
            </summary>
            <remarks>
            Defaults to anonymous.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Util.IdeaBladeConfig.AppUpdaterInfo">
            <summary>
            Represents configuration information for automatic application update.
            </summary>
            <remarks>
            Corresponds to the <b>appUpdater</b> element in IdeaBlade.ibconfig.  If using this feature,
            all elements are required.
            <para>
            The Automatic Application Update feature has been deprecated in favor of Microsoft ClickOnce. 
            </para>
            </remarks>    
            <example><code><![CDATA[
// Sample appUpdater element in IdeaBlade.ibconfig

<appUpdater>
    <updateURL>http://localhost/myAppUpdates</updateURL>
    <versionFileName>myAppVersion.xml</versionFileName>
    <appLauncher>AppLauncher.exe</appLauncher>
</appUpdater>
]]>
	</code></example>
        </member>
        <member name="M:IdeaBlade.Util.IdeaBladeConfig.AppUpdaterInfo.ToString">
            <summary>
            String representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.AppUpdaterInfo.UpdateUrl">
            <summary>
            Gets or sets the URL where application updates are hosted.
            </summary>
            <remarks>
            The application update directory must be hosted in IIS and use port 80.  WebDAV
            is also required.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.AppUpdaterInfo.VersionFileName">
            <summary>
            Gets or sets the name of the file containing versioning information.
            </summary>
            <remarks>
            See the example for the required file format.
            </remarks>
            <example><code><![CDATA[
// Sample version file contents.  The versionFileName is user-defined.

// Set "updating=" to "true" when you are updating the web site files 
// to keep client applications from updating during this period.
// 
// Set "value=" to your version number.  If the version value exceeds
// the version value on the client, an automatic update process is started.

<?xml version="1.0" encoding="utf-8" ?> 
<version updating="false" value="1.0.0.1" /> 
    ]]>
	</code></example>
        </member>
        <member name="P:IdeaBlade.Util.IdeaBladeConfig.AppUpdaterInfo.AppLauncher">
            <summary>
            Gets or sets the name of the process performing the auto-update.
            </summary>
            <remarks>
            Unless you've customized the update process, this should be set to "AppLauncher.exe".
            This executable is provided with the DevForce installation.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Util.WeakEventHandler`2">
            <summary>
            Event handler to be used in those cases where a publisher should not hold references to its subscribers, 
            as implicitly occurs in the regular event model.
            </summary>
            <remarks>
            In the .NET event model, when subscribing to an event as follows:
            <code>Publisher.Event += new xxxEventHandler(subscriberMethod)</code>     
            the publisher will have a reference to the subscriber.
            When using the <b>WeakEventHandler</b> as follows:
            <code>
            Publisher.Event += new WeakEventHandler&lt;EventHandlerType, xxxEventArgs&gt; (subscriberMethod, publisherEventName);
            </code>
            we ensure that if the publisher is null it will not be stopped from being garbage collected 
            because subscribers still hold a reference to it.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.WeakEventHandler`2.#ctor(`0,System.String[])">
            <summary>
            Initializes a new instance of the WeakEventHandler class.
            </summary>
            <param name="pSubscriberDelegate">subscriber delegate</param>
            <param name="pPublisherEventNames">publisher event names</param>
        </member>
        <member name="M:IdeaBlade.Util.WeakEventHandler`2.op_Implicit(IdeaBlade.Util.WeakEventHandler{`0,`1})~`0">
            <summary>
            Implicitly cast a WeakEventHander into the strongly typed event handler.
            </summary>
            <param name="pWeakEventHandler"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.WeakEventHandler`2.Handler(System.Object,`1)">
            <summary>
            Invoke the target event handler.
            </summary>
            <param name="pPublisher"></param>
            <param name="pArgs"></param>
        </member>
        <member name="T:IdeaBlade.Util.TraceMessageXmlFormatter">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.TraceMessageXmlFormatter.MessageElementName">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.TraceMessageXmlFormatter.IdAttributeName">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.TraceMessageXmlFormatter.UserNameAttibuteName">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.TraceMessageXmlFormatter.TimestampAttributeName">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.TraceMessageXmlFormatter.SourceAttributeName">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceMessageXmlFormatter.ConstructMessage(IdeaBlade.Util.TraceMessage)">
            <summary>
            
            </summary>
            <param name="pTraceMessage"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.DebugFns">
            <summary>
            A collection of static (Shared in Visual Basic) methods used to provide code assertions, tracing and logging
            functionality for debug builds.
            <seealso cref="T:IdeaBlade.Util.TraceFns"/>
            </summary>
            <remarks>
            <para>
            Both <b>DebugFns</b> and <see cref="T:IdeaBlade.Util.TraceFns"/> provide
            identical behavior except that calls to methods in this class may be suppressed by
            setting the conditional DEBUG flag to false. In Visual Studio .NET projects, 
            creating a debug build enables DEBUG.  DEBUG is normally off in a release build.
            </para>
            <para>Output is to the <see cref="P:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo.LogFile"/>
            specified in the <b>IdeaBlade.ibconfig</b> file, and can also be viewed using the 
            <b>Trace Viewer</b> utility, or any class implementing <see cref="T:IdeaBlade.Util.ITraceSubscriber"/>.
            </para>
            <para>The <see cref="P:IdeaBlade.Util.TraceFns.Filters"/> property can be set using the
            <see cref="P:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo.RejectFilters"/> and 
            <see cref="P:IdeaBlade.Util.IdeaBladeConfig.LoggingInfo.AcceptFilters"/> nodes in the IdeaBlade.ibconfig
            file to enable and disable logging from specific namespaces.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.DebugFns.Assert(System.Boolean)">
            <summary>
            See <see cref="M:IdeaBlade.Util.TraceFns.Assert(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.DebugFns.Assert(System.Boolean,System.String)">
            <summary>
            See <see cref="M:IdeaBlade.Util.TraceFns.Assert(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.DebugFns.Close">
            <summary>
            See <see cref="M:IdeaBlade.Util.TraceFns.Close"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.DebugFns.Fail(System.String)">
            <summary>
            See <see cref="M:IdeaBlade.Util.TraceFns.Fail(System.String)"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.DebugFns.Flush">
            <summary>
            See <see cref="M:IdeaBlade.Util.TraceFns.Flush"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.DebugFns.WriteLine(System.Object)">
            <summary>
            See <see cref="M:IdeaBlade.Util.TraceFns.WriteLine(System.Object)"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.DebugFns.WriteLineIf(System.Boolean,System.Object)">
            <summary>
            See <see cref="M:IdeaBlade.Util.TraceFns.WriteLineIf(System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.DebugFns.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.GrammarLibrary">
            <summary>
              The GrammarLibrary implements methods that are used to format
              grammatically correct messages through GrammarString.Format().
              Rules exist for pluralization, possessives, and articles.  This class is
              intended for use with the GrammarString.  Unless you are extending the
              functionality of GrammarString.Format, you should use the class
              EnglishGrammarRules instead.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.GrammarLibrary.#ctor">
            <summary>
              Constructs a GrammarLibrary.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.GrammarLibrary.Plural(System.String[])">
            <summary>
              Returns the plural of a subject.
              Handles most cases of subjects ending in "s", "y", "ex", and "ix".
              This method is reflectively called from GrammarString.Format() when the
              format string contains the syntax: "{plural(object, quantity)}".
              For example, the statement
              GrammarString.Format("You have {1} new {plural({0},{1})}", "message", 3)
              results in the string "You have 3 new messages".
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.GrammarLibrary.Possessive(System.String[])">
            <summary>
              Returns the possessive of a subject.
              This method is reflectively called from GrammarString.Format() when the
              format string contains the syntax: "{possessive(subject)}".
              For example, the statement
              GrammarString.Format("{possessive({0})} diner", "Joe")
              results in the string "Joe's diner".
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.GrammarLibrary.Article(System.String[])">
            <summary>
              Returns the proper article for a subject.  e.g. "a" or "an".
              This method is reflectively called from GrammarString.Format() when the
              format string contains the syntax: "{article(subject)}".
              For example, the statement
              GrammarString.Format("You have {article({0})} {0}", "apple")
              results in the string "You have an apple".
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.GrammarLibrary.CheckParameters(System.String[],System.Int32,System.String)">
            <summary>
              Checks if the correct number of parameters was supplied, and throws an
              exception with the usage if incorrect.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.GrammarLibrary.IsPlural(System.String)">
            <summary>
              Parses the number and returns whether or not the number is plural.
            <note>
              Only 1 is considered singular.  0 and negative numbers are considered plural.
            </note>
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.BaseParameter">
            <summary>
            Represents the base class for parameters to an RdbQuery or WsQuery.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.BaseParameter.#ctor">
            <summary>
            Protected constructor.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.BaseParameter.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.BaseParameter.ParameterName">
            <summary>
            Gets or sets the parameter name.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.BaseParameter.DbType">
            <summary>
            Gets or sets the <see cref="P:IdeaBlade.Util.BaseParameter.DbType"/> of the parameter. 
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.BaseParameter.IsNullable">
            <summary>
            Gets or sets whether the parameter accepts null values.  
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.BaseParameter.Direction">
            <summary>
            Gets or sets the <see cref="T:System.Data.ParameterDirection"/>.  
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.BaseParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.BaseParameter.SourceColumn">
            <summary>
            Gets or sets the name of the source column mapping.  
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.BaseParameter.SourceVersion">
            <summary>
            Gets or sets the <see cref="T:System.Data.DataRowVersion"/> to use when loading the <see cref="P:IdeaBlade.Util.BaseParameter.Value"/>.  
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.AdaptedPropertyDescriptor">
            <summary>
            A <see cref="T:System.ComponentModel.PropertyDescriptor"/> used to extend an object's intrinsic properties. 
            </summary>
            <remarks>
            <para>
            The <b>AdaptedPropertyDescriptor</b> enables data binding to an object's nested properties.
            It may also be used to create dynamic properties.  
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.#ctor(System.Type)">
            <summary>
            Returns a "Self" PropertyDescriptor.
            </summary>
            <param name="pComponentType"></param>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.#ctor(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="pComponentType"></param>
            <param name="pPropertyPath"></param>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.#ctor(IdeaBlade.Util.AdaptedPropertyDescriptor,System.String)">
            <summary>
            
            </summary>
            <param name="pParentDescriptor"></param>
            <param name="pPropertyPath"></param>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.#ctor(System.String,System.Type,System.Type,IdeaBlade.Util.GetterDelegate,IdeaBlade.Util.SetterDelegate)">
            <summary>
            Initializes a new instance of the AdaptedPropertyDescriptor class.
            </summary>
            <param name="pPropertyName">The name of the property being described</param>
            <param name="pComponentType">The type of object to which the property is bound.</param>
            <param name="pPropertyType">The type of the property value</param>
            <param name="pGetterDelegate">The delegate that retrieves the property value. No getter if null.</param>
            <param name="pSetterDelegate">The delegate that can set the property value. No setter if null.</param>
            <remarks>
            <para>
            Do not confuse the ComponentType with the PropertyType. 
            If the bound object is "Order" and the PropertyName is "Id",
            "Order" is the ComponentType and "Int64" is the PropertyType.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.#ctor(System.String,System.Type,System.Type,IdeaBlade.Util.GetterDelegate,IdeaBlade.Util.SetterDelegate,System.Attribute[])">
            <summary>
            Initializes a new instance of the AdaptedPropertyDescriptor class.
            </summary>
            <param name="pPropertyName">The name of the property in the new PropertyDescriptor.</param>
            <param name="pComponentType">The type of object to which the property is bound.</param>
            <param name="pPropertyType">The type of the property value</param>
            <param name="pGetterDelegate">The delegate that retrieves the property value. No getter if null.</param>
            <param name="pSetterDelegate">The delegate that can set the property value. No setter if null.</param>
            <param name="pAttributes">An array of additional attributes that describe this property. May be null.</param>
            <remarks>
            <para>
            Do not confuse the ComponentType with the PropertyType. 
            If the bound object is "Order" and the PropertyName is "Id",
            "Order" is the ComponentType and "Int64" is the PropertyType.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.#ctor(System.String,System.Type,IdeaBlade.Util.IPropertyAdapter,System.Attribute[])">
            <summary>
            Initializes a new instance of the AdaptedPropertyDescriptor class.
            </summary>
            <param name="pPropertyName">The name of the property being described</param>
            <param name="pComponentType">The type of object to which the property is bound.</param>
            <param name="pPropertyAdapter">A property adapter that provides mechanisms to get 
            and set the value of this property</param>
            <param name="pAttributes">An array of any additional attributes that describe this property</param>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the AdaptedPropertyDescriptor class.
            </summary>
            <param name="pPropertyName">The name of the property being described</param>
            <param name="pComponentType">The type of object to which the property is bound.</param>
            <param name="pPropertyPath">A '.' delimited object hierarchy path 
            leading from the pComponentType that describes this
            property, e.g. "Customer.CompanyName" where the pComponentType is the Order entity type.</param>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.#ctor(System.String,System.Type,System.ComponentModel.ITypedList,System.String)">
            <summary>
            Initializes a new instance of the AdaptedPropertyDescriptor class.
            </summary>
            <param name="pPropertyName">The name of the property being described</param>
            <param name="pComponentType">The type of object to which the property is bound.</param>
            <param name="pTypedList"></param> 
            <param name="pPropertyPath">A '.' delimited object hierarchy path 
            leading from the pComponentType that describes this
            property, e.g. "Customer.CompanyName" where the pComponentType is the Order entity type.</param>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.Get(System.String)">
            <summary>
            Returns a child PropertyDescriptor on this descriptor by property name
            </summary>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.Get(System.Type)">
            <summary>
            
            </summary>
            <param name="pComponentType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.Get(System.Type,System.String)">
            <summary>
            Returns a property descriptor for the specified component type and property path
            </summary>
            <param name="pComponentType"></param>
            <param name="pPropertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            See <see cref="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            See <see cref="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            See <see cref="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.GetValue(System.Object)">
            <summary>
            See <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            See <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.SetDisplayName(System.String)">
            <summary>
            Set the display name for the PropertyDescriptor.
            </summary>
            <param name="pDisplayName"></param>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.SetDescription(System.String)">
            <summary>
            Sets the Description for the PropertyDescriptor
            </summary>
            <param name="pDescription"></param>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.GetBindingName(System.String)">
            <summary>
            
            </summary>
            <param name="pPropertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.AdaptedPropertyDescriptor.GetPropertyPath(IdeaBlade.Util.AdaptedPropertyDescriptor,System.String)">
            <summary>
            
            </summary>
            <param name="pParentDescriptor"></param>
            <param name="pPropertyPath"></param>
            <returns></returns>
        </member>
        <member name="F:IdeaBlade.Util.AdaptedPropertyDescriptor.mComponentType">
            <summary>
            The private member field holding the type of object to which the property is bound.
            See <see cref="P:System.ComponentModel.PropertyDescriptor.ComponentType"/>
            </summary>
            <remarks>
            If the bound object is "Order" and the PropertyName is "Id",
            "Order" is the ComponentType and "Int64" is the PropertyType.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.AdaptedPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of object to which the property is bound.
            </summary>
            <seealso cref="P:System.ComponentModel.PropertyDescriptor.ComponentType"/>
            <remarks>
            If the bound object is "Order" and the PropertyName is "Id",
            "Order" is the ComponentType and "Int64" is the PropertyType.
            </remarks>
        </member>
        <member name="P:IdeaBlade.Util.AdaptedPropertyDescriptor.PropertyAdapter">
            <summary>
            Gets or sets the PropertyAdapter used internally to access the property
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AdaptedPropertyDescriptor.PropertyPath">
            <summary>
            Returns the PropertyPath for this descriptor
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AdaptedPropertyDescriptor.DisplayName">
            <summary>
            Get the DisplayName.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AdaptedPropertyDescriptor.Description">
            <summary>
            Get the DisplayName.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AdaptedPropertyDescriptor.IsReadOnly">
            <summary>
            See <see cref="P:System.ComponentModel.PropertyDescriptor.IsReadOnly"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.AdaptedPropertyDescriptor.PropertyType">
            <summary>
            The type of the property value.
            </summary>
            <seealso cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/>
            <remarks>
            If the bound object is "Order" and the PropertyName is "Id",
            "Order" is the ComponentType and "Int64" is the PropertyType.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Util.PropertyDescriptorDecorator">
            <summary>
            Creates a clone of an existing property descriptor with a new name
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorDecorator.#ctor(System.String,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Constructs a clone of an existing property descriptor with a new name
            </summary>
            <param name="pName"></param>
            <param name="pDescriptor"></param>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorDecorator.CanResetValue(System.Object)">
            <summary>
            See <see cref="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)"/>
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorDecorator.ResetValue(System.Object)">
            <summary>
            See <see cref="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)"/>
            </summary>
            <param name="pObject"></param>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorDecorator.ShouldSerializeValue(System.Object)">
            <summary>
            See <see cref="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)"/>
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorDecorator.GetValue(System.Object)">
            <summary>
            See <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/>
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.PropertyDescriptorDecorator.SetValue(System.Object,System.Object)">
            <summary>
            See <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/>
            </summary>
            <param name="pObject"></param>
            <param name="pValue"></param>
        </member>
        <member name="P:IdeaBlade.Util.PropertyDescriptorDecorator.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.PropertyDescriptorDecorator.IsReadOnly">
            <summary>
            See <see cref="P:System.ComponentModel.PropertyDescriptor.IsReadOnly"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.PropertyDescriptorDecorator.ComponentType">
            <summary>
            See <see cref="P:System.ComponentModel.PropertyDescriptor.ComponentType"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.PropertyDescriptorDecorator.PropertyType">
            <summary>
            See <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.PropertyAdapterFactory">
            <summary>
            A collection of static methods that are all involved with creating <see cref="T:IdeaBlade.Util.IPropertyAdapter"/>
            instances or <see cref="T:IdeaBlade.Util.GetterDelegate"/>'s or <see cref="T:IdeaBlade.Util.SetterDelegate"/>s
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.PropertyAdapterFactory.GetAdapter(System.Type,IdeaBlade.Util.GetterDelegate,IdeaBlade.Util.SetterDelegate)">
            <summary>
            Creates a property adapter using a specified getter and setter delegate
            </summary>
            <param name="pPropertyType">The datatype of the property associated with the PropertyAdapter
            begin created </param>
            <param name="pGetterDelegate">A getter delegate</param>
            <param name="pSetterDelegate">A setter delegate</param>
            <returns>A new property adapter</returns>
        </member>
        <member name="M:IdeaBlade.Util.PropertyAdapterFactory.GetAdapter(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Creates a property adapter from a PropertyDescriptor.
            </summary>
            <param name="pDescriptor">The PropertyDescriptor</param>
            <returns>A new property adapter</returns>
        </member>
        <member name="M:IdeaBlade.Util.PropertyAdapterFactory.GetAdapter(System.Type,System.String)">
            <summary>
            Returns a property adapter given a parent type and a property path
            </summary>
            <param name="pParentType">The type of the object on which the returned property adapter
            will be defined</param>
            <param name="pPropertyPath">A '.' delimited object hierarchy path that describes this
            property adapter. For example a parent type of typeof(Person) might have a property path of 
            "Father.Address.City"</param>
            <returns>A property adapter</returns>
        </member>
        <member name="M:IdeaBlade.Util.PropertyAdapterFactory.GetAdapter(System.ComponentModel.ITypedList,System.String)">
            <summary>
            Returns a property adapter given a parent type and a property path
            </summary>
            <param name="pTypedList">An ITypedList containing a property descriptor collection that must contain 
            a property descriptor with the same name as the first named property in the property path</param>
            <param name="pPropertyPath">A '.' delimited object hierarchy path that describes this
            property adapter. For example a parent type of typeof(Person) might have a property path of 
            "Father.Address.City"</param>
            <returns>A property adapter</returns>
        </member>
        <member name="M:IdeaBlade.Util.PropertyAdapterFactory.GetAdapter(System.Type,System.String,System.Boolean)">
            <summary>
            Returns a property adapter given a parent type and a property path
            </summary>
            <param name="pParentType">The type of the object on which the returned property adapter
            will be defined</param>
            <param name="pPropertyPath">A '.' delimited object hierarchy path that describes this
            property adapter. For example a parent type of typeof(Person) might have a property path of 
            "Father.Address.City"</param>
            <returns>A property adapter</returns>
            <param name="pShouldEmitAdapter">Determines whether the resulting property adapter
            should be created via reflection or generated by emitting IL code.</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.PropertyAdapterFactory.GetGetterDelegate(System.Type,System.String)">
            <summary>
            Create a new GetterDelegate for a given property path.
            This should not be a commonly needed method.
            </summary>
            <param name="pParentType"></param>
            <param name="pPropertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.PropertyAdapterFactory.GetSetterDelegate(System.Type,System.String)">
            <summary>
            Create a new SetterDelegate for a given property path.
            This should not be a commonly needed method.
            </summary>
            <param name="pParentType"></param>
            <param name="pPropertyPath"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.RaiseListChangedEventsSuppresser`1">
            <summary>
            For internal use only  
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.RaiseListChangedEventsSuppresser`1.#ctor(System.ComponentModel.BindingList{`0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.RaiseListChangedEventsSuppresser`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.SelfPropertyAdapter">
            <summary>
            A read-only <see cref="T:IdeaBlade.Util.IPropertyAdapter"/> wrapper for a System.Type
            whose getter returns a reference to an instance of the type
            rather than the value of any property of that instance.
            </summary>
            <remarks>
            <para>
            We use this wrapper where we need a property of an object that returns the object itself
            rather than any property of it.
            </para>
            <para>
            For example, in forms we often bind an entity's relation property to a list of related entities
            displayed in a ComboBox as when the Order.Shipper is bound to a ComboBox of Shipper objects.
            </para>
            <para>
            The text of the ComboBox may display a string property of the Shipper such as the Shipper Name.
            But when the user selects a Shipper from the list, 
            the Order.Shipper property must be set with the selected Shipper object;
            The Order.Shipper property is defined to get and be set with a reference to a whole shipper object,
            not some property of Shipper such as its Id or Description.
            </para>
            <para>
            The ValueMember property of the Shipper ComboBox must be set to a property which returns a Shipper object.
            This class provides the means to construct such a property.
            </para>
            <para>
            The name of that property is determined by the <see cref="T:IdeaBlade.Util.PropertyDescriptorFns"/>
            string constant, SelfPropertyName.
            </para>
            <para>That name is "__Self" in the current implementation but it may change in future versions.
            You must not make your code dependent upon this particular format. Refer to the string constant instead.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.SelfPropertyAdapter.#ctor(System.Type)">
            <summary>
            Construct an IPropertyAdapter around a Type.
            </summary>
            <param name="pSelfPropertyType">A type for which a self-referencing property is needed</param>
        </member>
        <member name="M:IdeaBlade.Util.SelfPropertyAdapter.GetValue(System.Object)">
            <summary>
            Get the object itself
            See <see cref="M:IdeaBlade.Util.IPropertyAdapter.GetValue(System.Object)"/>
            </summary>
            <remarks>
            If name of the PropertyDescriptor built from this adapter is "__Self",
            then "aThing.__Self" returns "aThing".
            </remarks>
        </member>
        <member name="M:IdeaBlade.Util.SelfPropertyAdapter.SetValue(System.Object,System.Object)">
            <summary>
            There is no Setter for this property.
            An attempt to set it is ignored.
            See <see cref="M:IdeaBlade.Util.IPropertyAdapter.SetValue(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.SelfPropertyAdapter.GetPropertyType">
            <summary>
            Get the type of object returned by this PropertyAdapter.
            See <see cref="M:IdeaBlade.Util.IPropertyAdapter.GetPropertyType"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.SelfPropertyAdapter.ReadOnly">
            <summary>
            There is no Setter for this property.
            See <see cref="P:IdeaBlade.Util.IPropertyAdapter.ReadOnly"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.AfterSetValueAttribute">
            <summary>
            An <see cref="T:System.Attribute"/> used to to mark up auto-generated
            business objects. This attribute is used to indicate whether a 
            generated property setter calls the AfterSetValue method.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.AfterSetValueAttribute.#ctor">
            <summary>Initializes a new instance of the class.</summary>
        </member>
        <member name="T:IdeaBlade.Util.BeforeSetValueAttribute">
            <summary>
            An <see cref="T:System.Attribute"/> used to to mark up auto-generated
            business objects. This attribute is used to indicate whether a 
            generated property setter calls the BeforeSetValue method.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.BeforeSetValueAttribute.#ctor">
            <summary>Initializes a new instance of the class.</summary>
        </member>
        <member name="T:IdeaBlade.Util.TraceMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceMessage.#ctor(System.Diagnostics.StackFrame,System.String)">
            <summary>
            
            </summary>
            <param name="pStackFrame"></param>
            <param name="pMessage"></param>
        </member>
        <member name="M:IdeaBlade.Util.TraceMessage.#ctor(System.Diagnostics.StackFrame,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pStackFrame"></param>
            <param name="pMessage"></param>
            <param name="pGenerateMessageId"></param>
        </member>
        <member name="M:IdeaBlade.Util.TraceMessage.GetFullyQualifiedMethodName(System.Reflection.MemberInfo)">
            <summary>
            
            </summary>
            <param name="pMemberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.TraceMessage.GetUserName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Util.TraceMessage.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TraceMessage.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TraceMessage.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TraceMessage.Source">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TraceMessage.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.TraceFileXmlLogger">
            <summary>
            Used internally by the DevForce framework to log tracing messages to a file.
            </summary>
            <remarks>
            The <b>TraceFileXmlLogger</b> is used internally to log messages 
            created by the <see cref="T:IdeaBlade.Util.TraceFns"/> and <see cref="T:IdeaBlade.Util.DebugFns"/> classes to the log file
            indicated in <b>IdeaBlade.ibconfig</b>.
            </remarks>
        </member>
        <member name="F:IdeaBlade.Util.TraceFileXmlLogger.DocumentNodeName">
            <summary>
            Root node name used in the output document.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceFileXmlLogger.#ctor(System.String,System.Boolean)">
            <summary>
            Create a TraceFileXmlLogger subscribed to the default <see cref="T:IdeaBlade.Util.TracePublisher"/> address,
            writing to the specified output file and using the archive flag indicated.
            </summary>
            <param name="pLogFileName"></param>
            <param name="pArchiveLogs"></param>
        </member>
        <member name="M:IdeaBlade.Util.TraceFileXmlLogger.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Create a TraceFileXmlLogger subscribed to the specified <see cref="T:IdeaBlade.Util.TracePublisher"/> address,
            writing to the specified output file and using the archive flag indicated.
            </summary>
            <param name="pTracePublisherURL"></param>
            <param name="pLogFileName"></param>
            <param name="pArchiveLogs"></param>
        </member>
        <member name="M:IdeaBlade.Util.TraceFileXmlLogger.#ctor(IdeaBlade.Util.TracePublisher,System.String,System.Boolean)">
            <summary>
            Create a TraceFileXmlLogger subscribed to the specified <see cref="T:IdeaBlade.Util.ITracePublisher"/>, 
            writing to the specified output file and using the archive flag indicated.
            </summary>
            <param name="pTracePublisher"></param>
            <param name="pLogFileName"></param>
            <param name="pArchiveLogs"></param>
        </member>
        <member name="M:IdeaBlade.Util.TraceFileXmlLogger.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.TraceFileXmlLogger.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="pDisposing"></param>
        </member>
        <member name="M:IdeaBlade.Util.TraceFileXmlLogger.SetLogFile(System.String)">
            <summary>
            Specifies an additional log file to write to. 
            </summary>
            <param name="pFileName">
            The name of the file to write to.
            This may contain an absolute or relative path.
            </param>
        </member>
        <member name="P:IdeaBlade.Util.TraceFileXmlLogger.LogFileName">
            <summary>
            Gets the output log file name.
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.TraceFileXmlLogger.ArchiveLogs">
            <summary>
            Gets whether to archive logs. i.e. make a backup copy of the old log before overwriting it.
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Semaphore">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.Turnstile">
            <summary>
              
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Turnstile.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Turnstile.Handle">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Turnstile.InUse">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Util.Turnstile.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.Turnstile.TurnstileHandle.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.ReflectionFns">
            <summary>
            A collection of static utility methods to assist in using the .NET reflection API
            </summary>
        </member>
        <member name="F:IdeaBlade.Util.ReflectionFns.IdeaBladeAssemblyExtn">
            <summary>
            Version, culture and PublicKeyToken for all IdeaBlade assemblies - should be concatenated
            to the end of a partially qualified assembly name to fully qualify it
            See GetIdeaBladeType
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetTypesImplementing(System.Type,System.Reflection.Assembly)">
            <summary>
            Returns a list of all of the types in an assembly that implement a specific
            interface (or extend a specific class)
            </summary>
            <param name="pType"></param>
            <param name="pAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetTypesImplementing(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Returns a list of all of the types in an assembly that implement a specific
            interface (or extend a specific class)
            </summary>
            <param name="pType"></param>
            <param name="pAssemblies"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetTypesImplementing(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a list of all of the types in an assembly that implement a specific
            interface (or extend a specific class)
            </summary>
            <param name="pAssemblyNames"></param>
            <param name="pType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetTypesImplementing(System.Type,System.Collections.Generic.IEnumerable{System.String},IdeaBlade.Util.Cardinality,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pType"></param>
            <param name="pProbeAssemblyNames"></param>
            <param name="pExpectedCardinality"></param>
            <param name="pCheckUserAssembliesIfNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetTypeImplementing(System.Type,System.Collections.Generic.IEnumerable{System.String},IdeaBlade.Util.Cardinality,System.Boolean)">
            <summary>
            Returns the fully-qualified type implementing a given interface.
            </summary>
            <param name="pType"></param>
            <param name="pProbeAssemblyNames"></param>
            <param name="pExpectedCardinality"></param>
            <param name="pCheckUserAssembliesIfNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetInstanceImplementing(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create an instance of a type that either extends or implements the specified type or interface. 
            The specified probe assemblies are searched.
            </summary>
            <param name="pType">Type of instance to probe for and create.</param>
            <param name="pProbeAssemblyNames">probe assembly names</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetInstanceImplementing``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create an instance of a type that either extends or implements the specified type or interface. 
            The specified probe assemblies are searched.
            </summary>
            <param name="pProbeAssemblyNames">probe assembly names</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetInstancesImplementing(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a list of instances of those types that either extend or implement the specified type or interface. 
            The specified probe assemblies are searched.
            </summary>
            <param name="pType">Type of the p.</param>
            <param name="pProbeAssemblyNames">probe assembly names</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetBaseTypes(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="pType"></param>
            <param name="pStopType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetUserAssemblies(System.Boolean)">
            <summary>
            Returns a list of all currently loaded assemblies that are not Microsoft or Objectware/IdeaBlade
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetLatestType(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the latest version of a type given its name; optionally throws an error 
            if no matching type can be found.
            </summary>
            <param name="pTypeName">A type name to locate</param>
            <param name="pThrowOnError">Whether to throw an error if a matching type cannot be found</param>
            <param name="pIgnoreCase">Whether to ignore case when attempting a match</param>
            <returns>The latest version of a type with the specified name</returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetAttribute(System.Reflection.ICustomAttributeProvider,System.Type)">
            <summary>
            Returns the first attribute of the given type on an object or
            null if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns the first attribute of the given type on an object or
            null if not found.
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetEmbeddedFile(System.Reflection.Assembly,System.String)">
            <summary>
            Reads the stream associated with the given embedded file and returns the stream as a string.
            </summary>
            <param name="pAssembly">The assembly where the embedded file is stored</param>
            <param name="pEmbeddedFileName">The unqualified name of the embedded file</param>
            <returns>The embedded file as a string</returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetManifestItem(System.Type,System.String)">
            <summary>
            Returns a manifest resource stream associated with an assembly and an item name
            </summary>
            <param name="pType">Any type in the same assembly as the desired embedded stream</param>
            <param name="pItemName">The unqualified name of the stream</param>
            <returns>A resource stream</returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetManifestItem(System.Reflection.Assembly,System.String)">
            <summary>
            Returns a manifest resource stream associated with an assembly and an item name
            </summary>
            <param name="pAssembly">The assembly where the embedded stream is stored</param>
            <param name="pItemName">The unqualified name of the stream</param>
            <returns>A resource stream</returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.CopyFromAssembly(System.Reflection.Assembly,System.String,System.String,System.Boolean)">
            <summary>
            Copies an embedded file from a specified assembly to a new location.
            </summary>
            <param name="pSourceAssembly">The assembly where the source file is embedded</param>
            <param name="pSourceItemName">The unqualified name of the embedded file</param>
            <param name="pDestFileName">The filename to write to.  May include directory information</param>
            <param name="pOverwrite">Whether to overwrite the destination file if it already exists</param>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetListItemType(System.Object)">
            <summary>
            Returns the data type of the items in the specified data source.
            This is very similar to the ListBindingHelper.GetListItemType but does not depend on 
            System.Windows.WinForms.
            </summary>
            <remarks>
            If the specified data source is not a list or array, 
            the type returned will be that of the data source itself. 
            </remarks>
            <param name="pValue">The data source to be examined for type information.</param>
            <returns>The Type of the items contained in the data source.</returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetBindingSourceItemType(System.Windows.Forms.BindingSource)">
            <summary>
            
            </summary>
            <param name="pBindingSource"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetProperty(System.Type,System.String)">
            <summary>
            Should be used in place of Type.GetProperty(propertyName) because
            of problems with AmbiguousMatchException. When multiple public properties
            exist with the same name ( can be caused by marking a property with 'new'
            in derived class) this method returns the most derived class that implements
            the property
            </summary>
            <param name="pType"></param>
            <param name="pPropertyName"></param>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetPropertyDescriptor(System.Type,System.String)">
            <summary>
            Returns the named PropertyDescritpor for the Type.
            </summary>
            <param name="pType"></param>
            <param name="pPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetMaxTextLength(System.Type,System.String)">
            <summary>
            Returns the MaxTextLength value for the entity Type and PropertyName. 
            </summary>
            <remarks>
            <para>
            This method provides an easy access path to the MaxTextLength value 
            assigned to string properties for entities that are generated by the Object Mapper.
            </para>
            <para>
            In hybrid applications, e.g. EF with WinForms, if the MaxTextLengthAttribute is not
            found, it will attempt to load the Util.v4 assembly and locate it there.
            </para>
            </remarks>
            <param name="pEntityType"></param>
            <param name="pPropertyName"></param>
            <returns>The MaxTextLength for the property.  Returns -1 if no MaxTextLength exists.</returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetMaxTextLength(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns the MaxTextLength value for the given descriptor. 
            </summary>
            <remarks>
            This method is called by IdeaBlade.UI.TextConverter 
            and is meant for internal use only.
            </remarks>    
            <returns>
            The maximum text length for a property; or 0 if the descriptor 
            is not specified or if the attribute cannot be found.
            </returns>
        </member>
        <member name="M:IdeaBlade.Util.ReflectionFns.GetDelegate``1(System.String,System.String,System.Type[])">
            <summary>
            Returns a delegate of the indicated type.
            </summary>
            <typeparam name="T">Delegate type</typeparam>
            <param name="pTypeName">Assembly-qualified type name</param>
            <param name="pMethodName">Name of static method</param>
            <param name="pSignature">Optional method signature</param>
            <returns></returns>
            <remarks>
            <paramref name="pSignature"/> is required only if the <paramref name="pMethodName"/> is overloaded.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Util.IterSubList">
            <summary>
            Enumerate a collection, skipping some items at the beginning or end while enumerating
            
            Use: foreach (string s in new SubList(collection, 1, 2))
            enumerates collection, skipping 1 item at the start of the list and 2 items and the
            end of the list. 
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.IterSubList.#ctor(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            Return an instance of the IterSubList class
            </summary>
            <param name="enumerable">The collection to use</param>
            <param name="skipAtStart">The number of items to skip at the start of the list</param>
            <param name="skipAtEnd">The number of items to skip at the end of the list</param>
        </member>
        <member name="M:IdeaBlade.Util.IterSubList.GetEnumerator">
            <summary>
            <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.IterSelectDelegate">
            <summary>
            A selection delegate
            </summary>
        </member>
        <member name="T:IdeaBlade.Util.IterSelect">
            <summary>
            Iterate a collection in the Select order
            </summary>
            
        </member>
        <member name="M:IdeaBlade.Util.IterSelect.#ctor(System.Collections.IEnumerable,IdeaBlade.Util.IterSelectDelegate)">
            <summary>
            Create an instance of the IterSelect Class
            </summary>
            <param name="enumerable">A class that implements IEnumerable</param>    
            <param name="selector"></param>
        </member>
        <member name="M:IdeaBlade.Util.IterSelect.GetEnumerator">
            <summary>
            <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Util.FileFns">
            <summary>
            A collection of static utility methods all involved with the manipulation of files
            </summary>
        </member>
        <member name="M:IdeaBlade.Util.FileFns.ReadTextFile(System.String)">
            <summary>
            Read a text file into a string
            </summary>
            <param name="pFileName">The file to read</param>
            <returns>The contents of the file</returns>
        </member>
        <member name="M:IdeaBlade.Util.FileFns.ReadTextFileToByteArray(System.String)">
            <summary> Read a file into a byte array. </summary>
            <param name="pFileName">The file to read</param>
            <returns>The contents of the file in a byte array</returns>
        </member>
        <member name="M:IdeaBlade.Util.FileFns.WriteTextFile(System.String,System.String)">
            <summary>
            Write a string into a file either creating the file or replacing its current contents
            </summary>
            <param name="pFileName">The file to write to</param>
            <param name="pContents">A string to write to the file</param>
        </member>
        <member name="M:IdeaBlade.Util.FileFns.WriteTextFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            Write a string into a file either creating the file or replacing its current contents
            </summary>
            <param name="pFileName">The file to write to</param>
            <param name="pContents">A string to write to the file</param>
            <param name="pEncoding">The Encoding to use</param>
        </member>
        <member name="M:IdeaBlade.Util.FileFns.WriteStream(System.String,System.IO.Stream)">
            <summary>
            Write a stream into a file either creating the file or replacing its current contents
            </summary>
            <param name="pFileName">The file to write to</param>
            <param name="pStream">A stream to write to the file</param>
        </member>
        <member name="M:IdeaBlade.Util.FileFns.RenameFileWithCurrentTimestamp(System.String,System.Boolean)">
            <summary>
            Renames a file by adding the current ts to its name
            For example: foo.txt becomes foo.bak.20021102-102034.txt
            </summary>
            <param name="pFileName"></param>
            <param name="pThrowOnNotFound"></param>
        </member>
        <member name="M:IdeaBlade.Util.FileFns.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pSourcePath"></param>
            <param name="pDestPath"></param>
            <param name="pOverwrite"></param>
        </member>
        <member name="M:IdeaBlade.Util.FileFns.DeleteDirectory(System.String)">
            <summary>
            This method is intended to work around a bug with Directory.Delete sometimes failing 
            with "Directory is not empty" error. It does a recursive delete of the entire dir structure
            under the specified path
            </summary>
            <param name="pPath"></param>
        </member>
    </members>
</doc>
