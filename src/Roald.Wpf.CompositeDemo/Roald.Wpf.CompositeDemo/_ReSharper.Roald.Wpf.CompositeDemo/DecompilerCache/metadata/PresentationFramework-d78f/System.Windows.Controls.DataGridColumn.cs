// Type: System.Windows.Controls.DataGridColumn
// Assembly: PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// Assembly location: C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\PresentationFramework.dll

using System;
using System.ComponentModel;
using System.Runtime;
using System.Windows;
using System.Windows.Data;

namespace System.Windows.Controls
{
    public abstract class DataGridColumn : DependencyObject
    {
        public static readonly DependencyProperty HeaderProperty;
        public static readonly DependencyProperty HeaderStyleProperty;
        public static readonly DependencyProperty HeaderStringFormatProperty;
        public static readonly DependencyProperty HeaderTemplateProperty;
        public static readonly DependencyProperty HeaderTemplateSelectorProperty;
        public static readonly DependencyProperty CellStyleProperty;
        public static readonly DependencyProperty IsReadOnlyProperty;
        public static readonly DependencyProperty WidthProperty;
        public static readonly DependencyProperty MinWidthProperty;
        public static readonly DependencyProperty MaxWidthProperty;
        public static readonly DependencyProperty ActualWidthProperty;
        public static readonly DependencyProperty DisplayIndexProperty;
        public static readonly DependencyProperty SortMemberPathProperty;
        public static readonly DependencyProperty CanUserSortProperty;
        public static readonly DependencyProperty SortDirectionProperty;
        public static readonly DependencyProperty IsAutoGeneratedProperty;
        public static readonly DependencyProperty IsFrozenProperty;
        public static readonly DependencyProperty CanUserReorderProperty;
        public static readonly DependencyProperty DragIndicatorStyleProperty;
        public static readonly DependencyProperty CanUserResizeProperty;
        public static readonly DependencyProperty VisibilityProperty;

        [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]
        protected DataGridColumn();

        public object Header { get; set; }
        public Style HeaderStyle { get; set; }
        public string HeaderStringFormat { get; set; }
        public DataTemplate HeaderTemplate { get; set; }
        public DataTemplateSelector HeaderTemplateSelector { get; set; }
        public Style CellStyle { get; set; }
        public bool IsReadOnly { get; set; }
        public DataGridLength Width { get; set; }
        public double MinWidth { get; set; }
        public double MaxWidth { get; set; }
        public double ActualWidth { get; private set; }

        protected internal DataGrid DataGridOwner { [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]
        get; [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]
        internal set; }

        public int DisplayIndex { get; set; }
        public string SortMemberPath { get; set; }
        public bool CanUserSort { get; set; }
        public ListSortDirection? SortDirection { get; set; }
        public bool IsAutoGenerated { get; internal set; }
        public bool IsFrozen { get; internal set; }
        public bool CanUserReorder { get; set; }
        public Style DragIndicatorStyle { get; set; }

        public virtual BindingBase ClipboardContentBinding { [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]
        get; [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]
        set; }

        public bool CanUserResize { get; set; }
        public Visibility Visibility { get; set; }
        protected virtual bool OnCoerceIsReadOnly(bool baseValue);
        public FrameworkElement GetCellContent(object dataItem);
        public FrameworkElement GetCellContent(DataGridRow dataGridRow);
        protected abstract FrameworkElement GenerateElement(DataGridCell cell, object dataItem);
        protected abstract FrameworkElement GenerateEditingElement(DataGridCell cell, object dataItem);
        protected virtual object PrepareCellForEdit(FrameworkElement editingElement, RoutedEventArgs editingEventArgs);
        protected virtual void CancelCellEdit(FrameworkElement editingElement, object uneditedValue);
        protected virtual bool CommitCellEdit(FrameworkElement editingElement);
        protected void NotifyPropertyChanged(string propertyName);
        protected internal virtual void RefreshCellContent(FrameworkElement element, string propertyName);
        public virtual object OnCopyingCellClipboardContent(object item);
        public virtual void OnPastingCellClipboardContent(object item, object cellContent);
        public event EventHandler<DataGridCellClipboardEventArgs> CopyingCellClipboardContent;
        public event EventHandler<DataGridCellClipboardEventArgs> PastingCellClipboardContent;
    }
}
